#!/usr/bin/env python3
"""
Enhanced RPA Bot for Railway - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Multilogin –∏ –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
–ó–∞–º–µ–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–π rpa_bot_cloud.py —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
"""

import os
import json
import time
import logging
import base64
import random
import traceback
from flask import Flask, request, jsonify
import requests
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import WebDriverException, TimeoutException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('logs/rpa_bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL', 'https://izmgzstdgoswlozinmyk.supabase.co')
SUPABASE_SERVICE_KEY = os.getenv('SUPABASE_SERVICE_KEY', '')
MULTILOGIN_TOKEN = os.getenv('MULTILOGIN_TOKEN', '')
BOT_VERSION = "Enhanced-Railway-v2.1"
ENVIRONMENT = "railway-enhanced"

class MultiloginManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Multilogin API"""
    def __init__(self, token=None):
        self.token = token or MULTILOGIN_TOKEN
        self.base_url = "https://api.multiloginapp.com/v2"
        self.active_profiles = {}
        logger.info(f"MultiloginManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {'–µ—Å—Ç—å' if self.token else '–Ω–µ—Ç'}")

    def check_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Multilogin"""
        if not self.token:
            return False
        try:
            response = requests.get(
                f"{self.base_url}/profile",
                headers={"Authorization": f"Bearer {self.token}"},
                timeout=10
            )
            return response.status_code == 200
        except:
            return False

    def get_profiles(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        if not self.token:
            return []
        try:
            response = requests.get(
                f"{self.base_url}/profile",
                headers={"Authorization": f"Bearer {self.token}"},
                timeout=10
            )
            if response.status_code == 200:
                return response.json().get('data', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        return []

    def start_profile(self, profile_id):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
        if not self.token:
            return None
        try:
            response = requests.get(
                f"{self.base_url}/profile/start?profileId={profile_id}",
                headers={"Authorization": f"Bearer {self.token}"},
                timeout=30
            )
            if response.status_code == 200:
                data = response.json()
                self.active_profiles[profile_id] = data
                return data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return None

    def stop_profile(self, profile_id):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        if not self.token:
            return
        try:
            requests.get(
                f"{self.base_url}/profile/stop?profileId={profile_id}",
                headers={"Authorization": f"Bearer {self.token}"},
                timeout=10
            )
            if profile_id in self.active_profiles:
                del self.active_profiles[profile_id]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

    def get_selenium_driver(self, profile_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Selenium –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        if profile_id not in self.active_profiles:
            return None
        
        profile_data = self.active_profiles[profile_id]
        selenium_port = profile_data.get('data', {}).get('port')
        
        if not selenium_port:
            return None

        try:
            options = Options()
            options.add_experimental_option("debuggerAddress", f"127.0.0.1:{selenium_port}")
            driver = webdriver.Chrome(options=options)
            return driver
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Selenium –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return None

class EnhancedRPABot:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π RPA –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Multilogin"""
    
    def __init__(self):
        self.driver = None
        self.multilogin = None
        self.current_profile_id = None
        self.task_results = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Multilogin –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
        if MULTILOGIN_TOKEN:
            self.multilogin = MultiloginManager()
            if self.multilogin.check_connection():
                logger.info("‚úÖ Multilogin –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è Multilogin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.multilogin = None
        else:
            logger.info("‚ÑπÔ∏è –¢–æ–∫–µ–Ω Multilogin –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")

    def setup_chrome_driver(self, account_data=None, multilogin_token=None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω Multilogin –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –∑–∞–¥–∞—á–µ
            if multilogin_token:
                logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω Multilogin –∏–∑ –∑–∞–¥–∞—á–∏")
                self.multilogin = MultiloginManager(multilogin_token)
                if self.multilogin.check_connection():
                    logger.info("‚úÖ Multilogin –ø–æ–¥–∫–ª—é—á–µ–Ω —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –∑–∞–¥–∞—á–∏")
                else:
                    logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω Multilogin –∏–∑ –∑–∞–¥–∞—á–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                    self.multilogin = None
            elif MULTILOGIN_TOKEN and not self.multilogin:
                logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω Multilogin –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                self.multilogin = MultiloginManager()
                if self.multilogin.check_connection():
                    logger.info("‚úÖ Multilogin –ø–æ–¥–∫–ª—é—á–µ–Ω —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
                else:
                    logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω Multilogin –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                    self.multilogin = None
            
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Multilogin –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.multilogin and account_data:
                profiles = self.multilogin.get_profiles()
                if profiles:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                    profile_id = profiles[0].get('uuid')
                    if profile_id:
                        profile_info = self.multilogin.start_profile(profile_id)
                        if profile_info:
                            self.current_profile_id = profile_id
                            driver = self.multilogin.get_selenium_driver(profile_id)
                            if driver:
                                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Multilogin –±—Ä–∞—É–∑–µ—Ä")
                                return driver
            
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π Chrome —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π Chrome —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º")
            return self.setup_regular_chrome()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return self.setup_regular_chrome()

    def setup_regular_chrome(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ Chrome —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º"""
        try:
            logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ Chrome —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º...")
            
            options = Options()
            options.add_argument('--headless=new')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--window-size=1920,1080')
            options.add_argument('--disable-web-security')
            options.add_argument('--disable-features=VizDisplayCompositor')
            
            # –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –æ–ø—Ü–∏–∏
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            # User Agent
            options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
            
            driver = webdriver.Chrome(options=options)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç —Å–∫—Ä–∏–ø—Ç—ã
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–π Chrome –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º")
            return driver
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ Chrome: {e}")
            raise

    def execute_action(self, action):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            action_type = action.get('type')
            logger.info(f"üé¨ –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: {action_type}")
            
            if action_type == 'navigate':
                url = action.get('url')
                logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
                self.driver.get(url)
                time.sleep(random.uniform(2, 4))
                
            elif action_type == 'wait':
                duration = action.get('duration', 2000) / 1000
                logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {duration} —Å–µ–∫")
                time.sleep(duration)
                
            elif action_type == 'screenshot':
                """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
                logger.info("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                try:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫–∞–∫ PNG bytes
                    screenshot_png = self.driver.get_screenshot_as_png()
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                    screenshot_base64 = base64.b64encode(screenshot_png).decode('utf-8')
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if not hasattr(self, 'task_results'):
                        self.task_results = {}
                    self.task_results['screenshot'] = f"data:image/png;base64,{screenshot_base64}"
                    
                    logger.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ base64: {len(screenshot_base64)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return True
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                    return False
                    
            elif action_type == 'click':
                selector = action.get('selector')
                if selector:
                    element = WebDriverWait(self.driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    ActionChains(self.driver).move_to_element(element).click().perform()
                    time.sleep(random.uniform(1, 2))
                
            elif action_type == 'type':
                selector = action.get('selector')
                text = action.get('text', '')
                if selector and text:
                    element = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                    element.clear()
                    # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –≤–≤–æ–¥
                    for char in text:
                        element.send_keys(char)
                        time.sleep(random.uniform(0.05, 0.15))
                        
            elif action_type == 'scroll':
                x = action.get('x', 0)
                y = action.get('y', 300)
                self.driver.execute_script(f"window.scrollBy({x}, {y});")
                time.sleep(random.uniform(1, 2))
                
            elif action_type == 'check_element':
                selector = action.get('selector')
                if selector:
                    try:
                        WebDriverWait(self.driver, 10).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                        )
                        logger.info(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {selector}")
                        return True
                    except TimeoutException:
                        logger.warning(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {selector}")
                        return False
                        
            elif action_type == 'telegram_like':
                logger.info("‚ù§Ô∏è –í—ã–ø–æ–ª–Ω—è–µ–º –ª–∞–π–∫ –≤ Telegram")
                # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Telegram
                try:
                    # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–∞–∫—Ü–∏–∏
                    reaction_button = WebDriverWait(self.driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, ".ReactionButton, .reaction-button, [data-testid='reaction']"))
                    )
                    reaction_button.click()
                    time.sleep(1)
                    return True
                except TimeoutException:
                    logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                    
            elif action_type == 'multilogin_test':
                logger.info("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Multilogin")
                return self.multilogin is not None and self.current_profile_id is not None
                
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {e}")
            return False

    def execute_rpa_task(self, task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏"""
        task_id = task.get('taskId')
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ RPA –∑–∞–¥–∞—á–∏: {task_id}")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
            account_data = {
                'username': task.get('accountId', 'test-account'),
                'platform': task.get('metadata', {}).get('platform', 'web')
            }
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Multilogin –∏–∑ –∑–∞–¥–∞—á–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø—Ä—è–º–æ–π —Ç–æ–∫–µ–Ω > metadata > –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è)
            multilogin_token = None
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π —Ç–æ–∫–µ–Ω –≤ –∑–∞–¥–∞—á–µ
            if task.get('multilogin_token'):
                multilogin_token = task.get('multilogin_token')
                logger.info("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω Multilogin –∏–∑ –ø–æ–ª—è multilogin_token")
            # –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ metadata
            elif task.get('metadata', {}).get('multilogin_token_info', {}).get('token'):
                token_info = task.get('metadata', {}).get('multilogin_token_info', {})
                multilogin_token = token_info.get('token')
                logger.info("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω Multilogin –∏–∑ metadata.multilogin_token_info")
            # Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            elif MULTILOGIN_TOKEN:
                multilogin_token = MULTILOGIN_TOKEN
                logger.info("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω Multilogin –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            else:
                logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω Multilogin –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –∑–∞–¥–∞—á–µ, –Ω–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
                
            logger.info(f"üîë –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞: {'‚úÖ –ï–°–¢–¨' if multilogin_token else '‚ùå –ù–ï–¢'}")
            if multilogin_token:
                logger.info(f"üîë –¢–æ–∫–µ–Ω (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): {multilogin_token[:50]}...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á–∏
            self.task_results = {}
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —Ç–æ–∫–µ–Ω–æ–º Multilogin
            self.driver = self.setup_chrome_driver(account_data, multilogin_token)
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            initial_url = task.get('url')
            if initial_url:
                logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {initial_url}")
                self.driver.get(initial_url)
                time.sleep(2)
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            actions = task.get('actions', [])
            success_count = 0
            
            for i, action in enumerate(actions):
                logger.info(f"üìã –î–µ–π—Å—Ç–≤–∏–µ {i+1}/{len(actions)}: {action.get('type')}")
                
                try:
                    if self.execute_action(action):
                        success_count += 1
                        logger.info(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        logger.warning(f"‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–∏ {i+1}: {e}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                time.sleep(random.uniform(1, 2))
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞—á–∏
            result_data = {
                'success': True,
                'actions_completed': success_count,
                'total_actions': len(actions),
                'task_id': task_id,
                'multilogin_integrated': self.multilogin is not None and self.current_profile_id is not None,
                'screenshot': self.task_results.get('screenshot') if hasattr(self, 'task_results') else None,
                'platform': task.get('metadata', {}).get('platform', 'web'),
                'execution_time': 0,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                'browser_fingerprint': self._get_browser_fingerprint() if self.driver else {},
                'multilogin_profile': self.current_profile_id
            }
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            if success_count == len(actions):
                logger.info("‚úÖ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.info(f"‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count}/{len(actions)} –¥–µ–π—Å—Ç–≤–∏–π")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return False
            
        finally:
            self.cleanup()

    def _get_browser_fingerprint(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            fingerprint = {}
            
            # –ü–æ–ª—É—á–∞–µ–º User Agent
            try:
                fingerprint['user_agent'] = self.driver.execute_script("return navigator.userAgent;")
            except:
                pass
                
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
            try:
                fingerprint['screen_resolution'] = self.driver.execute_script("return screen.width + 'x' + screen.height;")
            except:
                pass
                
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫
            try:
                fingerprint['language'] = self.driver.execute_script("return navigator.language;")
            except:
                pass
                
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
            try:
                fingerprint['timezone'] = self.driver.execute_script("return Intl.DateTimeFormat().resolvedOptions().timeZone;")
            except:
                pass
                
            return fingerprint
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è fingerprint: {e}")
            return {}

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.driver:
                self.driver.quit()
                self.driver = None
                
            if self.multilogin and self.current_profile_id:
                self.multilogin.stop_profile(self.current_profile_id)
                self.current_profile_id = None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RPA –±–æ—Ç–∞
rpa_bot = EnhancedRPABot()

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        status = {
            'status': 'ok',
            'timestamp': time.time(),
            'version': BOT_VERSION,
            'environment': ENVIRONMENT,
            'multilogin': rpa_bot.multilogin is not None,
            'chrome_available': True
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Chrome
        try:
            options = Options()
            options.add_argument('--headless=new')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            test_driver = webdriver.Chrome(options=options)
            test_driver.quit()
        except:
            status['chrome_available'] = False
            
        return jsonify(status)
    except Exception as e:
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500

@app.route('/execute', methods=['POST'])
def execute_rpa():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏"""
    try:
        task = request.json
        task_id = task.get('task_id') or task.get('taskId')  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        
        logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–∞ RPA –∑–∞–¥–∞—á–∞: {task_id}")
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {json.dumps(task, indent=2, ensure_ascii=False)}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
        if not task_id:
            return jsonify({
                'success': False,
                'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç task_id –∏–ª–∏ taskId'
            }), 400
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        normalized_task = {
            'taskId': task_id,
            'url': task.get('url'),
            'actions': task.get('actions', []),
            'metadata': {
                'platform': task.get('platform', 'web'),
                'account': task.get('account_data', {}),
                'multilogin_token_info': task.get('metadata', {}).get('multilogin_token_info', {})
            },
            'multilogin_profile': task.get('multilogin_profile'),
            'timeout': task.get('timeout', 60),
            'multilogin_token': task.get('multilogin_token')  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–¥–∞—á–∏
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        if normalized_task.get('multilogin_token'):
            logger.info(f"üîë –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω Multilogin –≤ –∑–∞–¥–∞—á–µ: {normalized_task['multilogin_token'][:50]}...")
        else:
            logger.info("‚ö†Ô∏è –¢–æ–∫–µ–Ω Multilogin –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –∑–∞–¥–∞—á–µ")
            
        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
        success = rpa_bot.execute_rpa_task(normalized_task)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        response_data = {
            'success': success,
            'task_id': task_id,
            'message': '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' if success else '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏',
            'execution_time': 0,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            'completed_actions': len(task.get('actions', [])) if success else 0
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(rpa_bot, 'task_results') and rpa_bot.task_results:
            if 'screenshot' in rpa_bot.task_results:
                response_data['screenshot'] = rpa_bot.task_results['screenshot']
                response_data['screenshots'] = [rpa_bot.task_results['screenshot']]
            
            # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            rpa_bot.task_results = {}
        
        logger.info(f"üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: success={success}, screenshot={'–µ—Å—Ç—å' if 'screenshot' in response_data else '–Ω–µ—Ç'}")
        
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API /execute: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({
            'success': False,
            'error': str(e),
            'task_id': task.get('task_id') or task.get('taskId') if 'task' in locals() else None
        }), 500

@app.route('/multilogin/status', methods=['GET'])
def multilogin_status():
    """–°—Ç–∞—Ç—É—Å Multilogin"""
    try:
        if not rpa_bot.multilogin:
            return jsonify({
                'connected': False,
                'error': 'Multilogin –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            })
            
        profiles = rpa_bot.multilogin.get_profiles()
        
        return jsonify({
            'connected': True,
            'token_available': bool(rpa_bot.multilogin.token),
            'profiles_count': len(profiles),
            'active_profiles': len(rpa_bot.multilogin.active_profiles)
        })
        
    except Exception as e:
        return jsonify({
            'connected': False,
            'error': str(e)
        }), 500

@app.route('/multilogin/st', methods=['GET'])
def multilogin_simple_status():
    """–ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å Multilogin (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    try:
        if not rpa_bot.multilogin:
            return jsonify({'status': 'disconnected'})
        return jsonify({'status': 'connected'})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/test', methods=['GET'])
def test_bot():
    """–¢–µ—Å—Ç RPA –±–æ—Ç–∞"""
    try:
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Enhanced RPA –±–æ—Ç–∞...")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞
        test_task = {
            'taskId': f'test_{int(time.time())}',
            'url': 'https://httpbin.org/get',
            'actions': [
                {'type': 'navigate', 'url': 'https://httpbin.org/get'},
                {'type': 'wait', 'duration': 2000},
                {'type': 'screenshot', 'description': '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç'}
            ],
            'metadata': {'platform': 'test'}
        }
        
        success = rpa_bot.execute_rpa_task(test_task)
        
        response = {
            'success': success,
            'message': 'Enhanced —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ' if success else 'Enhanced —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª',
            'version': BOT_VERSION,
            'multilogin_available': rpa_bot.multilogin is not None
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(rpa_bot, 'task_results') and rpa_bot.task_results:
            if 'screenshot' in rpa_bot.task_results:
                response['screenshot'] = rpa_bot.task_results['screenshot']
                response['screenshot_length'] = len(rpa_bot.task_results['screenshot'])
            
        return jsonify(response)
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs('logs', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Enhanced RPA –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"üîó Supabase URL: {SUPABASE_URL}")
    logger.info(f"üîë Multilogin Token: {'–Ω–∞–π–¥–µ–Ω' if MULTILOGIN_TOKEN else '–ù–ï –Ω–∞–π–¥–µ–Ω'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Chrome –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    chrome_path = '/usr/bin/google-chrome'
    if os.path.exists(chrome_path):
        logger.info(f"‚úÖ Chrome –Ω–∞–π–¥–µ–Ω: {chrome_path}")
    else:
        logger.error(f"‚ùå Chrome –ù–ï –Ω–∞–π–¥–µ–Ω: {chrome_path}")
    
    app.run(host='0.0.0.0', port=port, debug=False)