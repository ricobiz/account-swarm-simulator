
#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Cloud RPA-–±–æ—Ç –¥–ª—è Railway
"""

import os
import time
import json
import logging
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
import undetected_chromedriver as uc
from fake_useragent import UserAgent

class AdvancedCloudRPABot:
    def __init__(self):
        self.driver = None
        self.wait = None
        self.logger = logging.getLogger(__name__)
        
    def create_chrome_options(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π Chrome –¥–ª—è Railway"""
        options = Options()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã
        options.add_argument('--headless=new')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-gpu')
        options.add_argument('--disable-web-security')
        options.add_argument('--disable-features=VizDisplayCompositor')
        options.add_argument('--disable-extensions')
        options.add_argument('--disable-plugins')
        options.add_argument('--disable-images')
        options.add_argument('--window-size=1920,1080')
        options.add_argument('--single-process')
        options.add_argument('--no-zygote')
        options.add_argument('--disable-background-timer-throttling')
        options.add_argument('--disable-backgrounding-occluded-windows')
        options.add_argument('--disable-renderer-backgrounding')
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –æ–ø—Ü–∏–∏
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_experimental_option("useAutomationExtension", False)
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏ –¥–ª—è Railway
        options.add_argument('--memory-pressure-off')
        options.add_argument('--max_old_space_size=4096')
        options.add_argument('--disable-background-networking')
        
        # User agent
        try:
            ua = UserAgent()
            user_agent = ua.random
            self.logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º User-Agent: {user_agent}")
            options.add_argument(f'--user-agent={user_agent}')
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π User-Agent: {e}")
            options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        options.add_argument('--ignore-certificate-errors')
        options.add_argument('--ignore-ssl-errors')
        options.add_argument('--ignore-certificate-errors-spki-list')
        options.add_argument('--disable-logging')
        options.add_argument('--disable-default-apps')
        options.add_argument('--disable-sync')
        
        return options
        
    def setup_browser(self, proxy=None):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        try:
            self.logger.info("üîß === –ù–ê–ß–ê–õ–û –ù–ê–°–¢–†–û–ô–ö–ò –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û RPA –ë–†–ê–£–ó–ï–†–ê ===")
            
            options = self.create_chrome_options()
            
            # –ü—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if proxy:
                proxy_str = f"{proxy['ip']}:{proxy['port']}"
                options.add_argument(f'--proxy-server=http://{proxy_str}')
                self.logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_str}")
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –û–±—ã—á–Ω—ã–π Chrome WebDriver
            try:
                self.logger.info("üìç –ü–æ–ø—ã—Ç–∫–∞ 1: –û–±—ã—á–Ω—ã–π Chrome WebDriver...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                chrome_bin = os.environ.get('GOOGLE_CHROME_BIN')
                if chrome_bin:
                    options.binary_location = chrome_bin
                    self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω Chrome Binary: {chrome_bin}")
                
                chromedriver_path = os.environ.get('CHROMEDRIVER_PATH')
                if chromedriver_path:
                    self.driver = webdriver.Chrome(executable_path=chromedriver_path, options=options)
                    self.logger.info(f"‚úÖ Chrome —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –¥—Ä–∞–π–≤–µ—Ä–æ–º: {chromedriver_path}")
                else:
                    self.driver = webdriver.Chrome(options=options)
                    self.logger.info("‚úÖ Chrome —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –¥—Ä–∞–π–≤–µ—Ä–æ–º")
                    
            except Exception as e1:
                self.logger.warning(f"‚ö†Ô∏è –û–±—ã—á–Ω—ã–π Chrome –Ω–µ —É–¥–∞–ª—Å—è: {e1}")
                
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: Undetected Chrome
                try:
                    self.logger.info("üìç –ü–æ–ø—ã—Ç–∫–∞ 2: Undetected Chrome...")
                    
                    uc_options = uc.ChromeOptions()
                    uc_options.add_argument('--headless=new')
                    uc_options.add_argument('--no-sandbox') 
                    uc_options.add_argument('--disable-dev-shm-usage')
                    uc_options.add_argument('--disable-gpu')
                    uc_options.add_argument('--single-process')
                    uc_options.add_argument('--window-size=1920,1080')
                    uc_options.add_argument('--disable-blink-features=AutomationControlled')
                    
                    if proxy:
                        uc_options.add_argument(f'--proxy-server=http://{proxy_str}')
                    
                    self.driver = uc.Chrome(options=uc_options, version_main=None)
                    self.logger.info("‚úÖ Undetected Chrome —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                except Exception as e2:
                    self.logger.error(f"‚ùå Undetected Chrome —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {e2}")
                    
                    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
                    try:
                        self.logger.info("üìç –ü–æ–ø—ã—Ç–∫–∞ 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Chrome...")
                        
                        minimal_options = Options()
                        minimal_options.add_argument('--headless')
                        minimal_options.add_argument('--no-sandbox')
                        minimal_options.add_argument('--disable-dev-shm-usage')
                        
                        self.driver = webdriver.Chrome(options=minimal_options)
                        self.logger.info("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Chrome —Å–æ–∑–¥–∞–Ω")
                        
                    except Exception as e3:
                        self.logger.error(f"‚ùå –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Chrome –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
                        self.logger.error(f"–û—à–∏–±–∫–∞ 1 (–æ–±—ã—á–Ω—ã–π): {e1}")
                        self.logger.error(f"–û—à–∏–±–∫–∞ 2 (undetected): {e2}")
                        self.logger.error(f"–û—à–∏–±–∫–∞ 3 (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π): {e3}")
                        return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebDriverWait
            self.wait = WebDriverWait(self.driver, 15)
            
            # –¢–∞–π–º–∞—É—Ç—ã
            self.driver.set_page_load_timeout(45)
            self.driver.implicitly_wait(10)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç —Å–∫—Ä–∏–ø—Ç—ã
            try:
                self.driver.execute_script("""
                    // –°–∫—Ä—ã–≤–∞–µ–º webdriver
                    Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                    
                    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º navigator
                    Object.defineProperty(navigator, 'plugins', {
                        get: () => [1, 2, 3, 4, 5].map((i) => ({ name: `Plugin ${i}` }))
                    });
                    
                    Object.defineProperty(navigator, 'languages', {
                        get: () => ['en-US', 'en', 'ru']
                    });
                    
                    // –£–±–∏—Ä–∞–µ–º chrome.runtime
                    if (window.chrome) {
                        delete window.chrome.runtime;
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≤ navigator.platform
                    Object.defineProperty(navigator, 'platform', {
                        get: () => 'Win32'
                    });
                """)
                self.logger.info("ü•∑ –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç —Å–∫—Ä–∏–ø—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç —Å–∫—Ä–∏–ø—Ç—ã –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å: {e}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
            try:
                self.logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä...")
                self.driver.get("data:text/html,<html><body><h1>RPA Bot Test</h1></body></html>")
                time.sleep(1)
                self.logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                self.logger.error(f"‚ùå –¢–µ—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}")
                return False
            
            self.logger.info("üéâ === –ë–†–ê–£–ó–ï–† –ù–ê–°–¢–†–û–ï–ù –ò –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï! ===")
            return True
            
        except Exception as e:
            self.logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            self.logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            return False
    
    def navigate_to_url(self, url):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        try:
            self.logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if not self.driver:
                self.logger.error("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            self.driver.get(url)
            
            # –ñ–¥–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(3)
            
            current_url = self.driver.current_url
            self.logger.info(f"üìç –¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            try:
                page_state = self.driver.execute_script("return document.readyState")
                self.logger.info(f"üìÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_state}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º title
                title = self.driver.title or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                self.logger.info(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title[:50]}...")
                
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ {url}: {e}")
            return False
    
    def find_element_safe(self, selector):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å Google-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏"""
        try:
            self.logger.info(f"üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞: {selector}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Google/YouTube
            google_selectors = [
                'input[type="email"]',
                'input[id="identifierId"]',
                'input[name="identifier"]',
                'input[autocomplete="username"]',
                'input[aria-label*="email" i]',
                'input[placeholder*="email" i]'
            ]
            
            # –ï—Å–ª–∏ —ç—Ç–æ email —Å–µ–ª–µ–∫—Ç–æ—Ä, –ø—Ä–æ–±—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ Google —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            if 'email' in selector.lower() or 'identifierId' in selector:
                selectors_to_try = google_selectors + [selector]
            else:
                selectors_to_try = [selector]
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            for sel in selectors_to_try:
                try:
                    # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
                    element = WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, sel))
                    )
                    self.logger.info(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ CSS: {sel}")
                    return element
                except:
                    continue
            
            # –ü—Ä–æ–±—É–µ–º XPath —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            xpath_selectors = [
                "//input[@type='email']",
                "//input[@id='identifierId']",
                "//input[contains(@placeholder, 'email')]",
                "//input[contains(@aria-label, 'email')]"
            ]
            
            for xpath in xpath_selectors:
                try:
                    element = WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((By.XPATH, xpath))
                    )
                    self.logger.info(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ XPath: {xpath}")
                    return element
                except:
                    continue
                    
            self.logger.warning(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {selector}")
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {selector}: {e}")
            return None
    
    def execute_action(self, action):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            action_type = action.get('type')
            self.logger.info(f"üé¨ === –í–´–ü–û–õ–ù–ï–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø: {action_type} ===")
            
            if action_type == 'navigate':
                url = action.get('url')
                result = self.navigate_to_url(url)
                self.logger.info(f"üåê –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {'‚úÖ' if result else '‚ùå'}")
                return result
                
            elif action_type == 'wait':
                duration = action.get('duration', 1000)
                self.logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {duration}ms")
                time.sleep(duration / 1000)
                return True
                
            elif action_type == 'check_element':
                selector = action.get('element', {}).get('selector')
                element = self.find_element_safe(selector)
                found = element is not None
                self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {selector}: {'‚úÖ –Ω–∞–π–¥–µ–Ω' if found else '‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω'}")
                
                if found:
                    try:
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
                        tag_name = element.tag_name
                        is_displayed = element.is_displayed()
                        is_enabled = element.is_enabled()
                        self.logger.info(f"üìã –≠–ª–µ–º–µ–Ω—Ç: {tag_name}, –≤–∏–¥–∏–º—ã–π: {is_displayed}, –∞–∫—Ç–∏–≤–Ω—ã–π: {is_enabled}")
                    except:
                        pass
                        
                return found
                
            elif action_type == 'click':
                selector = action.get('element', {}).get('selector')
                element = self.find_element_safe(selector)
                if element:
                    try:
                        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                        self.driver.execute_script(
                            "arguments[0].scrollIntoView({block: 'center'});", element
                        )
                        time.sleep(1)
                        
                        # –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
                        element.click()
                        self.logger.info(f"üëÜ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: {selector}")
                    except:
                        try:
                            # JavaScript –∫–ª–∏–∫ –∫–∞–∫ fallback
                            self.driver.execute_script("arguments[0].click();", element)
                            self.logger.info(f"üëÜ JS –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: {selector}")
                        except Exception as e:
                            self.logger.error(f"‚ùå –ö–ª–∏–∫ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
                            return False
                    time.sleep(2)
                    return True
                return False
                
            elif action_type == 'type':
                selector = action.get('element', {}).get('selector')
                text = action.get('element', {}).get('text')
                element = self.find_element_safe(selector)
                if element:
                    try:
                        # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ
                        element.click()
                        time.sleep(0.5)
                        
                        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
                        element.clear()
                        time.sleep(0.5)
                        
                        # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
                        element.send_keys(text)
                        self.logger.info(f"‚å®Ô∏è –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω –≤ {selector}: {text}")
                        time.sleep(1)
                        return True
                    except Exception as type_error:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {type_error}")
                return False
                
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
                return False
                
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {e}")
            return False
    
    def execute_task(self, task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        task_id = task.get('taskId', 'unknown')
        self.logger.info(f"üöÄ === –ù–ê–ß–ê–õ–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø RPA –ó–ê–î–ê–ß–ò {task_id} ===")
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            setup_success = self.setup_browser(task.get('proxy'))
            if not setup_success:
                error_msg = '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä'
                self.logger.error(f"‚ùå {error_msg}")
                return {
                    'taskId': task_id,
                    'success': False,
                    'error': error_msg,
                    'environment': 'railway-universal-cloud',
                    'browser_setup': 'failed'
                }
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            actions = task.get('actions', [])
            completed_actions = 0
            total_actions = len(actions)
            failed_actions = []
            
            self.logger.info(f"üìã –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: {total_actions}")
            
            for i, action in enumerate(actions):
                action_type = action.get('type', 'unknown')
                action_id = action.get('id', f'action_{i}')
                self.logger.info(f"üé¨ –î–µ–π—Å—Ç–≤–∏–µ {i+1}/{total_actions} ({action_id}): {action_type}")
                
                if self.execute_action(action):
                    completed_actions += 1
                    self.logger.info(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    failed_actions.append(f"{action_id}:{action_type}")
                    self.logger.warning(f"‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ {i+1} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                delay = action.get('delay', 1000)
                if delay > 0:
                    time.sleep(delay / 1000)
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            success = completed_actions > 0
            success_rate = (completed_actions / total_actions * 100) if total_actions > 0 else 0
            
            result_message = f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {completed_actions}/{total_actions} –¥–µ–π—Å—Ç–≤–∏–π ({success_rate:.1f}%)"
            if failed_actions:
                result_message += f". –ù–µ —É–¥–∞–ª–∏—Å—å: {', '.join(failed_actions)}"
            
            self.logger.info(f"üèÅ === –ó–ê–î–ê–ß–ê {task_id} –ó–ê–í–ï–†–®–ï–ù–ê ===")
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_message}")
            
            return {
                'taskId': task_id,
                'success': success,
                'message': result_message,
                'completedActions': completed_actions,
                'totalActions': total_actions,
                'successRate': success_rate,
                'failedActions': failed_actions,
                'environment': 'railway-universal-cloud-v2',
                'platform': task.get('metadata', {}).get('platform', 'unknown'),
                'features': ['universal-platforms', 'antidetect', 'human-behavior', 'multi-fallback']
            }
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {str(e)}"
            self.logger.error(f"üí• {error_msg}")
            self.logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            return {
                'taskId': task_id,
                'success': False,
                'error': error_msg,
                'environment': 'railway-universal-cloud-v2'
            }
        finally:
            self.cleanup()
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.driver:
                self.driver.quit()
                self.logger.info("üßπ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç –∏ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
