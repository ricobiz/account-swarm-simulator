import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const currentTime = new Date().toISOString()
    console.log(`üöÄ === –ù–ê–ß–ê–õ–û –ü–†–Ø–ú–û–ô –ü–†–û–í–ï–†–ö–ò RPA –ë–û–¢–ê ===`)
    console.log(`üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${currentTime}`)
    console.log(`üìç Timestamp: ${Date.now()}`)
    
    const rpaEndpoint = Deno.env.get('RPA_BOT_ENDPOINT')
    
    if (!rpaEndpoint) {
      return new Response(
        JSON.stringify({ 
          error: 'RPA_BOT_ENDPOINT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
          endpoint: null 
        }), 
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
      )
    }

    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º RPA –±–æ—Ç –Ω–∞–ø—Ä—è–º—É—é:', rpaEndpoint)

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º /health endpoint
    let healthStatus = null;
    try {
      const healthResponse = await fetch(`${rpaEndpoint}/health`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      })
      
      if (healthResponse.ok) {
        healthStatus = await healthResponse.json()
        console.log('‚úÖ Health check —É—Å–ø–µ—à–µ–Ω:', healthStatus)
      } else {
        console.log('‚ùå Health check failed:', healthResponse.status)
        healthStatus = { error: `HTTP ${healthResponse.status}` }
      }
    } catch (error) {
      console.log('‚ùå Health check error:', error.message)
      healthStatus = { error: error.message }
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω Multilogin –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Multilogin –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    
    const { data: tokenData, error: tokenError } = await supabase
      .from('multilogin_tokens')
      .select('token, email, expires_at')
      .eq('is_active', true)
      .order('created_at', { ascending: false })
      .limit(1)
      .maybeSingle()

    let multiloginToken = null;
    if (tokenError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', tokenError.message)
    } else if (!tokenData) {
      console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω Multilogin –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    } else if (new Date() > new Date(tokenData.expires_at)) {
      console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω Multilogin –∏—Å—Ç–µ–∫')
    } else {
      multiloginToken = tokenData.token;
      console.log(`‚úÖ –¢–æ–∫–µ–Ω Multilogin –ø–æ–ª—É—á–µ–Ω: ${tokenData.email}, –∏—Å—Ç–µ–∫–∞–µ—Ç: ${tokenData.expires_at}`)
    }

    // 3. –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ RPA –∑–∞–ø—Ä–æ—Å–∞
    let rpaTestResult = null;
    try {
      const testTime = new Date().toISOString()
      console.log(`üß™ === –¢–ï–°–¢–ò–†–£–ï–ú RPA –ó–ê–ü–†–û–° ===`)
      console.log(`üïê –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${testTime}`)
      console.log(`üéØ URL –¥–ª—è —Ç–µ—Å—Ç–∞: https://www.google.com`)
      console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω: ${multiloginToken ? '–î–ê' : '–ù–ï–¢'}`)
      
      const testTask = {
        taskId: `direct_test_${Date.now()}`, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: taskId –≤–º–µ—Å—Ç–æ task_id
        url: 'https://www.google.com',
        actions: [
          { type: 'navigate', url: 'https://www.google.com', description: '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Google' },
          { type: 'wait', duration: 3000, description: '–ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Google' },
          { type: 'screenshot', description: '–î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç Google –¥–ª—è —Ç–µ—Å—Ç–∞' }
        ],
        timeout: 30,
        metadata: {
          platform: 'test_google',
          account: { username: 'test_user' },
          multilogin_token_info: multiloginToken ? {
            token: multiloginToken,
            email: tokenData?.email || 'unknown'
          } : null
        },
        multilogin_token: multiloginToken // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä—è–º–æ –≤ –∑–∞–¥–∞—á—É
      }

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ RPA –±–æ—Ç: ${rpaEndpoint}/execute`)
      console.log(`üïê –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toISOString()}`)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
      const { data: savedTask, error: saveError } = await supabase
        .from('rpa_tasks')
        .insert({
          task_id: testTask.taskId,
          task_data: testTask,
          status: 'processing',
          user_id: null // —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞
        })
        .select()
        .single()

      if (saveError) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', saveError.message)
      } else {
        console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É:', savedTask.id)
      }

      const rpaResponse = await fetch(`${rpaEndpoint}/execute`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(testTask)
      })

      console.log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç RPA –±–æ—Ç–∞: ${rpaResponse.status}`)
      console.log(`üïê –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${new Date().toISOString()}`)

      if (rpaResponse.ok) {
        rpaTestResult = await rpaResponse.json()
        console.log('‚úÖ RPA —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω:', { 
          success: rpaTestResult.success,
          screenshot_available: !!rpaTestResult.screenshot,
          screenshot_length: rpaTestResult.screenshot ? rpaTestResult.screenshot.length : 0
        })
        
        // –û–±—Ä–µ–∑–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ª–æ–≥–æ–≤ (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
        if (rpaTestResult.screenshot) {
          console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω: ${rpaTestResult.screenshot.substring(0, 100)}...`)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if (savedTask) {
          console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ...')
          const { error: updateError } = await supabase
            .from('rpa_tasks')
            .update({
              status: rpaTestResult.success ? 'completed' : 'failed',
              result_data: {
                success: rpaTestResult.success,
                screenshot: rpaTestResult.screenshot,
                message: rpaTestResult.message || '–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω',
                data: {
                  platform: 'test_google',
                  account: 'test_user',
                  screenshot_received: !!rpaTestResult.screenshot
                }
              }
            })
            .eq('id', savedTask.id)

          if (updateError) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', updateError.message)
          } else {
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É')
          }
        }
      } else {
        const errorText = await rpaResponse.text()
        console.log('‚ùå RPA —Ç–µ—Å—Ç failed:', rpaResponse.status, errorText)
        rpaTestResult = { 
          error: `HTTP ${rpaResponse.status}`, 
          details: errorText 
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ failed
        if (savedTask) {
          console.log('üíæ –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ failed...')
          await supabase
            .from('rpa_tasks')
            .update({
              status: 'failed',
              result_data: {
                success: false,
                error: rpaTestResult.error,
                message: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞'
              }
            })
            .eq('id', savedTask.id)
        }
      }
    } catch (error) {
      console.log('‚ùå RPA —Ç–µ—Å—Ç error:', error.message)
      rpaTestResult = { error: error.message }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º Multilogin —Å—Ç–∞—Ç—É—Å
    let multiloginStatus = null;
    try {
      const multiloginResponse = await fetch(`${rpaEndpoint}/multilogin/status`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      })
      
      if (multiloginResponse.ok) {
        multiloginStatus = await multiloginResponse.json()
        console.log('‚úÖ Multilogin —Å—Ç–∞—Ç—É—Å:', multiloginStatus)
      } else {
        console.log('‚ùå Multilogin —Å—Ç–∞—Ç—É—Å failed:', multiloginResponse.status)
        multiloginStatus = { error: `HTTP ${multiloginResponse.status}` }
      }
    } catch (error) {
      console.log('‚ùå Multilogin —Å—Ç–∞—Ç—É—Å error:', error.message)
      multiloginStatus = { error: error.message }
    }

    const result = {
      success: true,
      timestamp: new Date().toISOString(),
      test_completed_at: Date.now(),
      rpa_endpoint: rpaEndpoint,
      health_check: healthStatus,
      rpa_test: rpaTestResult,
      multilogin_status: multiloginStatus,
      token_info: {
        has_database_token: !!multiloginToken,
        token_email: tokenData?.email || null,
        token_expires: tokenData?.expires_at || null
      }
    }

    console.log(`‚úÖ === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===`)
    console.log(`üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toISOString()}`)
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:`, {
      health_ok: !healthStatus?.error,
      rpa_test_ok: rpaTestResult?.success,
      multilogin_ok: !multiloginStatus?.error,
      screenshot_received: !!rpaTestResult?.screenshot,
      token_sent: !!multiloginToken
    })

    return new Response(
      JSON.stringify(result, null, 2),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    )

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RPA:', error)
    
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      }), 
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        }, 
        status: 500 
      }
    )
  }
})