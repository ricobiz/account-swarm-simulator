
#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Cloud RPA-–±–æ—Ç –¥–ª—è Railway
"""

import os
import time
import json
import logging
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
import undetected_chromedriver as uc
from fake_useragent import UserAgent

class AdvancedCloudRPABot:
    def __init__(self):
        self.driver = None
        self.wait = None
        self.logger = logging.getLogger(__name__)
        
    def create_chrome_options(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π Chrome –¥–ª—è Railway"""
        options = Options()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è Railway
        options.add_argument('--headless=new')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-gpu')
        options.add_argument('--disable-web-security')
        options.add_argument('--disable-features=VizDisplayCompositor')
        options.add_argument('--disable-extensions')
        options.add_argument('--disable-plugins')
        options.add_argument('--disable-images')
        options.add_argument('--window-size=1920,1080')
        options.add_argument('--single-process')
        options.add_argument('--no-zygote')
        
        # –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –æ–ø—Ü–∏–∏
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_experimental_option("useAutomationExtension", False)
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        
        # User agent
        try:
            ua = UserAgent()
            options.add_argument(f'--user-agent={ua.random}')
        except:
            # Fallback user agent –µ—Å–ª–∏ UserAgent –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        options.add_argument('--ignore-certificate-errors')
        options.add_argument('--ignore-ssl-errors')
        options.add_argument('--ignore-certificate-errors-spki-list')
        options.add_argument('--memory-pressure-off')
        
        return options
        
    def setup_browser(self, proxy=None):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ RPA –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            options = self.create_chrome_options()
            
            # –ü—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if proxy:
                proxy_str = f"{proxy['ip']}:{proxy['port']}"
                options.add_argument(f'--proxy-server=http://{proxy_str}')
                self.logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_str}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
            try:
                self.logger.info("–ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π Chrome WebDriver...")
                self.driver = webdriver.Chrome(options=options)
                self.logger.info("‚úÖ –û–±—ã—á–Ω—ã–π Chrome WebDriver —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û–±—ã—á–Ω—ã–π Chrome –Ω–µ —É–¥–∞–ª—Å—è: {e}")
                self.logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ undetected-chromedriver...")
                
                # Fallback –Ω–∞ undetected chromedriver
                uc_options = uc.ChromeOptions()
                uc_options.add_argument('--headless=new')
                uc_options.add_argument('--no-sandbox') 
                uc_options.add_argument('--disable-dev-shm-usage')
                uc_options.add_argument('--disable-gpu')
                uc_options.add_argument('--single-process')
                uc_options.add_argument('--window-size=1920,1080')
                
                self.driver = uc.Chrome(options=uc_options, version_main=None)
                self.logger.info("‚úÖ Undetected Chrome —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebDriverWait
            self.wait = WebDriverWait(self.driver, 15)
            
            # –¢–∞–π–º–∞—É—Ç—ã
            self.driver.set_page_load_timeout(45)
            self.driver.implicitly_wait(10)
            
            # –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç —Å–∫—Ä–∏–ø—Ç—ã
            try:
                self.driver.execute_script("""
                    Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                    Object.defineProperty(navigator, 'plugins', {
                        get: () => [1, 2, 3, 4, 5].map(() => ({ name: 'Plugin' }))
                    });
                    Object.defineProperty(navigator, 'languages', {
                        get: () => ['en-US', 'en', 'ru']
                    });
                """)
                self.logger.info("ü•∑ –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç —Å–∫—Ä–∏–ø—Ç—ã –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å: {e}")
            
            self.logger.info("üéâ –ë—Ä–∞—É–∑–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            self.logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            return False
    
    def navigate_to_url(self, url):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        try:
            self.logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
            self.driver.get(url)
            
            # –ñ–¥–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(3)
            
            current_url = self.driver.current_url
            self.logger.info(f"üìç –¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            page_state = self.driver.execute_script("return document.readyState")
            self.logger.info(f"üìÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_state}")
            
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ {url}: {e}")
            return False
    
    def find_element_safe(self, selector):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        try:
            self.logger.info(f"üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞: {selector}")
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞
            strategies = [
                (By.CSS_SELECTOR, selector),
                (By.XPATH, f"//*[@name='{selector.replace('input[name=\"', '').replace('\"]', '')}']"),
                (By.XPATH, f"//*[contains(@class, '{selector.replace('.', '')}')]"),
                (By.ID, selector.replace('#', '')),
                (By.NAME, selector.replace('input[name="', '').replace('"]', '')),
                (By.TAG_NAME, selector.replace('input[type="', '').replace('"]', '') if 'input[type=' in selector else selector)
            ]
            
            for by, value in strategies:
                try:
                    # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ 10 —Å–µ–∫—É–Ω–¥
                    element = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((by, value))
                    )
                    self.logger.info(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ {by.name}: {value}")
                    return element
                except TimeoutException:
                    continue
                except Exception as search_error:
                    self.logger.debug(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {by.name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {search_error}")
                    continue
                    
            self.logger.warning(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π: {selector}")
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {selector}: {e}")
            return None
    
    def execute_action(self, action):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            action_type = action.get('type')
            self.logger.info(f"üé¨ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
            
            if action_type == 'navigate':
                url = action.get('url')
                return self.navigate_to_url(url)
                
            elif action_type == 'wait':
                duration = action.get('duration', 1000)
                self.logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {duration}ms")
                time.sleep(duration / 1000)
                return True
                
            elif action_type == 'check_element':
                selector = action.get('element', {}).get('selector')
                element = self.find_element_safe(selector)
                found = element is not None
                self.logger.info(f"üîç –≠–ª–µ–º–µ–Ω—Ç {'–Ω–∞–π–¥–µ–Ω' if found else '–ù–ï –Ω–∞–π–¥–µ–Ω'}: {selector}")
                return found
                
            elif action_type == 'click':
                selector = action.get('element', {}).get('selector')
                element = self.find_element_safe(selector)
                if element:
                    try:
                        # –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
                        element.click()
                        self.logger.info(f"üëÜ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: {selector}")
                    except:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫
                        self.driver.execute_script("arguments[0].click();", element)
                        self.logger.info(f"üëÜ JS –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: {selector}")
                    time.sleep(2)
                    return True
                return False
                
            elif action_type == 'type':
                selector = action.get('element', {}).get('selector')
                text = action.get('element', {}).get('text')
                element = self.find_element_safe(selector)
                if element:
                    try:
                        element.clear()
                        element.send_keys(text)
                        self.logger.info(f"‚å®Ô∏è –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω –≤ {selector}: {text[:20]}...")
                        time.sleep(1)
                        return True
                    except Exception as type_error:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: {type_error}")
                return False
                
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {e}")
            return False
    
    def execute_task(self, task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        task_id = task.get('taskId', 'unknown')
        self.logger.info(f"üöÄ === –í–´–ü–û–õ–ù–ï–ù–ò–ï RPA –ó–ê–î–ê–ß–ò {task_id} ===")
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            if not self.setup_browser(task.get('proxy')):
                return {
                    'taskId': task_id,
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä',
                    'environment': 'railway-fixed'
                }
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            actions = task.get('actions', [])
            completed_actions = 0
            total_actions = len(actions)
            
            self.logger.info(f"üìã –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: {total_actions}")
            
            for i, action in enumerate(actions):
                action_type = action.get('type', 'unknown')
                self.logger.info(f"üé¨ –î–µ–π—Å—Ç–≤–∏–µ {i+1}/{total_actions}: {action_type}")
                
                if self.execute_action(action):
                    completed_actions += 1
                    self.logger.info(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    self.logger.warning(f"‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ {i+1} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                delay = action.get('delay', 1000)
                if delay > 0:
                    time.sleep(delay / 1000)
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            success = completed_actions > 0
            success_rate = (completed_actions / total_actions * 100) if total_actions > 0 else 0
            message = f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {completed_actions}/{total_actions} –¥–µ–π—Å—Ç–≤–∏–π ({success_rate:.1f}%)"
            
            self.logger.info(f"üèÅ === –ó–ê–î–ê–ß–ê {task_id} –ó–ê–í–ï–†–®–ï–ù–ê ===")
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {message}")
            
            return {
                'taskId': task_id,
                'success': success,
                'message': message,
                'completedActions': completed_actions,
                'totalActions': total_actions,
                'successRate': success_rate,
                'environment': 'railway-universal-cloud',
                'platform': task.get('metadata', {}).get('platform', 'unknown'),
                'features': ['universal-platforms', 'antidetect', 'human-behavior']
            }
            
        except Exception as e:
            self.logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –ó–ê–î–ê–ß–ï {task_id}: {e}")
            self.logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            return {
                'taskId': task_id,
                'success': False,
                'error': str(e),
                'environment': 'railway-universal-cloud'
            }
        finally:
            self.cleanup()
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.driver:
                self.driver.quit()
                self.logger.info("üßπ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç –∏ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def test_vision_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Vision API"""
        return bool(os.getenv('OPENROUTER_API_KEY'))
    
    def get_cache_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"""
        return {
            'enabled': True,
            'entries': 0,
            'hits': 0,
            'misses': 0
        }
