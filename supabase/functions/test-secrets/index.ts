import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã
    const secrets = {
      SUPABASE_URL: Deno.env.get('SUPABASE_URL'),
      SUPABASE_SERVICE_ROLE_KEY: Deno.env.get('SUPABASE_SERVICE_ROLE_KEY'),
      MULTILOGIN_EMAIL: Deno.env.get('MULTILOGIN_EMAIL'),
      MULTILOGIN_PASSWORD: Deno.env.get('MULTILOGIN_PASSWORD'),
      RPA_BOT_ENDPOINT: Deno.env.get('RPA_BOT_ENDPOINT'),
      MULTILOGIN_TOKEN: Deno.env.get('MULTILOGIN_TOKEN')
    }
    
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤:')
    Object.entries(secrets).forEach(([key, value]) => {
      console.log(`${key}: ${value ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`)
    })

    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç HTTP –∑–∞–ø—Ä–æ—Å–∞
    let httpTestResult = null
    try {
      console.log('üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ httpbin.org...')
      const testResponse = await fetch('https://httpbin.org/get', {
        method: 'GET',
        headers: {
          'User-Agent': 'Deno-Test'
        }
      })
      httpTestResult = {
        status: testResponse.status,
        ok: testResponse.ok,
        success: true
      }
      console.log('‚úÖ HTTP —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      httpTestResult = {
        success: false,
        error: error.message
      }
      console.log('‚ùå HTTP —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', error.message)
    }

    return new Response(JSON.stringify({
      success: true,
      message: '–¢–µ—Å—Ç Edge Function –≤—ã–ø–æ–ª–Ω–µ–Ω',
      timestamp: new Date().toISOString(),
      secrets_check: Object.fromEntries(
        Object.entries(secrets).map(([key, value]) => [key, !!value])
      ),
      secrets_values: {
        MULTILOGIN_EMAIL: secrets.MULTILOGIN_EMAIL || '–ù–ï –ù–ê–ô–î–ï–ù',
        MULTILOGIN_PASSWORD: secrets.MULTILOGIN_PASSWORD ? '–ï–°–¢–¨ (—Å–∫—Ä—ã—Ç)' : '–ù–ï –ù–ê–ô–î–ï–ù',
        RPA_BOT_ENDPOINT: secrets.RPA_BOT_ENDPOINT || '–ù–ï –ù–ê–ô–î–ï–ù'
      },
      http_test: httpTestResult,
      deno_version: Deno.version,
      environment: 'supabase-edge-function'
    }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ test-secrets:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: '–û—à–∏–±–∫–∞ –≤ test-secrets —Ñ—É–Ω–∫—Ü–∏–∏',
      message: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})