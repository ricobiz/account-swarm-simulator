
#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π RPA –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Multilogin
"""

import os
import sys
import logging
import traceback
from flask import Flask, request, jsonify
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import TimeoutException, WebDriverException
import time
import json
import requests
import random
from multilogin_integration import MultiloginManager
from config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

class EnhancedRPABot:
    def __init__(self):
        self.driver = None
        self.multilogin = None
        self.current_profile_id = None
        self.init_multilogin()
        
    def init_multilogin(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Multilogin"""
        try:
            multilogin_token = os.getenv('MULTILOGIN_TOKEN')
            if multilogin_token:
                self.multilogin = MultiloginManager(multilogin_token)
                if self.multilogin.check_connection():
                    logger.info("‚úÖ Multilogin —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    self.multilogin.decode_token_info()
                else:
                    logger.warning("‚ö†Ô∏è Multilogin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–±—ã—á–Ω—ã–π Chrome")
            else:
                logger.info("‚ÑπÔ∏è –¢–æ–∫–µ–Ω Multilogin –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π Chrome")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Multilogin: {e}")

    def setup_chrome_driver(self, account_data=None, multilogin_token=None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω Multilogin –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            if multilogin_token and multilogin_token != os.getenv('MULTILOGIN_TOKEN'):
                logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω Multilogin –∏–∑ –∑–∞–¥–∞—á–∏")
                self.multilogin = MultiloginManager(multilogin_token)
                if self.multilogin.check_connection():
                    logger.info("‚úÖ Multilogin –ø–æ–¥–∫–ª—é—á–µ–Ω —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º")
                    self.multilogin.decode_token_info()
                else:
                    logger.warning("‚ö†Ô∏è –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω Multilogin –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                    self.multilogin = None
            
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Multilogin –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.multilogin and account_data:
                profile_id = self.multilogin.get_profile_for_account(account_data)
                if profile_id:
                    profile_info = self.multilogin.start_profile(profile_id)
                    if profile_info:
                        self.current_profile_id = profile_id
                        driver = self.multilogin.get_selenium_driver(profile_id)
                        if driver:
                            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Multilogin –±—Ä–∞—É–∑–µ—Ä")
                            return driver
            
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π Chrome —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π Chrome —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º")
            return self.setup_regular_chrome()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return self.setup_regular_chrome()

    def setup_regular_chrome(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ Chrome —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º"""
        options = Options()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-gpu')
        options.add_argument('--disable-web-security')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        # –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        options.add_argument('--disable-extensions-except')
        options.add_argument('--disable-plugins-discovery')
        options.add_argument('--disable-bundled-ppapi-flash')
        options.add_argument('--disable-ipc-flooding-protection')
        options.add_argument('--enable-features=NetworkService,NetworkServiceLogging')
        options.add_argument('--disable-features=VizDisplayCompositor')
        
        # User Agent –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        options.add_argument('--window-size=1920,1080')
        
        # –î–ª—è Railway –∏ –æ–±–ª–∞—á–Ω—ã—Ö —Å—Ä–µ–¥
        if os.getenv('RAILWAY_ENVIRONMENT') or os.getenv('HEROKU_APP_NAME'):
            options.add_argument('--headless=new')
            options.add_argument('--virtual-time-budget=60000')
            options.add_argument('--disable-background-timer-throttling')
            options.add_argument('--disable-renderer-backgrounding')
            options.add_argument('--disable-backgrounding-occluded-windows')
        
        # –ü—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        proxy = get_random_proxy()
        if proxy:
            options.add_argument(f'--proxy-server={proxy}')
            
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º chromedriver
            driver = webdriver.Chrome(options=options)
        except Exception as e:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º Chrome
                chrome_bin = os.getenv('CHROME_BIN', '/usr/bin/google-chrome')
                options.binary_location = chrome_bin
                driver = webdriver.Chrome(options=options)
            except Exception as e2:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Chrome: {e2}")
                raise
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ JavaScript
        driver.execute_cdp_cmd('Page.addScriptToEvaluateOnNewDocument', {
            'source': '''
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined,
                });
                
                window.chrome = {
                    runtime: {},
                };
                
                Object.defineProperty(navigator, 'languages', {
                    get: () => ['en-US', 'en'],
                });
                
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5],
                });
            '''
        })
        
        return driver

    def human_like_action(self, action_type='click', duration=None):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        if duration is None:
            duration = random.uniform(MIN_ACTION_DELAY/1000, MAX_ACTION_DELAY/1000)
        time.sleep(duration)

    def human_like_type(self, element, text):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
        for char in text:
            element.send_keys(char)
            time.sleep(random.uniform(TYPING_SPEED_MIN, TYPING_SPEED_MAX))

    def find_element_by_selector(self, selector, timeout=10):
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É"""
        try:
            return WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, selector))
            )
        except TimeoutException:
            logger.warning(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {selector}")
            return None

    def find_element_by_selectors(self, selectors, timeout=10):
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Å–ø–∏—Å–∫—É —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤"""
        for selector in selectors:
            element = self.find_element_by_selector(selector, timeout)
            if element:
                return element
        return None

    def click_element_by_selectors(self, selectors, action_name="—ç–ª–µ–º–µ–Ω—Ç"):
        """–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤"""
        element = self.find_element_by_selectors(selectors)
        if element:
            return self.human_click(element)
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è: {action_name}")
            return False

    def human_click(self, element):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∫–ª–∏–∫"""
        try:
            # –°–∫—Ä–æ–ª–ª –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth'});", element)
            time.sleep(random.uniform(0.5, 1.5))
            
            # –ù–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏
            ActionChains(self.driver).move_to_element(element).perform()
            time.sleep(random.uniform(0.2, 0.8))
            
            # –ö–ª–∏–∫
            ActionChains(self.driver).click(element).perform()
            self.human_like_action('click')
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: {e}")
            return False

    def random_interaction(self):
        """–°–ª—É—á–∞–π–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        try:
            # –°–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            actions = [
                lambda: time.sleep(random.uniform(0.5, 2)),  # –ü–∞—É–∑–∞
                lambda: self.driver.execute_script(f"window.scrollBy(0, {random.randint(-50, 50)});"),  # –ú–∏–Ω–∏-—Å–∫—Ä–æ–ª–ª
                lambda: ActionChains(self.driver).move_by_offset(random.randint(-100, 100), random.randint(-100, 100)).perform()  # –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
            ]
            random.choice(actions)()
        except:
            pass

    def random_human_behavior(self):
        """–°–ª—É—á–∞–π–Ω–æ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"""
        try:
            behaviors = [
                # –ü–∞—É–∑–∞ –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ
                lambda: time.sleep(random.uniform(2, 5)),
                
                # –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
                lambda: self.driver.execute_script(f"window.scrollBy(0, {random.randint(-200, 200)});"),
                
                # –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
                lambda: ActionChains(self.driver).move_by_offset(
                    random.randint(-300, 300), 
                    random.randint(-300, 300)
                ).perform(),
                
                # –ù–∞–∂–∞—Ç–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–ª–∞–≤–∏—à–∏
                lambda: ActionChains(self.driver).send_keys(" ").perform(),
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                lambda: self.driver.set_window_size(
                    random.randint(1200, 1920),
                    random.randint(800, 1080)
                )
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º 1-3 —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è
            for _ in range(random.randint(1, 3)):
                random.choice(behaviors)()
                time.sleep(random.uniform(0.5, 2))
                
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {e}")
            return True

    def execute_telegram_like(self, post_url, emoji='üëç'):
        """–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∞–π–∫–∞ –≤ Telegram"""
        try:
            logger.info(f"üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Telegram –ø–æ—Å—Ç—É: {post_url}")
            self.driver.get(post_url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            self.human_like_action('wait', 3)
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–∞–∫—Ü–∏–∏
            possible_selectors = [
                f"//button[contains(@class, 'ReactionButton') and .//*[contains(text(), '{emoji}')]]",
                f"//button[.//*[contains(text(), '{emoji}')]]",
                f"//div[contains(@class, 'reaction') and contains(text(), '{emoji}')]",
                f"//span[contains(text(), '{emoji}')]/..",
                f"//*[contains(text(), '{emoji}')]"
            ]
            
            reaction_button = None
            for selector in possible_selectors:
                try:
                    reaction_button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏: {selector}")
                    break
                except TimeoutException:
                    continue
            
            if not reaction_button:
                logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥")
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                buttons = self.driver.find_elements(By.TAG_NAME, "button")
                for button in buttons:
                    try:
                        if emoji in button.get_attribute('innerHTML'):
                            reaction_button = button
                            break
                    except:
                        continue
            
            if reaction_button:
                # –°–∫—Ä–æ–ª–ª–∏–º –∫ –∫–Ω–æ–ø–∫–µ
                self.driver.execute_script("arguments[0].scrollIntoView(true);", reaction_button)
                self.human_like_action('scroll', 1)
                
                # –ö–ª–∏–∫–∞–µ–º
                ActionChains(self.driver).move_to_element(reaction_button).click().perform()
                self.human_like_action('click', 2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try:
                    WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, ".ReactionButton--chosen, .reaction-chosen, .active"))
                    )
                    logger.info("‚úÖ –õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!")
                    return True
                except TimeoutException:
                    logger.info("‚ÑπÔ∏è –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
                    return True
                    
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Ä–µ–∞–∫—Ü–∏–∏")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∞–π–∫–∞: {e}")
            return False

    def execute_action(self, action):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            action_type = action.get('type')
            logger.info(f"üé¨ –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: {action_type}")
            
            if action_type == 'navigate':
                url = action.get('url')
                logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
                self.driver.get(url)
                self.human_like_action('navigate', 2)
                
            elif action_type == 'wait':
                duration = action.get('duration', 2000) / 1000
                logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {duration} —Å–µ–∫")
                time.sleep(duration)
                
            elif action_type == 'telegram_like':
                emoji = action.get('emoji', 'üëç')
                post_url = action.get('url') or self.driver.current_url
                return self.execute_telegram_like(post_url, emoji)
                
            elif action_type == 'click':
                selector = action.get('selector')
                element = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                )
                ActionChains(self.driver).move_to_element(element).click().perform()
                self.human_like_action('click')
                
            elif action_type == 'type':
                selector = action.get('selector')
                text = action.get('text', '')
                element = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                )
                if action.get('clearFirst', True):
                    element.clear()
                self.human_like_type(element, text)
                
            elif action_type == 'scroll':
                x = action.get('x', 0)
                y = action.get('y', 500)
                self.driver.execute_script(f"window.scrollBy({x}, {y});")
                self.human_like_action('scroll')
                
            elif action_type == 'check_element':
                selector = action.get('selector')
                try:
                    WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                    logger.info(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {selector}")
                    return True
                except TimeoutException:
                    logger.warning(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {selector}")
                    return False
                    
            elif action_type == 'screenshot':
                """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
                logger.info("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                try:
                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                    screenshot_path = f"/tmp/screenshot_{int(time.time())}.png"
                    self.driver.save_screenshot(screenshot_path)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                    import base64
                    with open(screenshot_path, "rb") as img_file:
                        screenshot_base64 = base64.b64encode(img_file.read()).decode('utf-8')
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞—á–∏
                    if not hasattr(self, 'task_results'):
                        self.task_results = {}
                    
                    self.task_results['screenshot'] = f"data:image/png;base64,{screenshot_base64}"
                    self.task_results['screenshot_path'] = screenshot_path
                    
                    logger.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {len(screenshot_base64)} –±–∞–π—Ç")
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    import os
                    try:
                        os.remove(screenshot_path)
                    except:
                        pass
                        
                    return True
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                    return False
                    
            # =================== –°–û–¶–ò–ê–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===================
            elif action_type == 'like' or action_type == 'heart':
                """–õ–∞–π–∫/—Å–µ—Ä–¥–µ—á–∫–æ –Ω–∞ –ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"""
                logger.info("‚ù§Ô∏è –°—Ç–∞–≤–∏–º –ª–∞–π–∫")
                selectors = action.get('selectors', [
                    '[data-testid="like"]', '[aria-label*="like" i]', '[aria-label*="–ª–∞–π–∫" i]',
                    '.like-button', '.heart-button', '[data-action="like"]',
                    'button[title*="like" i]', '.btn-like', '[role="button"][aria-label*="like" i]'
                ])
                return self.click_element_by_selectors(selectors, "–ª–∞–π–∫")
                
            elif action_type == 'follow' or action_type == 'subscribe':
                """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç/–∫–∞–Ω–∞–ª"""
                logger.info("üë• –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è")
                selectors = action.get('selectors', [
                    '[data-testid="follow"]', '[aria-label*="follow" i]', '[aria-label*="–ø–æ–¥–ø–∏—Å" i]',
                    '.follow-button', '.subscribe-button', '[data-action="follow"]',
                    'button[title*="follow" i]', 'button[title*="subscribe" i]',
                    '.btn-follow', '.btn-subscribe', '#subscribe-button'
                ])
                return self.click_element_by_selectors(selectors, "–ø–æ–¥–ø–∏—Å–∫–∞")
                
            elif action_type == 'comment':
                """–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
                logger.info("üí¨ –ü–∏—à–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                comment_text = action.get('text', 'Great post! üëç')
                comment_selectors = action.get('comment_selectors', [
                    '[data-testid="comment"]', '[placeholder*="comment" i]', '[placeholder*="–∫–æ–º–º–µ–Ω—Ç" i]',
                    '.comment-input', 'textarea[placeholder*="write" i]', '[data-action="comment"]'
                ])
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                comment_field = self.find_element_by_selectors(comment_selectors)
                if comment_field:
                    self.human_like_type(comment_field, comment_text)
                    
                    # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                    submit_selectors = [
                        '[data-testid="reply"]', 'button[type="submit"]', '.submit-comment',
                        'button[aria-label*="post" i]', 'button[title*="post" i]', '.btn-submit'
                    ]
                    return self.click_element_by_selectors(submit_selectors, "–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                return False
                
            elif action_type == 'share':
                """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ—Å—Ç–æ–º"""
                logger.info("üì§ –î–µ–ª–∏–º—Å—è –ø–æ—Å—Ç–æ–º")
                selectors = action.get('selectors', [
                    '[data-testid="share"]', '[aria-label*="share" i]', '[aria-label*="–ø–æ–¥–µ–ª–∏—Ç—å—Å—è" i]',
                    '.share-button', '[data-action="share"]', 'button[title*="share" i]'
                ])
                return self.click_element_by_selectors(selectors, "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è")
                
            elif action_type == 'view_story':
                """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏"""
                logger.info("üëÅÔ∏è –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏–∏")
                selectors = action.get('selectors', [
                    '[data-testid="story"]', '.story-ring', '.story-avatar', 
                    '[aria-label*="story" i]', '.stories-container img'
                ])
                element = self.find_element_by_selectors(selectors)
                if element:
                    self.human_click(element)
                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
                    time.sleep(random.uniform(3, 8))
                    return True
                return False
                
            elif action_type == 'watch_video':
                """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ"""
                logger.info("üé• –°–º–æ—Ç—Ä–∏–º –≤–∏–¥–µ–æ")
                duration = action.get('duration', random.uniform(10, 30))
                
                # –ù–∞–π—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ
                video_selectors = ['video', '.video-player', '[data-testid="video"]']
                video = self.find_element_by_selectors(video_selectors)
                if video:
                    # –ö–ª–∏–∫–∞–µ–º –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                    self.human_click(video)
                    
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
                    watch_time = 0
                    while watch_time < duration:
                        pause_time = random.uniform(2, 5)
                        time.sleep(pause_time)
                        watch_time += pause_time
                        
                        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                        if random.random() < 0.1:  # 10% —à–∞–Ω—Å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                            self.driver.execute_script(f"window.scrollBy(0, {random.randint(-100, 100)});")
                    
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ {duration:.1f} —Å–µ–∫")
                    return True
                return False
                
            # =================== –ù–ê–í–ò–ì–ê–¶–ò–Ø –ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï ===================
            elif action_type == 'hover':
                """–ù–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç"""
                logger.info("üñ±Ô∏è –ù–∞–≤–æ–¥–∏–º –º—ã—à—å")
                selector = action.get('selector')
                element = self.find_element_by_selector(selector)
                if element:
                    ActionChains(self.driver).move_to_element(element).perform()
                    time.sleep(random.uniform(0.5, 2))
                    return True
                return False
                
            elif action_type == 'double_click':
                """–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫"""
                logger.info("üñ±Ô∏èüñ±Ô∏è –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫")
                selector = action.get('selector')
                element = self.find_element_by_selector(selector)
                if element:
                    ActionChains(self.driver).double_click(element).perform()
                    self.human_like_action('double_click')
                    return True
                return False
                
            elif action_type == 'right_click':
                """–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫"""
                logger.info("üñ±Ô∏è‚û°Ô∏è –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫")
                selector = action.get('selector')
                element = self.find_element_by_selector(selector)
                if element:
                    ActionChains(self.driver).context_click(element).perform()
                    self.human_like_action('right_click')
                    return True
                return False
                
            elif action_type == 'drag_and_drop':
                """–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ"""
                logger.info("ü§è –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç")
                source_selector = action.get('source_selector')
                target_selector = action.get('target_selector')
                
                source = self.find_element_by_selector(source_selector)
                target = self.find_element_by_selector(target_selector)
                
                if source and target:
                    ActionChains(self.driver).drag_and_drop(source, target).perform()
                    self.human_like_action('drag_drop')
                    return True
                return False
                
            elif action_type == 'scroll_to_element':
                """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É"""
                logger.info("üîÑ –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É")
                selector = action.get('selector')
                element = self.find_element_by_selector(selector)
                if element:
                    self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth'});", element)
                    time.sleep(random.uniform(1, 3))
                    return True
                return False
                
            elif action_type == 'infinite_scroll':
                """–ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ (–ª–µ–Ω—Ç–∞)"""
                logger.info("‚ôæÔ∏è –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ª–µ–Ω—Ç—ã")
                scroll_count = action.get('count', random.randint(3, 10))
                
                for i in range(scroll_count):
                    # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
                    scroll_height = random.randint(300, 800)
                    self.driver.execute_script(f"window.scrollBy(0, {scroll_height});")
                    
                    # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞
                    pause_time = random.uniform(1, 4)
                    time.sleep(pause_time)
                    
                    # –°–ª—É—á–∞–π–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                    if random.random() < 0.3:  # 30% —à–∞–Ω—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                        self.random_interaction()
                
                logger.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {scroll_count} –ø—Ä–æ–∫—Ä—É—Ç–æ–∫")
                return True
                
            # =================== –†–ê–ë–û–¢–ê –° –§–û–†–ú–ê–ú–ò ===================
            elif action_type == 'select_option':
                """–í—ã–±–æ—Ä –æ–ø—Ü–∏–∏ –≤ dropdown"""
                logger.info("üìã –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏—é")
                selector = action.get('selector')
                option_value = action.get('value')
                
                select_element = Select(self.find_element_by_selector(selector))
                if option_value:
                    select_element.select_by_value(option_value)
                    self.human_like_action('select')
                    return True
                return False
                
            elif action_type == 'upload_file':
                """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
                logger.info("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª")
                selector = action.get('selector', 'input[type="file"]')
                file_path = action.get('file_path')
                
                if file_path:
                    element = self.find_element_by_selector(selector)
                    if element:
                        element.send_keys(file_path)
                        time.sleep(random.uniform(2, 5))
                        return True
                return False
                
            elif action_type == 'clear_and_type':
                """–û—á–∏—Å—Ç–∫–∞ –∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
                logger.info("üßπ –û—á–∏—â–∞–µ–º –∏ –≤–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç")
                selector = action.get('selector')
                text = action.get('text', '')
                
                element = self.find_element_by_selector(selector)
                if element:
                    element.clear()
                    time.sleep(random.uniform(0.3, 1))
                    self.human_like_type(element, text)
                    return True
                return False
                
            # =================== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===================
            elif action_type == 'switch_tab':
                """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏"""
                logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∫–ª–∞–¥–∫—É")
                tab_index = action.get('tab_index', -1)  # -1 = –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–∫–ª–∞–¥–∫–∞
                
                tabs = self.driver.window_handles
                if abs(tab_index) <= len(tabs):
                    self.driver.switch_to.window(tabs[tab_index])
                    time.sleep(random.uniform(1, 2))
                    return True
                return False
                
            elif action_type == 'new_tab':
                """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏"""
                logger.info("üÜï –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É")
                url = action.get('url', 'about:blank')
                
                self.driver.execute_script(f"window.open('{url}', '_blank');")
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
                self.driver.switch_to.window(self.driver.window_handles[-1])
                time.sleep(random.uniform(2, 4))
                return True
                
            elif action_type == 'close_tab':
                """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏"""
                logger.info("‚ùå –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É")
                self.driver.close()
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∫–ª–∞–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
                if len(self.driver.window_handles) > 0:
                    self.driver.switch_to.window(self.driver.window_handles[-1])
                return True
                
            elif action_type == 'press_key':
                """–ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏"""
                logger.info("‚å®Ô∏è –ù–∞–∂–∏–º–∞–µ–º –∫–ª–∞–≤–∏—à—É")
                key = action.get('key', 'RETURN')
                
                from selenium.webdriver.common.keys import Keys
                key_mapping = {
                    'ENTER': Keys.RETURN,
                    'ESCAPE': Keys.ESCAPE,
                    'TAB': Keys.TAB,
                    'SPACE': Keys.SPACE,
                    'DELETE': Keys.DELETE,
                    'BACKSPACE': Keys.BACKSPACE,
                    'ARROW_UP': Keys.ARROW_UP,
                    'ARROW_DOWN': Keys.ARROW_DOWN,
                    'ARROW_LEFT': Keys.ARROW_LEFT,
                    'ARROW_RIGHT': Keys.ARROW_RIGHT
                }
                
                target = action.get('selector')
                if target:
                    element = self.find_element_by_selector(target)
                    if element:
                        element.send_keys(key_mapping.get(key, key))
                else:
                    ActionChains(self.driver).send_keys(key_mapping.get(key, key)).perform()
                
                self.human_like_action('key_press')
                return True
                
            elif action_type == 'execute_js':
                """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript"""
                logger.info("üîß –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript")
                script = action.get('script', '')
                if script:
                    result = self.driver.execute_script(script)
                    logger.info(f"JS —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    return True
                return False
                
            elif action_type == 'random_human_behavior':
                """–°–ª—É—á–∞–π–Ω–æ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"""
                logger.info("üé≠ –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ")
                return self.random_human_behavior()
                
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {e}")
            return False

    def execute_rpa_task(self, task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏"""
        task_id = task.get('taskId')
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ RPA –∑–∞–¥–∞—á–∏: {task_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.update_task_status(task_id, 'processing', '–ó–∞–ø—É—Å–∫ RPA –∑–∞–¥–∞—á–∏')
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
            account_data = {
                'username': task.get('accountId', 'test-account'),
                'platform': task.get('metadata', {}).get('platform', 'web')
            }
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Multilogin –∏–∑ –∑–∞–¥–∞—á–∏
            multilogin_token = None
            if task.get('metadata', {}).get('multilogin_token_info'):
                # –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                token_info = task.get('metadata', {}).get('multilogin_token_info', {})
                multilogin_token = token_info.get('token')
                
                if not multilogin_token:
                    # –ü—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∏–∑ environment –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π MULTILOGIN_TOKEN
                    multilogin_token = os.getenv('MULTILOGIN_TOKEN')
                    
                logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω Multilogin: {'–Ω–∞–π–¥–µ–Ω' if multilogin_token else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á–∏
            self.task_results = {}
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —Ç–æ–∫–µ–Ω–æ–º Multilogin
            self.driver = self.setup_chrome_driver(account_data, multilogin_token)
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            initial_url = task.get('url')
            if initial_url:
                logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {initial_url}")
                self.driver.get(initial_url)
                time.sleep(3)
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            actions = task.get('actions', [])
            success_count = 0
            
            for i, action in enumerate(actions):
                logger.info(f"üìù –î–µ–π—Å—Ç–≤–∏–µ {i+1}/{len(actions)}: {action.get('type')}")
                
                if self.execute_action(action):
                    success_count += 1
                    self.update_task_status(
                        task_id, 
                        'processing', 
                        f'–í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count}/{len(actions)} –¥–µ–π—Å—Ç–≤–∏–π'
                    )
                else:
                    logger.warning(f"‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º")
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞—á–∏
            result_data = {
                'success': True,
                'actions_completed': success_count,
                'total_actions': len(actions),
                'task_id': task_id,
                'multilogin_integrated': self.multilogin is not None and self.current_profile_id is not None,
                'screenshot': self.task_results.get('screenshot') if hasattr(self, 'task_results') else None,
                'platform': task.get('metadata', {}).get('platform', 'web'),
                'execution_time': 0,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                'browser_fingerprint': self._get_browser_fingerprint() if self.driver else {},
                'multilogin_profile': self.current_profile_id
            }
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            if success_count == len(actions):
                logger.info("‚úÖ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                self.update_task_status(
                    task_id, 
                    'completed', 
                    '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
                    result_data
                )
                return True
            else:
                logger.info(f"‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count}/{len(actions)} –¥–µ–π—Å—Ç–≤–∏–π")
                result_data['success'] = False
                result_data['warning'] = f'–í—ã–ø–æ–ª–Ω–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ ({success_count}/{len(actions)})'
                self.update_task_status(
                    task_id, 
                    'completed', 
                    f'–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ ({success_count}/{len(actions)})',
                    result_data
                )
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            self.update_task_status(
                task_id, 
                'failed', 
                f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}',
                {'success': False, 'error': str(e)}
            )
            return False
            
        finally:
            self.cleanup()

    def update_task_status(self, task_id, status, message, result_data=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ Supabase"""
        try:
            supabase_url = os.getenv('SUPABASE_URL')
            supabase_key = os.getenv('SUPABASE_SERVICE_KEY')
            
            if not supabase_url or not supabase_key:
                logger.warning("Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
                return
                
            headers = {
                'apikey': supabase_key,
                'Authorization': f'Bearer {supabase_key}',
                'Content-Type': 'application/json'
            }
            
            update_data = {
                'status': status,
                'updated_at': 'now()'
            }
            
            if result_data:
                update_data['result_data'] = result_data
            
            response = requests.patch(
                f"{supabase_url}/rest/v1/rpa_tasks?task_id=eq.{task_id}",
                headers=headers,
                json=update_data,
                timeout=10
            )
            
            if response.status_code == 204:
                logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {status} - {message}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ Supabase: {e}")

    def _get_browser_fingerprint(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            fingerprint = {}
            
            # –ü–æ–ª—É—á–∞–µ–º User Agent
            try:
                fingerprint['user_agent'] = self.driver.execute_script("return navigator.userAgent;")
            except:
                pass
                
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
            try:
                fingerprint['screen_resolution'] = self.driver.execute_script("return screen.width + 'x' + screen.height;")
            except:
                pass
                
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫
            try:
                fingerprint['language'] = self.driver.execute_script("return navigator.language;")
            except:
                pass
                
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
            try:
                fingerprint['timezone'] = self.driver.execute_script("return Intl.DateTimeFormat().resolvedOptions().timeZone;")
            except:
                pass
                
            return fingerprint
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è fingerprint: {e}")
            return {}

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.driver:
                self.driver.quit()
                self.driver = None
                
            if self.multilogin and self.current_profile_id:
                self.multilogin.stop_profile(self.current_profile_id)
                self.current_profile_id = None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RPA –±–æ—Ç–∞
rpa_bot = EnhancedRPABot()

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        status = {
            'status': 'ok',
            'timestamp': time.time(),
            'version': BOT_VERSION,
            'environment': ENVIRONMENT,
            'multilogin': rpa_bot.multilogin is not None,
            'chrome_available': True
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Chrome
        try:
            options = Options()
            options.add_argument('--headless=new')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            test_driver = webdriver.Chrome(options=options)
            test_driver.quit()
        except:
            status['chrome_available'] = False
            
        return jsonify(status)
    except Exception as e:
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500

@app.route('/execute', methods=['POST'])
def execute_rpa():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏"""
    try:
        task = request.json
        task_id = task.get('task_id') or task.get('taskId')  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        
        logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–∞ RPA –∑–∞–¥–∞—á–∞: {task_id}")
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {json.dumps(task, indent=2, ensure_ascii=False)}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
        if not task_id:
            return jsonify({
                'success': False,
                'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç task_id –∏–ª–∏ taskId'
            }), 400
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        normalized_task = {
            'taskId': task_id,
            'url': task.get('url'),
            'actions': task.get('actions', []),
            'metadata': {
                'platform': task.get('platform', 'web'),
                'account': task.get('account_data', {}),
                'multilogin_token_info': task.get('metadata', {}).get('multilogin_token_info', {})
            },
            'multilogin_profile': task.get('multilogin_profile'),
            'timeout': task.get('timeout', 60)
        }
            
        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
        success = rpa_bot.execute_rpa_task(normalized_task)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        response_data = {
            'success': success,
            'task_id': task_id,
            'message': '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' if success else '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏',
            'execution_time': 0,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            'completed_actions': len(task.get('actions', [])) if success else 0
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(rpa_bot, 'task_results') and rpa_bot.task_results:
            if 'screenshot' in rpa_bot.task_results:
                response_data['screenshot'] = rpa_bot.task_results['screenshot']
                response_data['screenshots'] = [rpa_bot.task_results['screenshot']]
            
            # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            rpa_bot.task_results = {}
        
        logger.info(f"üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: success={success}, screenshot={'–µ—Å—Ç—å' if 'screenshot' in response_data else '–Ω–µ—Ç'}")
        
        return jsonify(response_data)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API /execute: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({
            'success': False,
            'error': str(e),
            'task_id': task.get('task_id') or task.get('taskId') if 'task' in locals() else None
        }), 500

@app.route('/multilogin/status', methods=['GET'])
def multilogin_status():
    """–°—Ç–∞—Ç—É—Å Multilogin"""
    try:
        if not rpa_bot.multilogin:
            return jsonify({
                'connected': False,
                'error': 'Multilogin –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            })
            
        token_info = rpa_bot.multilogin.decode_token_info()
        profiles = rpa_bot.multilogin.get_profiles()
        
        return jsonify({
            'connected': True,
            'workspace_id': token_info.get('workspaceID'),
            'email': token_info.get('email'),
            'plan': token_info.get('planName'),
            'profiles_count': len(profiles),
            'active_profiles': len(rpa_bot.multilogin.active_profiles)
        })
        
    except Exception as e:
        return jsonify({
            'connected': False,
            'error': str(e)
        }), 500

if __name__ == '__main__':
    import traceback
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced RPA Bot —Å Multilogin")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Multilogin –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if rpa_bot.multilogin:
        logger.info("‚úÖ Multilogin –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
    else:
        logger.info("‚ÑπÔ∏è –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–±—ã—á–Ω–æ–≥–æ Chrome")
    
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=False)
