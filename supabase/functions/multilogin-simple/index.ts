import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ Multilogin Token Manager')
    
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
    const multiloginEmail = Deno.env.get('MULTILOGIN_EMAIL')
    const multiloginPassword = Deno.env.get('MULTILOGIN_PASSWORD')

    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤:')
    console.log('üìß MULTILOGIN_EMAIL:', multiloginEmail ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    console.log('üîí MULTILOGIN_PASSWORD:', multiloginPassword ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

    if (!multiloginEmail || !multiloginPassword) {
      console.log('‚ùå –°–µ–∫—Ä–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
      return new Response(JSON.stringify({
        success: false,
        error: '–°–µ–∫—Ä–µ—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
        email_exists: !!multiloginEmail,
        password_exists: !!multiloginPassword
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    console.log('‚úÖ –°–µ–∫—Ä–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Multilogin API...')

    try {
      const response = await fetch('https://api.multilogin.com/user/signin', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          email: multiloginEmail,
          password: multiloginPassword
        })
      })
      
      console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç Multilogin API:', response.status)
      
      const responseText = await response.text()
      console.log('üìù –û—Ç–≤–µ—Ç –æ—Ç API (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):', responseText.substring(0, 200))

      if (!response.ok) {
        console.log('‚ùå Multilogin API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É')
        return new Response(JSON.stringify({
          success: false,
          error: '–û—à–∏–±–∫–∞ –æ—Ç Multilogin API',
          status: response.status,
          message: responseText,
          email: multiloginEmail
        }), {
          status: 200, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª –¥–µ—Ç–∞–ª–∏
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      }

      let data
      try {
        data = JSON.parse(responseText)
      } catch (e) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç')
        return new Response(JSON.stringify({
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API',
          raw_response: responseText
        }), {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      }

      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Multilogin API')
      
      const token = data.token || data.access_token || data.authToken
      
      if (!token) {
        console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ')
        return new Response(JSON.stringify({
          success: false,
          error: '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ',
          available_fields: Object.keys(data),
          response_data: data
        }), {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      }

      console.log('üéâ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:', token.substring(0, 10) + '...')

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
      const expiresAt = new Date(Date.now() + (25 * 60 * 1000)) // 25 –º–∏–Ω—É—Ç
      
      try {
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã
        await supabase
          .from('multilogin_tokens')
          .update({ is_active: false })
          .eq('email', multiloginEmail)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        const { error: insertError } = await supabase
          .from('multilogin_tokens')
          .insert({
            email: multiloginEmail,
            token: token,
            expires_at: expiresAt.toISOString(),
            is_active: true
          })

        if (insertError) {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É:', insertError)
          return new Response(JSON.stringify({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞',
            token_received: true,
            db_error: insertError.message
          }), {
            status: 200,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          })
        }

        console.log('üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É')

        return new Response(JSON.stringify({
          success: true,
          message: '–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
          email: multiloginEmail,
          token: token.substring(0, 10) + '...',
          expires_at: expiresAt.toISOString()
        }), {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })

      } catch (dbError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π:', dbError)
        return new Response(JSON.stringify({
          success: false,
          error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
          message: dbError.message
        }), {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      }

    } catch (fetchError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞:', fetchError)
      return new Response(JSON.stringify({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Multilogin API',
        message: fetchError.message
      }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message,
      stack: error.stack
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})