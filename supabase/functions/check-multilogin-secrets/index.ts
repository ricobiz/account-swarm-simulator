import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å–µ–∫—Ä–µ—Ç—ã —Ä–µ–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    const multiloginEmail = Deno.env.get('MULTILOGIN_EMAIL')
    const multiloginPassword = Deno.env.get('MULTILOGIN_PASSWORD')
    const multiloginToken = Deno.env.get('MULTILOGIN_TOKEN')
    
    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö Multilogin —Å–µ–∫—Ä–µ—Ç–æ–≤...')
    
    return new Response(JSON.stringify({
      success: true,
      message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ Multilogin',
      secrets_status: {
        MULTILOGIN_EMAIL: {
          configured: !!multiloginEmail,
          value: multiloginEmail || '–ù–ï –ù–ê–°–¢–†–û–ï–ù',
          length: multiloginEmail ? multiloginEmail.length : 0
        },
        MULTILOGIN_PASSWORD: {
          configured: !!multiloginPassword,
          first_3_chars: multiloginPassword ? multiloginPassword.substring(0, 3) + '...' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù',
          length: multiloginPassword ? multiloginPassword.length : 0
        },
        MULTILOGIN_TOKEN: {
          configured: !!multiloginToken,
          first_10_chars: multiloginToken ? multiloginToken.substring(0, 10) + '...' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù',
          length: multiloginToken ? multiloginToken.length : 0
        }
      },
      recommendations: multiloginEmail && multiloginPassword ? 
        ['–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤ Multilogin'] :
        ['–î–æ–±–∞–≤—å—Ç–µ MULTILOGIN_EMAIL –∏ MULTILOGIN_PASSWORD –≤ —Å–µ–∫—Ä–µ—Ç—ã Supabase'],
      timestamp: new Date().toISOString()
    }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤',
      message: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})