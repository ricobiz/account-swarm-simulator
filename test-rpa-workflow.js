
#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ RPA workflow
 */

async function createTestRPATask(botUrl) {
    console.log('üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é RPA –∑–∞–¥–∞—á—É...');
    
    const testTask = {
        taskId: `test_${Date.now()}`,
        url: "https://httpbin.org/get",
        actions: [
            { type: "navigate", url: "https://httpbin.org/get" },
            { type: "wait", duration: 2000 },
            { type: "check_element", selector: "body" }
        ],
        accountId: "test-account",
        scenarioId: "test-scenario", 
        blockId: "test-block",
        timeout: 30000
    };
    
    try {
        const response = await fetch(`${botUrl}/execute`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(testTask)
        });
        
        const result = await response.json();
        
        if (result.success) {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é');
            console.log(`üìã Task ID: ${result.taskId}`);
            return result.taskId;
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏');
            console.log(result);
            return null;
        }
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        return null;
    }
}

async function checkBotStatus(botUrl) {
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞...');
    
    try {
        const response = await fetch(`${botUrl}/status`);
        const status = await response.json();
        
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω:');
        console.log(`   –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${status.status}`);
        console.log(`   –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ${status.capabilities?.join(', ')}`);
        console.log(`   –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${status.optimizations?.join(', ')}`);
        console.log(`   –°—Ä–µ–¥–∞: ${status.environment}`);
        
        return true;
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π workflow
const botUrl = process.argv[2];

if (!botUrl) {
    console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ URL –±–æ—Ç–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç');
    console.log('–ü—Ä–∏–º–µ—Ä: node test-rpa-workflow.js https://your-app.up.railway.app');
    process.exit(1);
}

const cleanUrl = botUrl.replace(/\/+$/, '');

console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RPA workflow');
console.log('============================');

(async () => {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    const statusOk = await checkBotStatus(cleanUrl);
    
    if (statusOk) {
        // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        const taskId = await createTestRPATask(cleanUrl);
        
        if (taskId) {
            console.log('üéâ –ü–æ–ª–Ω—ã–π workflow —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!');
            console.log('üöÄ RPA-–±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        }
    }
})();
