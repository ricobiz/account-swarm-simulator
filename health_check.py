
#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è RPA-–±–æ—Ç–∞
"""

import subprocess
import sys
import json
import time
import os
import requests
from pathlib import Path

def check_chrome():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Chrome"""
    try:
        result = subprocess.run(['google-chrome', '--version', '--no-sandbox'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            return {"status": "ok", "version": result.stdout.strip()}
        else:
            return {"status": "error", "message": "Chrome –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è"}
    except Exception as e:
        return {"status": "error", "message": f"Chrome –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}"}

def check_python_deps():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages = [
        'selenium', 'undetected_chromedriver', 'fake_useragent', 
        'flask', 'requests', 'numpy', 'pandas', 'beautifulsoup4',
        'opencv-python', 'pillow', 'psutil'
    ]
    
    missing = []
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing.append(package)
    
    if missing:
        return {"status": "error", "missing": missing}
    else:
        return {"status": "ok", "packages": len(required_packages)}

def check_display():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è"""
    display = os.environ.get('DISPLAY', ':99')
    try:
        result = subprocess.run(['xdpyinfo', '-display', display], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            return {"status": "ok", "display": display}
        else:
            return {"status": "error", "message": "–î–∏—Å–ø–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
    except Exception as e:
        return {"status": "warning", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏—Å–ø–ª–µ–π: {str(e)}"}

def check_directories():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    dirs = ['screenshots', 'logs', 'profiles', 'extensions', 'downloads', 'frontend']
    missing = []
    
    for dir_name in dirs:
        dir_path = Path(f'/app/{dir_name}')
        if not dir_path.exists():
            missing.append(dir_name)
        elif not dir_path.is_dir():
            missing.append(f"{dir_name} (–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)")
    
    if missing:
        return {"status": "warning", "missing": missing}
    else:
        return {"status": "ok", "directories": len(dirs)}

def check_rpa_service():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã RPA —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get('http://localhost:8080/health', timeout=5)
        if response.status_code == 200:
            return {"status": "ok", "response": response.json()}
        else:
            return {"status": "error", "message": f"HTTP {response.status_code}"}
    except Exception as e:
        return {"status": "error", "message": f"–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}"}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ RPA-–±–æ—Ç–∞...")
    
    health_status = {
        "timestamp": time.time(),
        "overall_status": "ok",
        "checks": {}
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Chrome
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ Chrome...")
    chrome_status = check_chrome()
    health_status["checks"]["chrome"] = chrome_status
    if chrome_status["status"] == "error":
        health_status["overall_status"] = "error"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    deps_status = check_python_deps()
    health_status["checks"]["python_dependencies"] = deps_status
    if deps_status["status"] == "error":
        health_status["overall_status"] = "error"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–ø–ª–µ—è
    print("üñ•Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–ø–ª–µ—è...")
    display_status = check_display()
    health_status["checks"]["display"] = display_status
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    dirs_status = check_directories()
    health_status["checks"]["directories"] = dirs_status
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ RPA —Å–µ—Ä–≤–∏—Å–∞
    print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ RPA —Å–µ—Ä–≤–∏—Å–∞...")
    rpa_status = check_rpa_service()
    health_status["checks"]["rpa_service"] = rpa_status
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print("\n" + "="*50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò –ó–î–û–†–û–í–¨–Ø")
    print("="*50)
    print(json.dumps(health_status, indent=2, ensure_ascii=False))
    
    if health_status["overall_status"] == "ok":
        print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
        sys.exit(1)

if __name__ == "__main__":
    main()
