import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { useRPAService } from '@/hooks/useRPAService';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { PlayCircle, Loader2, Lock, Globe, CheckCircle, AlertCircle, Shield, RefreshCw, XCircle } from 'lucide-react';
import type { RPATask } from '@/types/rpa';

export const MultiloginTestButton: React.FC = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [testLog, setTestLog] = useState<string[]>([]);
  const [accountData, setAccountData] = useState({
    platform: 'telegram',
    username: '',
    password: '',
    email: ''
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
  const [tokenStatus, setTokenStatus] = useState<any>(null);
  const [isTestingTokens, setIsTestingTokens] = useState(false);
  
  const { submitRPATask, waitForRPACompletion } = useRPAService();
  const { toast } = useToast();

  const addLog = (message: string, type: 'info' | 'success' | 'error' = 'info') => {
    const emoji = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : 'üìù';
    const logMessage = `${emoji} ${new Date().toLocaleTimeString()}: ${message}`;
    console.log(`[MULTILOGIN TEST] ${logMessage}`);
    setTestLog(prev => [...prev, logMessage]);
  };

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–æ–∫–µ–Ω–æ–≤
  const testTokenSystem = async () => {
    setIsTestingTokens(true);
    try {
      addLog('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É —Ç–æ–∫–µ–Ω–æ–≤ Multilogin...', 'info');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
      const { data: currentToken, error: getError } = await supabase.functions.invoke('multilogin-token-manager');
      
      if (currentToken?.success) {
        setTokenStatus({
          hasToken: true,
          token: currentToken.token.substring(0, 50) + '...',
          message: '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ',
          source: 'cache'
        });
        addLog('‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ', 'success');
      } else {
        addLog('üîÑ –ê–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π...', 'info');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        const { data: newToken, error: refreshError } = await supabase.functions.invoke('multilogin-token-manager', {
          body: { action: 'refresh' }
        });
        
        if (newToken?.success) {
          setTokenStatus({
            hasToken: true,
            token: newToken.token.substring(0, 50) + '...',
            message: '–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!',
            expiresIn: '25 –º–∏–Ω—É—Ç',
            source: 'fresh'
          });
          addLog('‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ', 'success');
        } else {
          throw new Error(refreshError?.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
        }
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º Multilogin API —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
      addLog('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Multilogin API —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...', 'info');
      const { data: apiTest, error: apiError } = await supabase.functions.invoke('multilogin-api', {
        body: { endpoint: '/health' }
      });
      
      if (apiTest?.success) {
        addLog('‚úÖ Multilogin API —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º', 'success');
        setTokenStatus(prev => ({ ...prev, apiConnected: true }));
      } else {
        addLog('‚ö†Ô∏è Multilogin API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'info');
        setTokenStatus(prev => ({ ...prev, apiConnected: false }));
      }
      
      toast({
        title: "‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        description: "Multilogin —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
      });
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤:', error);
      setTokenStatus({
        hasToken: false,
        error: error.message
      });
      addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–æ–∫–µ–Ω–æ–≤: ${error.message}`, 'error');
      
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setIsTestingTokens(false);
    }
  };

  const runMultiloginTest = async () => {
    if (!accountData.username || !accountData.password) {
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–í–≤–µ–¥–∏—Ç–µ username –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        variant: "destructive"
      });
      return;
    }

    setIsRunning(true);
    setTestLog([]);
    
    try {
      addLog('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç Multilogin —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏', 'info');
      addLog(`üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç: ${accountData.username} (${accountData.platform})`, 'info');
      
      // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è Multilogin —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
      const testTask: RPATask = {
        taskId: `multilogin_auto_test_${Date.now()}`,
        url: accountData.platform === 'telegram' ? 'https://web.telegram.org/a/' : 'https://instagram.com/accounts/login/',
        actions: [
          {
            type: 'navigate',
            url: accountData.platform === 'telegram' ? 'https://web.telegram.org/a/' : 'https://instagram.com/accounts/login/'
          },
          {
            type: 'wait',
            duration: 5000
          },
          ...(accountData.platform === 'telegram' ? [
            {
              type: 'click' as const,
              selector: 'input[name="phone_number"], input#sign-in-phone-number, input[type="tel"]'
            },
            {
              type: 'key' as const,
              text: accountData.username
            }
          ] : [
            {
              type: 'click' as const,
              selector: 'input[name="username"], input[placeholder*="username"], input[aria-label*="username"]'
            },
            {
              type: 'key' as const,
              text: accountData.username
            },
            {
              type: 'click' as const,
              selector: 'input[name="password"], input[type="password"]'
            },
            {
              type: 'key' as const,
              text: accountData.password
            }
          ]),
          {
            type: 'wait',
            duration: 2000
          },
          {
            type: 'click',
            selector: accountData.platform === 'telegram' ? 
              'button[type="submit"], .btn-primary, button:contains("Next")' :
              'button[type="submit"], button:contains("Log In"), button[class*="login"]'
          },
          {
            type: 'wait',
            duration: 8000
          }
        ],
        accountId: `multilogin_auto_${accountData.platform}_${accountData.username}`,
        scenarioId: 'multilogin-auto-token-test',
        blockId: 'multilogin-auto-block',
        timeout: 120000, // 2 –º–∏–Ω—É—Ç—ã
        metadata: {
          platform: accountData.platform,
          action: 'login_test_with_auto_tokens',
          multilogin: {
            enabled: true,
            useAutomaticTokens: true,
            createProfile: true,
            antiDetection: true
          },
          test_type: 'automatic_token_integration',
          account: {
            platform: accountData.platform,
            username: accountData.username,
            password: accountData.password,
            email: accountData.email
          }
        }
      };

      addLog(`üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏: ${testTask.taskId}`, 'info');
      addLog(`üéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${accountData.platform.toUpperCase()}`, 'info');
      addLog('üîë –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ Multilogin —Ç–æ–∫–µ–Ω—ã', 'info');

      toast({
        title: "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏",
        description: `–¢–µ—Å—Ç–∏—Ä—É–µ–º ${accountData.platform} —á–µ—Ä–µ–∑ Multilogin —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤...`
      });

      addLog('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É RPA-–±–æ—Ç—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ Multilogin —Ç–æ–∫–µ–Ω–∞–º–∏...', 'info');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
      const submitResult = await submitRPATask(testTask);
      
      addLog(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: ${submitResult.success ? '–£—Å–ø–µ—Ö' : '–û—à–∏–±–∫–∞'}`, submitResult.success ? 'success' : 'error');
      
      if (!submitResult.success) {
        throw new Error(submitResult.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏');
      }

      addLog('‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç Multilogin –ø—Ä–æ—Ñ–∏–ª—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏...', 'success');

      toast({
        title: "üì§ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", 
        description: "Multilogin –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è..."
      });

      // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
      addLog('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ (—Ç–∞–π–º–∞—É—Ç 2 –º–∏–Ω—É—Ç—ã)...', 'info');
      const result = await waitForRPACompletion(testTask.taskId, 120000);

      if (result?.success) {
        addLog('üéâ –¢–µ—Å—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ Multilogin –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
        addLog(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: ${result.data?.multilogin_profile || 'profile_auto_created'}`, 'success');
        addLog(`üîë –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${result.data?.multilogin_integrated ? '–î–∞' : '–ù–µ—Ç'}`, 'success');
        addLog(`‚ö° –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result.executionTime || 'N/A'}ms`, 'info');
        
        if (result.data?.screenshot_urls) {
          addLog(`üì∏ –°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${result.data.screenshot_urls.length}`, 'info');
        }
        
        if (result.data?.browser_fingerprint) {
          addLog(`üñ±Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫: ${result.data.browser_fingerprint.user_agent.substring(0, 50)}...`, 'info');
        }
        
        toast({
          title: "üéâ –¢–µ—Å—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ —É—Å–ø–µ—à–µ–Ω!",
          description: "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è–µ–º—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ Multilogin",
        });
      } else {
        addLog(`‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
        addLog(`‚ö†Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result?.executionTime || 'N/A'}ms`, 'info');
        
        toast({
          title: "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏",
          description: result?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã Multilogin',
          variant: "destructive"
        });
      }

    } catch (error: any) {
      addLog(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
      console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Multilogin —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏:', error);
      
      toast({
        title: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setIsRunning(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ */}
      <Card className="bg-gradient-to-r from-purple-800/50 to-indigo-800/50 border-purple-500/30">
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center gap-2 text-white">
            <Shield className="h-5 w-5 text-purple-400" />
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ–∫–µ–Ω–æ–≤ Multilogin
            {tokenStatus?.hasToken && (
              <Badge variant="default" className="bg-green-600">–ê–∫—Ç–∏–≤–Ω–∞</Badge>
            )}
          </CardTitle>
        </CardHeader>
        
        <CardContent className="space-y-4">
          <p className="text-gray-300 text-sm">
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ Multilogin –∫–∞–∂–¥—ã–µ 25 –º–∏–Ω—É—Ç
          </p>
          
          {tokenStatus && (
            <div className="bg-gray-900 p-4 rounded-lg border border-purple-500/20">
              <div className="flex items-start gap-3">
                {tokenStatus.hasToken ? (
                  <CheckCircle className="h-5 w-5 text-green-400 mt-0.5" />
                ) : (
                  <XCircle className="h-5 w-5 text-red-400 mt-0.5" />
                )}
                <div className="flex-1">
                  <p className="text-sm text-gray-300 mb-2">{tokenStatus.message}</p>
                  {tokenStatus.token && (
                    <p className="text-xs text-gray-500 font-mono mb-1">–¢–æ–∫–µ–Ω: {tokenStatus.token}</p>
                  )}
                  {tokenStatus.expiresIn && (
                    <p className="text-xs text-gray-500">–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {tokenStatus.expiresIn}</p>
                  )}
                  {tokenStatus.source && (
                    <Badge variant="outline" className="text-xs mt-2">
                      {tokenStatus.source === 'cache' ? '–ò–∑ –∫–µ—à–∞' : '–°–≤–µ–∂–∏–π —Ç–æ–∫–µ–Ω'}
                    </Badge>
                  )}
                  {tokenStatus.apiConnected !== undefined && (
                    <Badge variant={tokenStatus.apiConnected ? "default" : "destructive"} className="text-xs mt-2 ml-2">
                      API: {tokenStatus.apiConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
                    </Badge>
                  )}
                  {tokenStatus.error && (
                    <p className="text-xs text-red-400 mt-2">–û—à–∏–±–∫–∞: {tokenStatus.error}</p>
                  )}
                </div>
              </div>
            </div>
          )}
          
          <Button 
            onClick={testTokenSystem}
            disabled={isTestingTokens}
            className="w-full bg-purple-600 hover:bg-purple-700"
          >
            {isTestingTokens ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤...
              </>
            ) : (
              <>
                <RefreshCw className="mr-2 h-4 w-4" />
                –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
              </>
            )}
          </Button>
          
          <div className="text-xs text-gray-400 bg-gray-900/30 p-3 rounded">
            <p className="font-semibold mb-2 text-purple-400">üîë –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è:</p>
            <ul className="list-disc list-inside ml-2 space-y-1">
              <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ Multilogin —Ç–æ–∫–µ–Ω–æ–≤</li>
              <li>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</li>
              <li>–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏</li>
              <li>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Multilogin API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</li>
            </ul>
          </div>
        </CardContent>
      </Card>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π Multilogin —Ç–µ—Å—Ç */}
      <Card className="bg-gradient-to-r from-green-800/50 to-teal-800/50 border-green-500/30">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <Globe className="h-5 w-5" />
            –¢–µ—Å—Ç Multilogin —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-gray-300 text-sm">
            –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏, —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤—Ö–æ–¥–æ–º –≤ –∞–∫–∫–∞—É–Ω—Ç
          </p>
          
          {/* –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ */}
          <div className="grid grid-cols-1 gap-4 p-4 bg-gray-900/50 rounded-lg border border-green-500/20">
            <div>
              <Label htmlFor="platform" className="text-gray-300 flex items-center gap-2">
                <CheckCircle className="h-4 w-4" />
                –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
              </Label>
              <select
                id="platform"
                className="w-full mt-1 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white focus:border-green-500 transition-colors"
                value={accountData.platform}
                onChange={(e) => setAccountData(prev => ({ ...prev, platform: e.target.value }))}
              >
                <option value="telegram">Telegram Web</option>
                <option value="instagram">Instagram</option>
              </select>
            </div>
            
            <div>
              <Label htmlFor="username" className="text-gray-300 flex items-center gap-2">
                <CheckCircle className="h-4 w-4" />
                {accountData.platform === 'telegram' ? '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' : 'Username'}
              </Label>
              <Input
                id="username"
                type="text"
                placeholder={accountData.platform === 'telegram' ? '+7900...' : 'username'}
                value={accountData.username}
                onChange={(e) => setAccountData(prev => ({ ...prev, username: e.target.value }))}
                className="bg-gray-800 border-gray-600 text-white focus:border-green-500"
              />
            </div>

            <div>
              <Label htmlFor="password" className="text-gray-300 flex items-center gap-2">
                <Lock className="h-4 w-4" />
                –ü–∞—Ä–æ–ª—å
              </Label>
              <Input
                id="password"
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"
                value={accountData.password}
                onChange={(e) => setAccountData(prev => ({ ...prev, password: e.target.value }))}
                className="bg-gray-800 border-gray-600 text-white focus:border-green-500"
              />
            </div>

            <div>
              <Label htmlFor="email" className="text-gray-300">Email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
              <Input
                id="email"
                type="email"
                placeholder="email@example.com"
                value={accountData.email}
                onChange={(e) => setAccountData(prev => ({ ...prev, email: e.target.value }))}
                className="bg-gray-800 border-gray-600 text-white focus:border-green-500"
              />
            </div>
          </div>
          
          <Button
            onClick={runMultiloginTest}
            disabled={isRunning || !accountData.username || !accountData.password}
            className="w-full bg-green-600 hover:bg-green-700 disabled:opacity-50"
          >
            {isRunning ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                Multilogin —Å –∞–≤—Ç–æ—Ç–æ–∫–µ–Ω–∞–º–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç...
              </>
            ) : (
              <>
                <PlayCircle className="h-4 w-4 mr-2" />
                –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
              </>
            )}
          </Button>
          
          <div className="text-xs text-gray-400 bg-gray-900/30 p-3 rounded">
            <p className="font-semibold mb-2 text-green-400">üîê –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è:</p>
            <ul className="list-disc list-inside ml-2 space-y-1">
              <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤</li>
              <li>–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ Multilogin –ø—Ä–æ—Ñ–∏–ª—è</li>
              <li>–ó–∞–ø—É—Å–∫ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏</li>
              <li>–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</li>
              <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞</li>
              <li>–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ Multilogin</li>
              <li>–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
            </ul>
            
            <p className="font-semibold mb-2 mt-3 text-yellow-400">‚ö†Ô∏è –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ—Ç–æ–∫–µ–Ω–æ–≤:</p>
            <ul className="list-disc list-inside ml-2 space-y-1">
              <li>–¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 25 –º–∏–Ω—É—Ç</li>
              <li>–ù–µ—Ç —Ä–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤</li>
              <li>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ</li>
              <li>–¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</li>
            </ul>
          </div>

          {/* –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ */}
          {testLog.length > 0 && (
            <div className="mt-4 p-3 bg-gray-900 rounded-lg border border-green-500/20">
              <p className="text-xs text-gray-400 mb-2 flex items-center gap-2">
                <AlertCircle className="h-4 w-4" />
                üìã –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏:
              </p>
              <div className="text-xs text-gray-300 space-y-1 max-h-48 overflow-y-auto">
                {testLog.map((log, index) => (
                  <div 
                    key={index} 
                    className={`font-mono p-1 rounded ${
                      log.includes('‚úÖ') ? 'bg-green-900/20' : 
                      log.includes('‚ùå') ? 'bg-red-900/20' : 
                      'bg-gray-800/30'
                    }`}
                  >
                    {log}
                  </div>
                ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};