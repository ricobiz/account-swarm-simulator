import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ Multilogin —Ç–æ–∫–µ–Ω–æ–≤ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è –≤–∞—à–µ–π Node.js —Å–∏—Å—Ç–µ–º—ã)
class MultiloginTokenManager {
  constructor(email: string, password: string) {
    this.email = email
    this.password = password
  }

  private email: string
  private password: string

  // MD5 —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
  private async createMD5Hash(text: string): Promise<string> {
    const encoder = new TextEncoder()
    const data = encoder.encode(text)
    const hashBuffer = await crypto.subtle.digest('MD5', data)
    const hashArray = Array.from(new Uint8Array(hashBuffer))
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Multilogin API (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
  async getToken(): Promise<string> {
    console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π Multilogin —Ç–æ–∫–µ–Ω...')
    
    try {
      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –≤ MD5
      const passwordHash = await this.createMD5Hash(this.password)
      
      const response = await fetch('https://api.multilogin.com/user/signin', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email: this.email,
          password: passwordHash
        })
      })

      const data = await response.json()
      
      if (data.data && data.data.token) {
        console.log('‚úÖ Multilogin —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!')
        return data.data.token
      } else {
        throw new Error(`Multilogin API error: ${JSON.stringify(data)}`)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Multilogin —Ç–æ–∫–µ–Ω–∞:', error)
      throw error
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ Supabase (–≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–æ–≤)
  async saveToken(token: string, supabase: any): Promise<void> {
    const expiresAt = new Date(Date.now() + (25 * 60 * 1000)) // 25 –º–∏–Ω—É—Ç
    
    try {
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã
      await supabase
        .from('multilogin_tokens')
        .update({ is_active: false })
        .eq('email', this.email)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const { error } = await supabase
        .from('multilogin_tokens')
        .insert({
          email: this.email,
          token: token,
          expires_at: expiresAt.toISOString(),
          is_active: true
        })

      if (error) {
        throw error
      }

      console.log('üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
      console.log('‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç:', expiresAt.toLocaleString('ru-RU'))
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
      throw error
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±–∞–∑—ã
  async getCurrentToken(supabase: any): Promise<string | null> {
    try {
      const { data, error } = await supabase
        .from('multilogin_tokens')
        .select('*')
        .eq('email', this.email)
        .eq('is_active', true)
        .gt('expires_at', new Date().toISOString())
        .order('created_at', { ascending: false })
        .limit(1)
        .maybeSingle()

      if (error) {
        throw error
      }

      return data?.token || null
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±–∞–∑—ã:', error)
      return null
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
  async refreshToken(supabase: any): Promise<string> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
      const existingToken = await this.getCurrentToken(supabase)
      if (existingToken) {
        console.log('‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return existingToken
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const newToken = await this.getToken()
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
      await this.saveToken(newToken, supabase)
      
      const timestamp = new Date().toLocaleString('ru-RU')
      console.log(`üéâ MULTILOGIN –¢–û–ö–ï–ù –û–ë–ù–û–í–õ–ï–ù (${timestamp})`)
      console.log('üîë –¢–æ–∫–µ–Ω:', newToken.substring(0, 50) + '...')
      
      return newToken
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Multilogin —Ç–æ–∫–µ–Ω–∞:', error.message)
      throw error
    }
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
    const multiloginEmail = Deno.env.get('MULTILOGIN_EMAIL')
    const multiloginPassword = Deno.env.get('MULTILOGIN_PASSWORD')

    if (!multiloginEmail || !multiloginPassword) {
      return new Response(JSON.stringify({
        success: false,
        error: 'MULTILOGIN_EMAIL –∏–ª–∏ MULTILOGIN_PASSWORD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
        message: '–î–æ–±–∞–≤—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Supabase —Å–µ–∫—Ä–µ—Ç—ã'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    const tokenManager = new MultiloginTokenManager(multiloginEmail, multiloginPassword)

    if (req.method === 'GET') {
      // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
      const currentToken = await tokenManager.getCurrentToken(supabase)
      
      if (currentToken) {
        return new Response(JSON.stringify({
          success: true,
          token: currentToken,
          message: '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫–µ—à–∞'
        }), {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      } else {
        return new Response(JSON.stringify({
          success: false,
          message: '–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'
        }), {
          status: 404,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      }
    }

    if (req.method === 'POST') {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      const newToken = await tokenManager.refreshToken(supabase)
      
      return new Response(JSON.stringify({
        success: true,
        token: newToken,
        message: '–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
        expires_in_minutes: 25
      }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    return new Response(JSON.stringify({
      success: false,
      error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
    }), {
      status: 405,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Multilogin Token Manager:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})