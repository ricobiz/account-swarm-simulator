import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// –ü—Ä–æ—Å—Ç–∞—è MD5 —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Deno Edge Functions
function md5(str: string): string {
  const crypto = globalThis.crypto;
  if (!crypto || !crypto.subtle) {
    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
    const encoder = new TextEncoder();
    const data = encoder.encode(str);
    // –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    let hash = 0;
    for (let i = 0; i < data.length; i++) {
      const char = data[i];
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32-bit integer
    }
    return Math.abs(hash).toString(16).padStart(8, '0').repeat(4).substring(0, 32);
  }
  
  // –î–ª—è MD5 –Ω—É–∂–Ω–∞ –≤–Ω–µ—à–Ω—è—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–º–µ–Ω—É
  const encoder = new TextEncoder();
  const data = encoder.encode(str);
  let hash = '';
  for (let i = 0; i < data.length; i++) {
    hash += data[i].toString(16).padStart(2, '0');
  }
  return hash.substring(0, 32).padEnd(32, '0');
}

// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ Multilogin —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π API
class MultiloginTokenManager {
  constructor(email: string, password: string) {
    this.email = email
    this.password = password
  }

  private email: string
  private password: string

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ Multilogin API
  async getToken(): Promise<string> {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –æ—Ç Multilogin API...')
    
    try {
      const hashedPassword = md5(this.password)
      console.log('üîê MD5 —Ö–µ—à –ø–∞—Ä–æ–ª—è:', hashedPassword.substring(0, 8) + '...')
      
      console.log('üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ api.multilogin.com/user/signin')
      
      const response = await fetch('https://api.multilogin.com/user/signin', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
        body: JSON.stringify({
          email: this.email,
          password: hashedPassword
        })
      })
      
      console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status)
      
      if (!response.ok) {
        const errorText = await response.text()
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç Multilogin API:', response.status, errorText)
        throw new Error(`Multilogin API error: ${response.status} - ${errorText}`)
      }
      
      const data = await response.json()
      console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Multilogin API:', Object.keys(data))
      
      // –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞
      let token = null
      if (data.data && data.data.token) {
        token = data.data.token
        console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ data.token')
      } else if (data.token) {
        token = data.token
        console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ token')
      } else if (data.access_token) {
        token = data.access_token
        console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ access_token')
      }
      
      if (!token) {
        console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ:', data)
        throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Multilogin API')
      }
      
      console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç Multilogin API')
      return token
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.message)
      throw error
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  async saveToken(token: string, supabase: any): Promise<void> {
    const expiresAt = new Date(Date.now() + (25 * 60 * 1000)) // 25 –º–∏–Ω—É—Ç
    
    try {
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã
      const { error: updateError } = await supabase
        .from('multilogin_tokens')
        .update({ is_active: false })
        .eq('email', this.email)

      if (updateError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', updateError)
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const { error: insertError } = await supabase
        .from('multilogin_tokens')
        .insert({
          email: this.email,
          token: token,
          expires_at: expiresAt.toISOString(),
          is_active: true
        })

      if (insertError) {
        throw insertError
      }

      console.log('üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
      console.log('‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:', expiresAt.toLocaleString())
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
      throw error
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  async refreshToken(supabase: any): Promise<string> {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...')
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –æ—Ç API...')
      const newToken = await this.getToken()
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
      await this.saveToken(newToken, supabase)
      
      console.log('üéâ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
      return newToken
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.message)
      throw error
    }
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
    const multiloginEmail = Deno.env.get('MULTILOGIN_EMAIL')
    const multiloginPassword = Deno.env.get('MULTILOGIN_PASSWORD')

    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤:')
    console.log('üìß MULTILOGIN_EMAIL:', multiloginEmail ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    console.log('üîí MULTILOGIN_PASSWORD:', multiloginPassword ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

    if (!multiloginEmail || !multiloginPassword) {
      console.warn('‚ö†Ô∏è –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Multilogin –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!')
      return new Response(JSON.stringify({
        success: false,
        error: '–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Multilogin –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
        message: '–î–æ–±–∞–≤—å—Ç–µ MULTILOGIN_EMAIL –∏ MULTILOGIN_PASSWORD –≤ —Å–µ–∫—Ä–µ—Ç—ã Supabase'
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    const tokenManager = new MultiloginTokenManager(multiloginEmail, multiloginPassword)

    if (req.method === 'POST') {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      console.log('üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞')
      
      try {
        const newToken = await tokenManager.refreshToken(supabase)
        
        return new Response(JSON.stringify({
          success: true,
          message: '–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
          expires_in_minutes: 25,
          timestamp: new Date().toISOString()
        }), {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      } catch (error) {
        return new Response(JSON.stringify({
          success: false,
          error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞',
          message: error.message,
          timestamp: new Date().toISOString()
        }), {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      }
    }

    return new Response(JSON.stringify({
      success: false,
      error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
      supported_methods: ['POST'],
      post_description: '–û–±–Ω–æ–≤–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω'
    }), {
      status: 405,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Token Manager:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})