#!/usr/bin/env python3
"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è RPA –±–æ—Ç–∞ —Å Multilogin
"""

import os
import sys
import subprocess
import logging
from flask import Flask, jsonify, request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

@app.route('/health', methods=['GET'])
def health():
    """Health check"""
    return jsonify({
        'status': 'ok',
        'message': 'RPA –±–æ—Ç —Å Multilogin –≥–æ—Ç–æ–≤',
        'version': '2.0.0-multilogin'
    })

@app.route('/test', methods=['GET'])
def test_rpa():
    """–¢–µ—Å—Ç RPA —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Chrome
        chrome_path = '/usr/bin/google-chrome-stable'
        chrome_available = os.path.exists(chrome_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Multilogin —Ñ–∞–π–ª—ã
        multilogin_files = ['multilogin_enhanced.py', 'rpa_bot_multilogin.py']
        available_files = [f for f in multilogin_files if os.path.exists(f)]
        
        logger.info(f"Chrome: {'‚úÖ' if chrome_available else '‚ùå'}")
        logger.info(f"Multilogin —Ñ–∞–π–ª—ã: {available_files}")
        
        return jsonify({
            'success': True,
            'chrome_available': chrome_available,
            'multilogin_files': available_files,
            'message': 'RPA —Å–∏—Å—Ç–µ–º–∞ —Å Multilogin –≥–æ—Ç–æ–≤–∞'
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/execute', methods=['POST'])
def execute_task():
    """–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É RPA –±–æ—Ç—É"""
    try:
        # –í production –±—É–¥–µ—Ç –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∫ rpa_bot_multilogin.py
        task = request.get_json()
        task_id = task.get('taskId', 'unknown')
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ RPA –∑–∞–¥–∞—á–∞: {task_id}")
        
        return jsonify({
            'success': True,
            'taskId': task_id,
            'message': '–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ RPA –±–æ—Ç—É',
            'multilogin_ready': True
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ RPA –±–æ—Ç–∞ —Å Multilogin –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)