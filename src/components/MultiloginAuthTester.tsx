import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { useToast } from '@/hooks/use-toast'
import { supabase } from '@/integrations/supabase/client'

export const MultiloginAuthTester = () => {
  const [testingAuth, setTestingAuth] = useState(false)
  const [checkingSecrets, setCheckingSecrets] = useState(false)
  const [testingSimple, setTestingSimple] = useState(false)
  
  const [authResults, setAuthResults] = useState<any>(null)
  const [secretsResults, setSecretsResults] = useState<any>(null)
  const [simpleResults, setSimpleResults] = useState<any>(null)
  
  const { toast } = useToast()

  const checkSecrets = async () => {
    setCheckingSecrets(true)
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ Multilogin...')
      
      const { data, error } = await supabase.functions.invoke('check-multilogin-secrets', {
        body: {},
        headers: { 'Content-Type': 'application/json' }
      })
      
      if (error) throw error
      
      setSecretsResults(data)
      console.log('üìã –°—Ç–∞—Ç—É—Å —Å–µ–∫—Ä–µ—Ç–æ–≤:', data)
      
      toast({
        title: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        description: "–í—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã",
      })
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤:', error)
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setCheckingSecrets(false)
    }
  }

  const testMultiloginAuth = async () => {
    setTestingAuth(true)
    try {
      console.log('üîÑ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API...')
      
      const { data, error } = await supabase.functions.invoke('test-multilogin-auth', {
        body: {},
        headers: { 'Content-Type': 'application/json' }
      })
      
      if (error) throw error
      
      setAuthResults(data)
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ API:', data)
      
      toast({
        title: "‚úÖ –¢–µ—Å—Ç API –∑–∞–≤–µ—Ä—à–µ–Ω",
        description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ",
      })
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ API:', error)
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ API",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setTestingAuth(false)
    }
  }

  const testSimpleToken = async () => {
    setTestingSimple(true)
    try {
      console.log('üîÑ –¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...')
      
      const { data, error } = await supabase.functions.invoke('multilogin-simple', {
        body: {},
        headers: { 'Content-Type': 'application/json' }
      })
      
      if (error) throw error
      
      setSimpleResults(data)
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', data)
      
      toast({
        title: "‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
        description: "–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è",
      })
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error)
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setTestingSimple(false)
    }
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6 p-4">
      <div className="text-center mb-6">
        <h1 className="text-2xl font-bold text-foreground mb-2">üß™ Multilogin API –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h1>
        <p className="text-muted-foreground">–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ Multilogin API</p>
      </div>

      {/* –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ */}
      <Card className="border-2">
        <CardHeader className="bg-muted/50">
          <CardTitle className="text-foreground flex items-center gap-2">
            <span className="text-2xl">1Ô∏è‚É£</span>
            –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
          </CardTitle>
          <CardDescription className="text-muted-foreground">
            –ü–µ—Ä–≤—ã–π —à–∞–≥: —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-6">
          <Button 
            onClick={checkSecrets} 
            disabled={checkingSecrets}
            className="w-full"
            variant="outline"
            size="lg"
          >
            {checkingSecrets ? 'üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º...' : 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã Multilogin'}
          </Button>
        </CardContent>
      </Card>

      {/* –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API */}
      <Card className="border-2">
        <CardHeader className="bg-muted/50">
          <CardTitle className="text-foreground flex items-center gap-2">
            <span className="text-2xl">2Ô∏è‚É£</span>
            –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API
          </CardTitle>
          <CardDescription className="text-muted-foreground">
            –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ API endpoints —Å MD5 —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-6">
          <Button 
            onClick={testMultiloginAuth} 
            disabled={testingAuth}
            className="w-full"
            variant="default"
            size="lg"
          >
            {testingAuth ? 'üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º API...' : 'üöÄ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API'}
          </Button>
        </CardContent>
      </Card>

      {/* –®–∞–≥ 3: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç */}
      <Card className="border-2">
        <CardHeader className="bg-muted/50">
          <CardTitle className="text-foreground flex items-center gap-2">
            <span className="text-2xl">3Ô∏è‚É£</span>
            –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç (–≥–æ—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω)
          </CardTitle>
          <CardDescription className="text-muted-foreground">
            –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —É–∂–µ –∏–º–µ—é—â–∏–º—Å—è —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-6">
          <Button 
            onClick={testSimpleToken} 
            disabled={testingSimple}
            className="w-full"
            variant="secondary"
            size="lg"
          >
            {testingSimple ? 'üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º...' : '‚ö° –¢–µ—Å—Ç –≥–æ—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞'}
          </Button>
        </CardContent>
      </Card>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ */}
      {secretsResults && (
        <Card className="border-green-200 bg-green-50 dark:bg-green-950/20 dark:border-green-800">
          <CardHeader>
            <CardTitle className="text-green-800 dark:text-green-200">üîê –°—Ç–∞—Ç—É—Å —Å–µ–∫—Ä–µ—Ç–æ–≤</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {Object.entries(secretsResults.secrets_status || {}).map(([key, info]: [string, any]) => (
                <div key={key} className="border rounded-lg p-4 bg-background">
                  <div className="font-semibold text-foreground">{key}</div>
                  <div className="text-sm mt-2 space-y-1">
                    <div className={info.configured ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}>
                      {info.configured ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
                    </div>
                    {info.configured && (
                      <div className="text-muted-foreground">
                        –ó–Ω–∞—á–µ–Ω–∏–µ: {info.value || info.first_3_chars || info.first_10_chars} (–¥–ª–∏–Ω–∞: {info.length})
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ API */}
      {authResults && (
        <Card className="border-blue-200 bg-blue-50 dark:bg-blue-950/20 dark:border-blue-800">
          <CardHeader>
            <CardTitle className="text-blue-800 dark:text-blue-200">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ API</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="text-sm bg-background p-3 rounded border">
                <strong className="text-foreground">Email:</strong> <span className="text-muted-foreground">{authResults.credentials?.email}</span><br />
                <strong className="text-foreground">–ü–∞—Ä–æ–ª—å:</strong> <span className="text-muted-foreground">{authResults.credentials?.password_length} —Å–∏–º–≤–æ–ª–æ–≤</span><br />
                <strong className="text-foreground">–í—Ä–µ–º—è:</strong> <span className="text-muted-foreground">{new Date(authResults.timestamp).toLocaleString()}</span>
              </div>
              
              <div className="space-y-3">
                {authResults.results?.map((result: any, index: number) => (
                  <div key={index} className="border rounded-lg p-4 bg-background">
                    <div className="font-semibold text-foreground mb-2">{result.endpoint}</div>
                    
                    {result.error ? (
                      <div className="text-red-600 dark:text-red-400 text-sm">
                        ‚ùå –û—à–∏–±–∫–∞: {result.error}
                      </div>
                    ) : (
                      <div className="text-sm space-y-2">
                        <div className={result.ok ? 'text-green-600 dark:text-green-400' : 'text-orange-600 dark:text-orange-400'}>
                          {result.ok ? '‚úÖ' : '‚ö†Ô∏è'} –°—Ç–∞—Ç—É—Å: {result.status}
                        </div>
                        <div className="bg-muted p-3 rounded text-xs max-h-32 overflow-y-auto">
                          <strong className="text-foreground">–û—Ç–≤–µ—Ç:</strong>
                          <pre className="text-muted-foreground whitespace-pre-wrap mt-1">{result.response}</pre>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ */}
      {simpleResults && (
        <Card className="border-purple-200 bg-purple-50 dark:bg-purple-950/20 dark:border-purple-800">
          <CardHeader>
            <CardTitle className="text-purple-800 dark:text-purple-200">‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="bg-background p-4 rounded border">
                <div className="text-sm space-y-2">
                  <div><strong className="text-foreground">–°—Ç–∞—Ç—É—Å:</strong> <span className="text-green-600 dark:text-green-400">{simpleResults.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}</span></div>
                  <div><strong className="text-foreground">–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> <span className="text-muted-foreground">{simpleResults.message}</span></div>
                  {simpleResults.token && (
                    <div><strong className="text-foreground">–¢–æ–∫–µ–Ω:</strong> <span className="text-muted-foreground font-mono">{simpleResults.token.substring(0, 50)}...</span></div>
                  )}
                  {simpleResults.note && (
                    <div><strong className="text-foreground">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> <span className="text-muted-foreground">{simpleResults.note}</span></div>
                  )}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}