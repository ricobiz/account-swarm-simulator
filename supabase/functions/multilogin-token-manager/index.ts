import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // –ü–æ–ª—É—á–∞–µ–º automation token –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
    const automationToken = Deno.env.get('MULTILOGIN_TOKEN')

    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ MULTILOGIN_TOKEN:', automationToken ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

    if (!automationToken) {
      console.warn('‚ö†Ô∏è MULTILOGIN_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!')
      return new Response(JSON.stringify({
        success: false,
        error: 'MULTILOGIN_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        message: '–î–æ–±–∞–≤—å—Ç–µ automation token –≤ —Å–µ–∫—Ä–µ—Ç—ã Supabase',
        fix_instructions: '–ü–æ–ª—É—á–∏—Ç–µ automation token –∏–∑ Multilogin –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–∫ MULTILOGIN_TOKEN'
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    if (req.method === 'GET') {
      // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
      console.log('üìã –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ')
      
      const { data, error } = await supabase
        .from('multilogin_tokens')
        .select('*')
        .eq('is_active', true)
        .order('created_at', { ascending: false })
        .limit(1)
        .maybeSingle()

      if (data && new Date() < new Date(data.expires_at)) {
        return new Response(JSON.stringify({
          success: true,
          message: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          expires_at: data.expires_at,
          timestamp: new Date().toISOString()
        }), {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      } else {
        return new Response(JSON.stringify({
          success: false,
          message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
          timestamp: new Date().toISOString()
        }), {
          status: 404,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      }
    }

    if (req.method === 'POST') {
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å automation token –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ automation token –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
      
      try {
        const expiresAt = new Date(Date.now() + (24 * 60 * 60 * 1000)) // 24 —á–∞—Å–∞
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã
        const { error: updateError } = await supabase
          .from('multilogin_tokens')
          .update({ is_active: false })
          .neq('id', '00000000-0000-0000-0000-000000000000') // –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ

        if (updateError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', updateError)
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º automation token
        const { error: insertError } = await supabase
          .from('multilogin_tokens')
          .insert({
            email: 'automation-token',
            token: automationToken,
            expires_at: expiresAt.toISOString(),
            is_active: true
          })

        if (insertError) {
          throw insertError
        }

        console.log('‚úÖ Automation token —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
        console.log('‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:', expiresAt.toLocaleString())
        
        return new Response(JSON.stringify({
          success: true,
          message: 'Automation token —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
          expires_in_hours: 24,
          next_refresh: expiresAt.toISOString(),
          timestamp: new Date().toISOString()
        }), {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      } catch (error) {
        return new Response(JSON.stringify({
          success: false,
          error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞',
          message: error.message,
          timestamp: new Date().toISOString()
        }), {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      }
    }

    return new Response(JSON.stringify({
      success: false,
      error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
      supported_methods: ['GET', 'POST'],
      get_description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ',
      post_description: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å automation token –≤ –±–∞–∑—É'
    }), {
      status: 405,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Token Manager:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})