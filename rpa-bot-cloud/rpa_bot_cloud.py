
#!/usr/bin/env python3
"""
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π RPA –±–æ—Ç –¥–ª—è Railway
"""

import os
import json
import time
import logging
from flask import Flask, request, jsonify
import requests
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import WebDriverException, TimeoutException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('logs/rpa_bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL', 'https://izmgzstdgoswlozinmyk.supabase.co')
SUPABASE_SERVICE_KEY = os.getenv('SUPABASE_SERVICE_KEY', '')
ELEMENT_WAIT_TIMEOUT = 10

class BasicRPABot:
    def __init__(self):
        self.driver = None
        self.wait = None
        logger.info("–ë–∞–∑–æ–≤—ã–π RPA –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_browser(self):
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–∞–∑–æ–≤–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Chrome
            chrome_path = '/usr/bin/google-chrome'
            if not os.path.exists(chrome_path):
                logger.error(f"‚ùå Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {chrome_path}")
                return False
            
            logger.info(f"‚úÖ Chrome –Ω–∞–π–¥–µ–Ω: {chrome_path}")
            
            options = Options()
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Railway
            options.add_argument('--headless=new')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--window-size=1920,1080')
            options.add_argument('--disable-web-security')
            options.add_argument('--disable-features=VizDisplayCompositor')
            
            logger.info("üîß –û–ø—Ü–∏–∏ Chrome –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            # –°–æ–∑–¥–∞—ë–º –¥—Ä–∞–π–≤–µ—Ä
            logger.info("üöÄ –°–æ–∑–¥–∞—ë–º WebDriver...")
            self.driver = webdriver.Chrome(options=options)
            logger.info("‚úÖ WebDriver —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
            self.wait = WebDriverWait(self.driver, ELEMENT_WAIT_TIMEOUT)
            logger.info("‚úÖ WebDriverWait –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ—Ö–æ–¥
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä...")
            self.driver.get("https://www.google.com")
            logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω. –ó–∞–≥–æ–ª–æ–≤–æ–∫: {self.driver.title}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏
            try:
                if self.driver:
                    self.driver.quit()
            except:
                pass
            
            return False
    
    def execute_task(self, task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏"""
        task_id = task.get('taskId', 'unknown')
        logger.info(f"üìã –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {task_id}")
        
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if not self.setup_browser():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä")
            
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
            result = self._execute_actions(task)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._report_result(task_id, result)
            
            return result
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}: {e}"
            logger.error(error_msg)
            
            result = {
                'success': False,
                'error': error_msg,
                'taskId': task_id
            }
            
            self._report_result(task_id, result)
            return result
            
        finally:
            self.cleanup()
    
    def _execute_actions(self, task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
        task_id = task.get('taskId')
        actions = task.get('actions', [])
        results = []
        
        try:
            for i, action in enumerate(actions):
                action_type = action.get('type')
                logger.info(f"üéØ –î–µ–π—Å—Ç–≤–∏–µ {i+1}/{len(actions)}: {action_type}")
                
                if action_type == 'navigate':
                    url = action.get('url')
                    logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞: {url}")
                    self.driver.get(url)
                    time.sleep(2)
                    results.append(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
                    
                elif action_type == 'check_element':
                    element = action.get('element', {})
                    selector = element.get('selector')
                    
                    if selector:
                        try:
                            logger.info(f"üîç –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç: {selector}")
                            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
                            results.append(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {selector}")
                            logger.info(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {selector}")
                        except TimeoutException:
                            results.append(f"–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {selector}")
                            logger.warning(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {selector}")
                
                elif action_type == 'type':
                    element = action.get('element', {})
                    selector = element.get('selector')
                    text = element.get('text', '')
                    
                    if selector and text:
                        try:
                            logger.info(f"‚å®Ô∏è –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤: {selector}")
                            field = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                            field.clear()
                            field.send_keys(text)
                            results.append(f"–¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω –≤ {selector}")
                        except TimeoutException:
                            results.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ: {selector}")
                
                elif action_type == 'click':
                    element = action.get('element', {})
                    selector = element.get('selector')
                    
                    if selector:
                        try:
                            logger.info(f"üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ: {selector}")
                            button = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                            button.click()
                            results.append(f"–ö–ª–∏–∫ –ø–æ {selector}")
                        except TimeoutException:
                            results.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å: {selector}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                delay = action.get('delay', 1000) / 1000.0
                time.sleep(delay)
            
            return {
                'success': True,
                'taskId': task_id,
                'results': results,
                'message': f'–ó–∞–¥–∞—á–∞ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
                'browser_type': 'basic_chrome'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π: {e}")
            return {
                'success': False,
                'taskId': task_id,
                'error': str(e),
                'results': results
            }
    
    def _report_result(self, task_id, result):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Supabase"""
        try:
            if not SUPABASE_SERVICE_KEY:
                logger.warning("SUPABASE_SERVICE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return
                
            supabase_url = SUPABASE_URL.rstrip('/')
            headers = {
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {SUPABASE_SERVICE_KEY}'
            }
            
            response = requests.put(
                f"{supabase_url}/functions/v1/rpa-task",
                headers=headers,
                json={
                    'taskId': task_id,
                    'result': result
                },
                timeout=10
            )
            
            if response.ok:
                logger.info(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ {task_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Supabase")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {response.status_code} - {response.text}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.driver:
                logger.info("üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
                self.driver.quit()
                self.driver = None
                self.wait = None
                logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
rpa_bot = BasicRPABot()

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        'status': 'healthy',
        'environment': 'railway-basic',
        'version': '1.0.1-basic',
        'capabilities': ['navigate', 'click', 'type', 'check_element', 'basic_browser']
    })

@app.route('/execute', methods=['POST'])
def execute_task():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏"""
    try:
        task = request.get_json()
        
        if not task:
            return jsonify({
                'success': False,
                'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏'
            }), 400
        
        task_id = task.get('taskId')
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task_id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        result = rpa_bot.execute_task(task)
        
        return jsonify({
            'success': True,
            'message': f'–ó–∞–¥–∞—á–∞ {task_id} –ø—Ä–∏–Ω—è—Ç–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é',
            'taskId': task_id,
            'result': result,
            'environment': 'railway-basic'
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/test', methods=['GET'])
def test_bot():
    """–¢–µ—Å—Ç RPA –±–æ—Ç–∞"""
    try:
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞
        test_result = rpa_bot.setup_browser()
        
        if test_result:
            title = rpa_bot.driver.title
            current_url = rpa_bot.driver.current_url
            rpa_bot.cleanup()
            
            logger.info("‚úÖ –¢–µ—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            return jsonify({
                'success': True,
                'message': '–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ',
                'title': title,
                'url': current_url
            })
        else:
            logger.error("‚ùå –¢–µ—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –ø—Ä–æ—à–µ–ª")
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä'
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        rpa_bot.cleanup()
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs('logs', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ RPA –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"üîó Supabase URL: {SUPABASE_URL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Chrome –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    chrome_path = '/usr/bin/google-chrome'
    if os.path.exists(chrome_path):
        logger.info(f"‚úÖ Chrome –Ω–∞–π–¥–µ–Ω: {chrome_path}")
    else:
        logger.error(f"‚ùå Chrome –ù–ï –Ω–∞–π–¥–µ–Ω: {chrome_path}")
    
    app.run(host='0.0.0.0', port=port, debug=False)
