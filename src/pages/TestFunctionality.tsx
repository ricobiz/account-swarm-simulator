import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { supabase } from '@/integrations/supabase/client';
import { MultiloginTokenStatus } from '@/components/MultiloginTokenStatus';

interface TestResult {
  success: boolean;
  message: string;
  data?: any;
}

export default function TestFunctionality() {
  const [tokenResult, setTokenResult] = useState<TestResult | null>(null);
  const [rpaResult, setRpaResult] = useState<TestResult | null>(null);
  const [logs, setLogs] = useState<string[]>([]);
  const [loading, setLoading] = useState<{ [key: string]: boolean }>({});

  const log = (message: string, type: 'info' | 'success' | 'error' = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    setLogs(prev => [...prev, logMessage]);
    console.log(`[${type.toUpperCase()}] ${message}`);
  };

  const testMultiloginTokens = async () => {
    setLoading(prev => ({ ...prev, tokens: true }));
    try {
      log('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Multilogin...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { data: tokenData, error: tokenError } = await supabase
        .from('multilogin_tokens')
        .select('token, expires_at, is_active, email')
        .eq('is_active', true)
        .maybeSingle();

      if (tokenError) {
        throw new Error(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${tokenError.message}`);
      }

      if (!tokenData) {
        log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
        setTokenResult({
          success: false,
          message: '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.'
        });
        return;
      }

      const isExpired = new Date() > new Date(tokenData.expires_at);
      
      if (isExpired) {
        log('‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', 'error');
        setTokenResult({
          success: false,
          message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω".'
        });
        return;
      }

      log(`‚úÖ –¢–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω! Email: ${tokenData.email}`, 'success');
      log(`üìÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${new Date(tokenData.expires_at).toLocaleString()}`, 'info');
      
      setTokenResult({
        success: true,
        message: '–¢–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!',
        data: {
          email: tokenData.email,
          expires_at: tokenData.expires_at
        }
      });
    } catch (error: any) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: ${error.message}`, 'error');
      setTokenResult({
        success: false,
        message: error.message
      });
    } finally {
      setLoading(prev => ({ ...prev, tokens: false }));
    }
  };

  const testRPAWithToken = async () => {
    setLoading(prev => ({ ...prev, rpa: true }));
    try {
      log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RPA —Å —Ç–æ–∫–µ–Ω–æ–º Multilogin...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å
      const { data: tokenData } = await supabase
        .from('multilogin_tokens')
        .select('token, expires_at')
        .eq('is_active', true)
        .maybeSingle();

      if (!tokenData || new Date() > new Date(tokenData.expires_at)) {
        throw new Error('–¢–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ/–æ–±–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω.');
      }

      log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º RPA –∑–∞–¥–∞—á—É...');
      
      const taskId = `test_${Date.now()}`;
      const task = {
        taskId: taskId,
        url: 'https://httpbin.org/get',
        actions: [
          { type: 'navigate', url: 'https://httpbin.org/get' },
          { type: 'wait', duration: 2000 },
          { type: 'screenshot' }
        ],
        metadata: {
          platform: 'test',
          account: { username: 'test_user' }
        },
        timeout: 30
      };
      
      const { data, error } = await supabase.functions.invoke('rpa-task', {
        body: { task }
      });

      if (error) {
        throw new Error(error.message);
      }

      log(`‚úÖ RPA –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å —Ç–æ–∫–µ–Ω–æ–º!`, 'success');
      setRpaResult({
        success: true,
        message: 'RPA –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ Multilogin!',
        data: data
      });
    } catch (error: any) {
      log(`‚ùå –û—à–∏–±–∫–∞ RPA: ${error.message}`, 'error');
      setRpaResult({
        success: false,
        message: error.message
      });
    } finally {
      setLoading(prev => ({ ...prev, rpa: false }));
    }
  };

  const clearLogs = () => {
    setLogs([]);
    setTokenResult(null);
    setRpaResult(null);
    log('üßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ');
  };

  React.useEffect(() => {
    log('üéØ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞');
  }, []);

  return (
    <div className="container mx-auto p-6 space-y-6 max-w-4xl">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold mb-2">üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ Multilogin</h1>
        <p className="text-muted-foreground">
          –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ RPA —Å–∏—Å—Ç–µ–º–µ
        </p>
      </div>

      {/* –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–æ–≤ */}
      <MultiloginTokenStatus />

      <Separator />

      {/* –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */}
      <div className="grid gap-6 md:grid-cols-2">
        {/* –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Button 
              onClick={testMultiloginTokens}
              disabled={loading.tokens}
              className="w-full"
              size="lg"
            >
              {loading.tokens ? (
                <div className="flex items-center gap-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  –ü—Ä–æ–≤–µ—Ä–∫–∞...
                </div>
              ) : (
                'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω'
              )}
            </Button>

            {tokenResult && (
              <div className={`p-4 rounded-lg border ${
                tokenResult.success 
                  ? 'bg-green-50 border-green-200 dark:bg-green-950/20 dark:border-green-800' 
                  : 'bg-red-50 border-red-200 dark:bg-red-950/20 dark:border-red-800'
              }`}>
                <div className="flex items-center gap-2 mb-2">
                  <Badge variant={tokenResult.success ? 'default' : 'destructive'}>
                    {tokenResult.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}
                  </Badge>
                </div>
                <p className="text-sm font-medium">{tokenResult.message}</p>
                {tokenResult.data?.email && (
                  <p className="text-xs text-muted-foreground mt-1">
                    Email: {tokenResult.data.email}
                  </p>
                )}
              </div>
            )}
          </CardContent>
        </Card>

        {/* –¢–µ—Å—Ç RPA */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              ü§ñ –¢–µ—Å—Ç RPA —Å —Ç–æ–∫–µ–Ω–æ–º
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Button 
              onClick={testRPAWithToken}
              disabled={loading.rpa}
              className="w-full"
              size="lg"
            >
              {loading.rpa ? (
                <div className="flex items-center gap-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...
                </div>
              ) : (
                'üöÄ –¢–µ—Å—Ç RPA'
              )}
            </Button>

            {rpaResult && (
              <div className={`p-4 rounded-lg border ${
                rpaResult.success 
                  ? 'bg-green-50 border-green-200 dark:bg-green-950/20 dark:border-green-800' 
                  : 'bg-red-50 border-red-200 dark:bg-red-950/20 dark:border-red-800'
              }`}>
                <div className="flex items-center gap-2 mb-2">
                  <Badge variant={rpaResult.success ? 'default' : 'destructive'}>
                    {rpaResult.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}
                  </Badge>
                </div>
                <p className="text-sm font-medium">{rpaResult.message}</p>
                {rpaResult.data?.taskId && (
                  <p className="text-xs text-muted-foreground mt-1">
                    Task ID: {rpaResult.data.taskId}
                  </p>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* –õ–æ–≥–∏ */}
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>üìã –õ–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</CardTitle>
          <Button onClick={clearLogs} variant="outline" size="sm">
            –û—á–∏—Å—Ç–∏—Ç—å
          </Button>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-64 w-full rounded border p-4 bg-slate-950 text-green-400 font-mono text-sm">
            {logs.length === 0 ? (
              <div className="text-muted-foreground text-center py-8">
                –õ–æ–≥–∏ –ø—É—Å—Ç—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤.
              </div>
            ) : (
              logs.map((log, index) => (
                <div key={index} className="mb-1 break-words">
                  {log}
                </div>
              ))
            )}
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
}