import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { supabase } from '@/integrations/supabase/client';
import { MultiloginAuthTester } from '@/components/MultiloginAuthTester';
import { MultiloginProfileManager } from '@/components/MultiloginProfileManager';

interface TestResult {
  success: boolean;
  message: string;
  data?: any;
}

export default function TestFunctionality() {
  const [multiloginResult, setMultiloginResult] = useState<TestResult | null>(null);
  const [profileResult, setProfileResult] = useState<TestResult | null>(null);
  const [rpaResult, setRpaResult] = useState<TestResult | null>(null);
  const [secretsResult, setSecretsResult] = useState<TestResult | null>(null);
  const [logs, setLogs] = useState<string[]>([]);
  const [loading, setLoading] = useState<{ [key: string]: boolean }>({});

  const log = (message: string, type: 'info' | 'success' | 'error' = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    setLogs(prev => [...prev, logMessage]);
    console.log(`[${type.toUpperCase()}] ${message}`);
  };

  const testMultiloginTokens = async () => {
    setLoading(prev => ({ ...prev, multilogin: true }));
    try {
      log('üöÄ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ Multilogin...');
      
      const { data, error } = await supabase.functions.invoke('multilogin-token-manager', {
        body: {}
      });

      if (error) {
        throw new Error(error.message);
      }

      log(`‚úÖ –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã: ${JSON.stringify(data, null, 2)}`, 'success');
      setMultiloginResult({
        success: true,
        message: '–¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!',
        data: data
      });
    } catch (error: any) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: ${error.message}`, 'error');
      setMultiloginResult({
        success: false,
        message: error.message
      });
    } finally {
      setLoading(prev => ({ ...prev, multilogin: false }));
    }
  };

  const testMultiloginProfile = async () => {
    setLoading(prev => ({ ...prev, profile: true }));
    try {
      log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ Multilogin –ø—Ä–æ—Ñ–∏–ª—è...');
      
      const { data, error } = await supabase.functions.invoke('multilogin-api', {
        body: {
          platform: 'instagram',
          username: `test_user_${Date.now()}`,
          password: 'test_password'
        }
      });

      if (error) {
        throw new Error(error.message);
      }

      log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: ${JSON.stringify(data, null, 2)}`, 'success');
      setProfileResult({
        success: true,
        message: '–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!',
        data: data
      });
    } catch (error: any) {
      log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`, 'error');
      setProfileResult({
        success: false,
        message: error.message
      });
    } finally {
      setLoading(prev => ({ ...prev, profile: false }));
    }
  };

  const testRPATask = async () => {
    setLoading(prev => ({ ...prev, rpa: true }));
    try {
      log('üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏...');
      
      const taskId = `test_${Date.now()}`;
      const task = {
        taskId: taskId,
        url: 'https://httpbin.org/get',
        actions: [
          { type: 'navigate', url: 'https://httpbin.org/get' },
          { type: 'wait', duration: 2000 },
          { type: 'screenshot' }
        ],
        metadata: {
          platform: 'test',
          account: { username: 'test_user' }
        },
        timeout: 30
      };
      
      const { data, error } = await supabase.functions.invoke('rpa-task', {
        body: { task }
      });

      if (error) {
        throw new Error(error.message);
      }

      log(`‚úÖ RPA –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${JSON.stringify(data, null, 2)}`, 'success');
      setRpaResult({
        success: true,
        message: 'RPA –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
        data: data
      });
    } catch (error: any) {
      log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è RPA: ${error.message}`, 'error');
      setRpaResult({
        success: false,
        message: error.message
      });
    } finally {
      setLoading(prev => ({ ...prev, rpa: false }));
    }
  };

  const testSecrets = async () => {
    setLoading(prev => ({ ...prev, secrets: true }));
    try {
      log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏ Edge Function...');
      
      const { data, error } = await supabase.functions.invoke('test-secrets', {
        body: {}
      });

      if (error) {
        throw new Error(error.message);
      }

      log(`‚úÖ –¢–µ—Å—Ç —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${JSON.stringify(data, null, 2)}`, 'success');
      setSecretsResult({
        success: true,
        message: '–¢–µ—Å—Ç —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
        data: data
      });
    } catch (error: any) {
      log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤: ${error.message}`, 'error');
      setSecretsResult({
        success: false,
        message: error.message
      });
    } finally {
      setLoading(prev => ({ ...prev, secrets: false }));
    }
  };

  const testSimpleMultilogin = async () => {
    setLoading(prev => ({ ...prev, simple: true }));
    try {
      log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π Multilogin —Ñ—É–Ω–∫—Ü–∏–∏...');
      
      const { data, error } = await supabase.functions.invoke('multilogin-simple', {
        body: {}
      });

      if (error) {
        throw new Error(error.message);
      }

      log(`‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${JSON.stringify(data, null, 2)}`, 'success');
      setMultiloginResult({
        success: data.success,
        message: data.success ? '–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!' : data.error,
        data: data
      });
    } catch (error: any) {
      log(`‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: ${error.message}`, 'error');
      setMultiloginResult({
        success: false,
        message: error.message
      });
    } finally {
      setLoading(prev => ({ ...prev, simple: false }));
    }
  };

  React.useEffect(() => {
    log('üéØ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
    log('üìã –ì–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏');
  }, []);

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold mb-2">üß™ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ RPA</h1>
        <p className="text-muted-foreground">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Multilogin API –∏ Railway RPA Bot</p>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Multilogin API */}
      <MultiloginAuthTester />

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ Multilogin */}
      <MultiloginProfileManager />

      <div className="grid gap-6 md:grid-cols-1 lg:grid-cols-2">
        {/* –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-foreground">
              üë§ Multilogin –ø—Ä–æ—Ñ–∏–ª—å
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Button 
              onClick={testMultiloginProfile}
              disabled={loading.profile}
              className="w-full"
            >
              {loading.profile ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'}
            </Button>
            {profileResult && (
              <div className={`p-3 rounded ${profileResult.success ? 'bg-green-50 text-green-800 dark:bg-green-950/20 dark:text-green-200' : 'bg-red-50 text-red-800 dark:bg-red-950/20 dark:text-red-200'}`}>
                <Badge variant={profileResult.success ? 'default' : 'destructive'} className="mb-2">
                  {profileResult.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}
                </Badge>
                <p className="text-sm">{profileResult.message}</p>
                {profileResult.data?.profile_id && (
                  <p className="text-xs mt-1">ID: {profileResult.data.profile_id}</p>
                )}
              </div>
            )}
          </CardContent>
        </Card>

        {/* –¢–µ—Å—Ç RPA –∑–∞–¥–∞—á–∏ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-foreground">
              ü§ñ RPA –∑–∞–¥–∞—á–∞
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Button 
              onClick={testRPATask}
              disabled={loading.rpa}
              className="w-full"
            >
              {loading.rpa ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...' : '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É'}
            </Button>
            {rpaResult && (
              <div className={`p-3 rounded ${rpaResult.success ? 'bg-green-50 text-green-800 dark:bg-green-950/20 dark:text-green-200' : 'bg-red-50 text-red-800 dark:bg-red-950/20 dark:text-red-200'}`}>
                <Badge variant={rpaResult.success ? 'default' : 'destructive'} className="mb-2">
                  {rpaResult.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}
                </Badge>
                <p className="text-sm">{rpaResult.message}</p>
                {rpaResult.data?.taskId && (
                  <p className="text-xs mt-1">Task ID: {rpaResult.data.taskId}</p>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* –õ–æ–≥–∏ */}
      <Card>
        <CardHeader>
          <CardTitle>üìã –õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</CardTitle>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-64 w-full rounded border p-4 bg-slate-950 text-green-400 font-mono text-sm">
            {logs.map((log, index) => (
              <div key={index} className="mb-1">
                {log}
              </div>
            ))}
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
}