
#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Telegram –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
"""

import time
import logging
import random
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

logger = logging.getLogger(__name__)

class TelegramHandler:
    def __init__(self, driver, wait, behavior_simulator):
        self.driver = driver
        self.wait = wait
        self.behavior = behavior_simulator
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Telegram Web
        self.selectors = {
            'like_button': [
                'button[aria-label*="like"]',
                '.btn-reaction',
                '[data-reaction="üëç"]',
                '.reaction-button',
                'button:contains("üëç")'
            ],
            'message_container': [
                '.message',
                '.message-container',
                '[data-message-id]'
            ],
            'channel_post': [
                '.channel-post',
                '.post-container'
            ]
        }
    
    def telegram_like(self, action):
        """–õ–∞–π–∫ –ø–æ—Å—Ç–∞ –≤ Telegram —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        post_id = action.get('postId', '')
        channel = action.get('channel', '')
        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞ {post_id} –≤ –∫–∞–Ω–∞–ª–µ {channel}")
        
        try:
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ –ø–æ ID –ø–æ—Å—Ç–∞
            if post_id:
                success = self._like_by_post_id(post_id)
                if success:
                    return True
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
            success = self._like_latest_post()
            if success:
                return True
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞
            success = self._like_any_available()
            if success:
                return True
            
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–∞ –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–∞–π–∫–∞ –≤ Telegram: {e}")
            return False
    
    def _like_by_post_id(self, post_id):
        """–õ–∞–π–∫ –ø–æ ID –ø–æ—Å—Ç–∞"""
        try:
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ—Å—Ç–∞
            post_selector = f'[data-message-id="{post_id}"], [data-post-id="{post_id}"]'
            post_element = self.wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, post_selector))
            )
            
            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞ –≤ —ç—Ç–æ–º –ø–æ—Å—Ç–µ
            for like_selector in self.selectors['like_button']:
                try:
                    like_button = post_element.find_element(By.CSS_SELECTOR, like_selector)
                    if like_button.is_displayed() and like_button.is_enabled():
                        return self._perform_like_click(like_button)
                except:
                    continue
            
            return False
            
        except TimeoutException:
            logger.warning(f"–ü–æ—Å—Ç —Å ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def _like_latest_post(self):
        """–õ–∞–π–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π/–ø–æ—Å—Ç–æ–≤
            for container_selector in self.selectors['message_container'] + self.selectors['channel_post']:
                try:
                    messages = self.driver.find_elements(By.CSS_SELECTOR, container_selector)
                    if messages:
                        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        latest_message = messages[-1]
                        
                        # –°–∫—Ä–æ–ª–ª–∏–º –∫ –Ω–µ–º—É
                        self.driver.execute_script("arguments[0].scrollIntoView();", latest_message)
                        self.behavior.random_delay(500, 1500)
                        
                        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–∞
                        for like_selector in self.selectors['like_button']:
                            try:
                                like_button = latest_message.find_element(By.CSS_SELECTOR, like_selector)
                                if like_button.is_displayed() and like_button.is_enabled():
                                    return self._perform_like_click(like_button)
                            except:
                                continue
                except:
                    continue
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: {e}")
            return False
    
    def _like_any_available(self):
        """–õ–∞–π–∫ –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–Ω–æ–ø–∫–∏"""
        try:
            for like_selector in self.selectors['like_button']:
                try:
                    like_buttons = self.driver.find_elements(By.CSS_SELECTOR, like_selector)
                    
                    for button in like_buttons:
                        if button.is_displayed() and button.is_enabled():
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ —É–∂–µ –Ω–∞–∂–∞—Ç–∞
                            if not self._is_already_liked(button):
                                return self._perform_like_click(button)
                except:
                    continue
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∞–π–∫–æ–≤: {e}")
            return False
    
    def _is_already_liked(self, button):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —É–∂–µ –ª–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã –∫–Ω–æ–ø–∫–∏
            classes = button.get_attribute('class') or ''
            if 'active' in classes.lower() or 'selected' in classes.lower():
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º aria-pressed
            pressed = button.get_attribute('aria-pressed')
            if pressed == 'true':
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª–∏
            style = button.get_attribute('style') or ''
            if 'color: rgb(255' in style:  # –û–±—ã—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–µ
                return True
            
            return False
            
        except:
            return False
    
    def _perform_like_click(self, button):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∏–∫–∞ –ª–∞–π–∫–∞ —Å —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–∫—Ä—É—Ç–∏–º –∫ –∫–Ω–æ–ø–∫–µ
            self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
            self.behavior.random_delay(300, 800)
            
            # –ù–∞–≤–µ–¥–µ–º –º—ã—à—å
            from selenium.webdriver.common.action_chains import ActionChains
            ActionChains(self.driver).move_to_element(button).perform()
            self.behavior.random_delay(200, 600)
            
            # –ö–ª–∏–∫–Ω–µ–º
            button.click()
            
            # –ü–æ–¥–æ–∂–¥–µ–º –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
            self.behavior.random_delay(1000, 3000)
            
            logger.info("–õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ª–∞–π–∫–∞: {e}")
            return False
    
    def scroll_to_find_post(self, post_id, max_scrolls=10):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        for i in range(max_scrolls):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            try:
                post_selector = f'[data-message-id="{post_id}"], [data-post-id="{post_id}"]'
                self.driver.find_element(By.CSS_SELECTOR, post_selector)
                return True  # –ü–æ—Å—Ç –Ω–∞–π–¥–µ–Ω
            except:
                pass
            
            # –°–∫—Ä–æ–ª–ª–∏–º –≤–≤–µ—Ä—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤
            scroll_params = self.behavior.scroll_behavior('up', 400)
            for j, delay in enumerate(scroll_params['delays']):
                self.driver.execute_script(f"window.scrollBy(0, -{scroll_params['step_size']});")
                time.sleep(delay)
        
        return False  # –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
