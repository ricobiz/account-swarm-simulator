import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useRPAService } from '@/hooks/useRPAService';
import { useToast } from '@/hooks/use-toast';
import { PlayCircle, Loader2, Lock, Globe, CheckCircle, AlertCircle } from 'lucide-react';
import type { RPATask } from '@/types/rpa';

export const MultiloginTestButton: React.FC = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [testLog, setTestLog] = useState<string[]>([]);
  const [accountData, setAccountData] = useState({
    platform: 'telegram',
    username: '',
    password: '',
    email: ''
  });
  
  const { submitRPATask, waitForRPACompletion } = useRPAService();
  const { toast } = useToast();

  const addLog = (message: string, type: 'info' | 'success' | 'error' = 'info') => {
    const emoji = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : 'üìù';
    const logMessage = `${emoji} ${new Date().toLocaleTimeString()}: ${message}`;
    console.log(`[MULTILOGIN TEST] ${logMessage}`);
    setTestLog(prev => [...prev, logMessage]);
  };

  const runMultiloginTest = async () => {
    if (!accountData.username || !accountData.password) {
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–í–≤–µ–¥–∏—Ç–µ username –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        variant: "destructive"
      });
      return;
    }

    setIsRunning(true);
    setTestLog([]);
    
    try {
      addLog('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç Multilogin —Å –≤—Ö–æ–¥–æ–º –≤ –∞–∫–∫–∞—É–Ω—Ç');
      addLog(`üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç: ${accountData.username} (${accountData.platform})`);
      
      // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è Multilogin
      const testTask: RPATask = {
        taskId: `multilogin_test_${Date.now()}`,
        url: accountData.platform === 'telegram' ? 'https://web.telegram.org/a/' : 'https://instagram.com/accounts/login/',
        actions: [
          {
            type: 'navigate',
            url: accountData.platform === 'telegram' ? 'https://web.telegram.org/a/' : 'https://instagram.com/accounts/login/'
          },
          {
            type: 'wait',
            duration: 5000
          },
          ...(accountData.platform === 'telegram' ? [
            {
              type: 'click' as const,
              selector: 'input[name="phone_number"], input#sign-in-phone-number, input[type="tel"]'
            },
            {
              type: 'key' as const,
              text: accountData.username
            }
          ] : [
            {
              type: 'click' as const,
              selector: 'input[name="username"], input[placeholder*="username"], input[aria-label*="username"]'
            },
            {
              type: 'key' as const,
              text: accountData.username
            },
            {
              type: 'click' as const,
              selector: 'input[name="password"], input[type="password"]'
            },
            {
              type: 'key' as const,
              text: accountData.password
            }
          ]),
          {
            type: 'wait',
            duration: 2000
          },
          {
            type: 'click',
            selector: accountData.platform === 'telegram' ? 
              'button[type="submit"], .btn-primary, button:contains("Next")' :
              'button[type="submit"], button:contains("Log In"), button[class*="login"]'
          },
          {
            type: 'wait',
            duration: 8000
          }
        ],
        accountId: `multilogin_${accountData.platform}_${accountData.username}`,
        scenarioId: 'multilogin-login-test',
        blockId: 'multilogin-login-block',
        timeout: 120000, // 2 –º–∏–Ω—É—Ç—ã
        metadata: {
          platform: accountData.platform,
          action: 'login_test',
          multilogin: true,
          test_type: 'account_verification',
          account: {
            platform: accountData.platform,
            username: accountData.username,
            password: accountData.password,
            email: accountData.email
          }
        }
      };

      addLog(`üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ Multilogin: ${testTask.taskId}`);
      addLog(`üéØ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${accountData.platform.toUpperCase()}`);

      toast({
        title: "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Multilogin",
        description: `–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ ${accountData.platform} —á–µ—Ä–µ–∑ Multilogin...`
      });

      addLog('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É RPA-–±–æ—Ç—É —Å Multilogin...', 'info');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
      const submitResult = await submitRPATask(testTask);
      
      addLog(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: ${submitResult.success ? '–£—Å–ø–µ—Ö' : '–û—à–∏–±–∫–∞'}`, submitResult.success ? 'success' : 'error');
      
      if (!submitResult.success) {
        throw new Error(submitResult.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ Multilogin');
      }

      addLog('‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º Multilogin –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...', 'success');

      toast({
        title: "üì§ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", 
        description: "Multilogin —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç..."
      });

      // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
      addLog('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ (—Ç–∞–π–º–∞—É—Ç 2 –º–∏–Ω—É—Ç—ã)...', 'info');
      const result = await waitForRPACompletion(testTask.taskId, 120000);

      if (result?.success) {
        addLog('üéâ –¢–µ—Å—Ç Multilogin –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
        addLog(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: ${result.data?.multilogin_profile || 'profile_created'}`, 'success');
        addLog(`‚ö° –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result.executionTime || 'N/A'}ms`, 'info');
        
        if (result.data?.screenshot_urls) {
          addLog(`üì∏ –°–æ–∑–¥–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${result.data.screenshot_urls.length}`, 'info');
        }
        
        toast({
          title: "üéâ Multilogin —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!",
          description: "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –∏ —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
        });
      } else {
        addLog(`‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
        addLog(`‚ö†Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result?.executionTime || 'N/A'}ms`, 'info');
        
        toast({
          title: "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Multilogin",
          description: result?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ Multilogin',
          variant: "destructive"
        });
      }

    } catch (error: any) {
      addLog(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
      console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Multilogin:', error);
      
      toast({
        title: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Multilogin",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setIsRunning(false);
    }
  };

  return (
    <Card className="bg-gradient-to-r from-green-800/50 to-teal-800/50 border-green-500/30">
      <CardHeader>
        <CardTitle className="text-white flex items-center gap-2">
          <Globe className="h-5 w-5" />
          –¢–µ—Å—Ç Multilogin (–†–µ–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç)
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <p className="text-gray-300 text-sm">
          –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º Multilogin –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤—Ö–æ–¥–æ–º –≤ –∞–∫–∫–∞—É–Ω—Ç
        </p>
        
        {/* –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ */}
        <div className="grid grid-cols-1 gap-4 p-4 bg-gray-900/50 rounded-lg border border-green-500/20">
          <div>
            <Label htmlFor="platform" className="text-gray-300 flex items-center gap-2">
              <CheckCircle className="h-4 w-4" />
              –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
            </Label>
            <select
              id="platform"
              className="w-full mt-1 px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white focus:border-green-500 transition-colors"
              value={accountData.platform}
              onChange={(e) => setAccountData(prev => ({ ...prev, platform: e.target.value }))}
            >
              <option value="telegram">Telegram Web</option>
              <option value="instagram">Instagram</option>
            </select>
          </div>
          
          <div>
            <Label htmlFor="username" className="text-gray-300 flex items-center gap-2">
              <CheckCircle className="h-4 w-4" />
              {accountData.platform === 'telegram' ? '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' : 'Username'}
            </Label>
            <Input
              id="username"
              type="text"
              placeholder={accountData.platform === 'telegram' ? '+7900...' : 'username'}
              value={accountData.username}
              onChange={(e) => setAccountData(prev => ({ ...prev, username: e.target.value }))}
              className="bg-gray-800 border-gray-600 text-white focus:border-green-500"
            />
          </div>

          <div>
            <Label htmlFor="password" className="text-gray-300 flex items-center gap-2">
              <Lock className="h-4 w-4" />
              –ü–∞—Ä–æ–ª—å
            </Label>
            <Input
              id="password"
              type="password"
              placeholder="–ü–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞"
              value={accountData.password}
              onChange={(e) => setAccountData(prev => ({ ...prev, password: e.target.value }))}
              className="bg-gray-800 border-gray-600 text-white focus:border-green-500"
            />
          </div>

          <div>
            <Label htmlFor="email" className="text-gray-300">Email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
            <Input
              id="email"
              type="email"
              placeholder="email@example.com"
              value={accountData.email}
              onChange={(e) => setAccountData(prev => ({ ...prev, email: e.target.value }))}
              className="bg-gray-800 border-gray-600 text-white focus:border-green-500"
            />
          </div>
        </div>
        
        <Button
          onClick={runMultiloginTest}
          disabled={isRunning || !accountData.username || !accountData.password}
          className="w-full bg-green-600 hover:bg-green-700 disabled:opacity-50"
        >
          {isRunning ? (
            <>
              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              Multilogin –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç...
            </>
          ) : (
            <>
              <PlayCircle className="h-4 w-4 mr-2" />
              –ó–∞–ø—É—Å—Ç–∏—Ç—å Multilogin —Ç–µ—Å—Ç
            </>
          )}
        </Button>
        
        <div className="text-xs text-gray-400 bg-gray-900/30 p-3 rounded">
          <p className="font-semibold mb-2 text-green-400">üîê –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è:</p>
          <ul className="list-disc list-inside ml-2 space-y-1">
            <li>–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ Multilogin –ø—Ä–æ—Ñ–∏–ª—è</li>
            <li>–ó–∞–ø—É—Å–∫ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –±—Ä–∞—É–∑–µ—Ä–∞</li>
            <li>–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</li>
            <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞</li>
            <li>–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É</li>
            <li>–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
          </ul>
          
          <p className="font-semibold mb-2 mt-3 text-yellow-400">‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:</p>
          <ul className="list-disc list-inside ml-2 space-y-1">
            <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã</li>
            <li>–¢–æ–∫–µ–Ω Multilogin –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è</li>
            <li>–ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã</li>
            <li>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –æ–±–ª–∞–∫–µ</li>
          </ul>
        </div>

        {/* –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ */}
        {testLog.length > 0 && (
          <div className="mt-4 p-3 bg-gray-900 rounded-lg border border-green-500/20">
            <p className="text-xs text-gray-400 mb-2 flex items-center gap-2">
              <AlertCircle className="h-4 w-4" />
              üìã –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Multilogin —Ç–µ—Å—Ç–∞:
            </p>
            <div className="text-xs text-gray-300 space-y-1 max-h-48 overflow-y-auto">
              {testLog.map((log, index) => (
                <div 
                  key={index} 
                  className={`font-mono p-1 rounded ${
                    log.includes('‚úÖ') ? 'bg-green-900/20' : 
                    log.includes('‚ùå') ? 'bg-red-900/20' : 
                    'bg-gray-800/30'
                  }`}
                >
                  {log}
                </div>
              ))}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};