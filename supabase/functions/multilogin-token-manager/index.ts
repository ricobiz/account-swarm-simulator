import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { crypto } from "https://deno.land/std@0.224.0/crypto/mod.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// MD5 hash function implementation using Deno std crypto
async function md5Hash(text: string): Promise<string> {
  try {
    const encoder = new TextEncoder();
    const data = encoder.encode(text);
    const hashBuffer = await crypto.subtle.digest("MD5", data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    console.log('‚úÖ MD5 —Ö—ç—à —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    return hashHex;
  } catch (error) {
    console.warn('‚ö†Ô∏è MD5 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    // Fallback - return password as is
    return text;
  }
}

// Function to get token from Multilogin API
async function getMultiloginToken(email: string, password: string): Promise<string> {
  console.log('üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Multilogin API...');
  console.log('üìß Email:', email);
  
  // Hash password using MD5
  const hashedPassword = await md5Hash(password);
  console.log('üîê –ü–∞—Ä–æ–ª—å —Ö—ç—à–∏—Ä–æ–≤–∞–Ω');
  
  const requestBody = JSON.stringify({
    email: email,
    password: hashedPassword
  });
  
  const response = await fetch('https://api.multilogin.com/user/signin', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    },
    body: requestBody
  });
  
  console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API:', response.status);
  
  if (!response.ok) {
    const errorText = await response.text();
    console.error('‚ùå –û—à–∏–±–∫–∞ API:', errorText);
    throw new Error(`API –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`);
  }
  
  const responseData = await response.json();
  console.log('üìÑ –û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω');
  
  // Extract token from different possible fields
  const token = responseData.data?.token || responseData.access_token || responseData.token;
  
  if (!token) {
    console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ:', responseData);
    throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API');
  }
  
  console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!');
  return token;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    console.log('üîÑ multilogin-token-manager: –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–æ–∫–µ–Ω–æ–≤...')
    
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // –ü–æ–ª—É—á–∞–µ–º email –∏ –ø–∞—Ä–æ–ª—å –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Supabase
    const email = Deno.env.get('MULTILOGIN_EMAIL')
    const password = Deno.env.get('MULTILOGIN_PASSWORD')

    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ credentials:')
    console.log('üìß MULTILOGIN_EMAIL:', email ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    console.log('üîê MULTILOGIN_PASSWORD:', password ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

    if (!email || !password) {
      console.warn('‚ö†Ô∏è Credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!')
      return new Response(JSON.stringify({
        success: false,
        error: 'Multilogin credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
        message: '–î–æ–±–∞–≤—å—Ç–µ MULTILOGIN_EMAIL –∏ MULTILOGIN_PASSWORD –≤ —Å–µ–∫—Ä–µ—Ç—ã Supabase'
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    if (req.method === 'POST') {
      console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...')
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
        const newToken = await getMultiloginToken(email, password);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è - 25 –º–∏–Ω—É—Ç –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const expiresAt = new Date(Date.now() + (25 * 60 * 1000)); // 25 –º–∏–Ω—É—Ç
        
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã
        const { error: updateError } = await supabase
          .from('multilogin_tokens')
          .update({ is_active: false })
          .eq('email', email)

        if (updateError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', updateError)
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        const { error: insertError } = await supabase
          .from('multilogin_tokens')
          .insert({
            email: email,
            token: newToken,
            expires_at: expiresAt.toISOString(),
            is_active: true
          })

        if (insertError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', insertError)
          return new Response(JSON.stringify({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
            message: insertError.message,
            timestamp: new Date().toISOString()
          }), {
            status: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          })
        }

        console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
        console.log('‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:', expiresAt.toLocaleString())
        
        return new Response(JSON.stringify({
          success: true,
          message: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
          token_type: 'auto_refresh_token',
          expires_at: expiresAt.toISOString(),
          note: '–¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 25 –º–∏–Ω—É—Ç',
          timestamp: new Date().toISOString()
        }), {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
        
      } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
        
        return new Response(JSON.stringify({
          success: false,
          error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞',
          message: error.message,
          timestamp: new Date().toISOString()
        }), {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      }
    }

    return new Response(JSON.stringify({
      success: false,
      error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
      supported_methods: ['POST'],
      post_description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Multilogin API',
      instructions: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ MULTILOGIN_EMAIL –∏ MULTILOGIN_PASSWORD –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Supabase.'
    }), {
      status: 405,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Token Manager:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})