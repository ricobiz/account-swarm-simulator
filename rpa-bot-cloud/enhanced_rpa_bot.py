
#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π RPA –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Multilogin
"""

import os
import sys
import logging
import traceback
from flask import Flask, request, jsonify
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import TimeoutException, WebDriverException
import time
import json
import requests
from multilogin_integration import MultiloginManager
from config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

class EnhancedRPABot:
    def __init__(self):
        self.driver = None
        self.multilogin = None
        self.current_profile_id = None
        self.init_multilogin()
        
    def init_multilogin(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Multilogin"""
        try:
            multilogin_token = os.getenv('MULTILOGIN_TOKEN')
            if multilogin_token:
                self.multilogin = MultiloginManager(multilogin_token)
                if self.multilogin.check_connection():
                    logger.info("‚úÖ Multilogin —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    self.multilogin.decode_token_info()
                else:
                    logger.warning("‚ö†Ô∏è Multilogin –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–±—ã—á–Ω—ã–π Chrome")
            else:
                logger.info("‚ÑπÔ∏è –¢–æ–∫–µ–Ω Multilogin –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π Chrome")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Multilogin: {e}")

    def setup_chrome_driver(self, account_data=None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Multilogin –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.multilogin and account_data:
                profile_id = self.multilogin.get_profile_for_account(account_data)
                if profile_id:
                    profile_info = self.multilogin.start_profile(profile_id)
                    if profile_info:
                        self.current_profile_id = profile_id
                        driver = self.multilogin.get_selenium_driver(profile_id)
                        if driver:
                            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Multilogin –±—Ä–∞—É–∑–µ—Ä")
                            return driver
            
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π Chrome —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π Chrome —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º")
            return self.setup_regular_chrome()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return self.setup_regular_chrome()

    def setup_regular_chrome(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ Chrome —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–æ–º"""
        options = Options()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-gpu')
        options.add_argument('--disable-web-security')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        # –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        options.add_argument('--disable-extensions-except')
        options.add_argument('--disable-plugins-discovery')
        options.add_argument('--disable-bundled-ppapi-flash')
        options.add_argument('--disable-ipc-flooding-protection')
        options.add_argument('--enable-features=NetworkService,NetworkServiceLogging')
        options.add_argument('--disable-features=VizDisplayCompositor')
        
        # User Agent –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        options.add_argument('--window-size=1920,1080')
        
        # –î–ª—è Railway –∏ –æ–±–ª–∞—á–Ω—ã—Ö —Å—Ä–µ–¥
        if os.getenv('RAILWAY_ENVIRONMENT') or os.getenv('HEROKU_APP_NAME'):
            options.add_argument('--headless=new')
            options.add_argument('--virtual-time-budget=60000')
            options.add_argument('--disable-background-timer-throttling')
            options.add_argument('--disable-renderer-backgrounding')
            options.add_argument('--disable-backgrounding-occluded-windows')
        
        # –ü—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        proxy = get_random_proxy()
        if proxy:
            options.add_argument(f'--proxy-server={proxy}')
            
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º chromedriver
            driver = webdriver.Chrome(options=options)
        except Exception as e:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º Chrome
                chrome_bin = os.getenv('CHROME_BIN', '/usr/bin/google-chrome')
                options.binary_location = chrome_bin
                driver = webdriver.Chrome(options=options)
            except Exception as e2:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Chrome: {e2}")
                raise
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ JavaScript
        driver.execute_cdp_cmd('Page.addScriptToEvaluateOnNewDocument', {
            'source': '''
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined,
                });
                
                window.chrome = {
                    runtime: {},
                };
                
                Object.defineProperty(navigator, 'languages', {
                    get: () => ['en-US', 'en'],
                });
                
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5],
                });
            '''
        })
        
        return driver

    def human_like_action(self, action_type='click', duration=None):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        if duration is None:
            duration = random.uniform(MIN_ACTION_DELAY/1000, MAX_ACTION_DELAY/1000)
        time.sleep(duration)

    def human_like_type(self, element, text):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
        for char in text:
            element.send_keys(char)
            time.sleep(random.uniform(TYPING_SPEED_MIN, TYPING_SPEED_MAX))

    def execute_telegram_like(self, post_url, emoji='üëç'):
        """–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∞–π–∫–∞ –≤ Telegram"""
        try:
            logger.info(f"üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Telegram –ø–æ—Å—Ç—É: {post_url}")
            self.driver.get(post_url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            self.human_like_action('wait', 3)
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–∞–∫—Ü–∏–∏
            possible_selectors = [
                f"//button[contains(@class, 'ReactionButton') and .//*[contains(text(), '{emoji}')]]",
                f"//button[.//*[contains(text(), '{emoji}')]]",
                f"//div[contains(@class, 'reaction') and contains(text(), '{emoji}')]",
                f"//span[contains(text(), '{emoji}')]/..",
                f"//*[contains(text(), '{emoji}')]"
            ]
            
            reaction_button = None
            for selector in possible_selectors:
                try:
                    reaction_button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏: {selector}")
                    break
                except TimeoutException:
                    continue
            
            if not reaction_button:
                logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥")
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                buttons = self.driver.find_elements(By.TAG_NAME, "button")
                for button in buttons:
                    try:
                        if emoji in button.get_attribute('innerHTML'):
                            reaction_button = button
                            break
                    except:
                        continue
            
            if reaction_button:
                # –°–∫—Ä–æ–ª–ª–∏–º –∫ –∫–Ω–æ–ø–∫–µ
                self.driver.execute_script("arguments[0].scrollIntoView(true);", reaction_button)
                self.human_like_action('scroll', 1)
                
                # –ö–ª–∏–∫–∞–µ–º
                ActionChains(self.driver).move_to_element(reaction_button).click().perform()
                self.human_like_action('click', 2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                try:
                    WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, ".ReactionButton--chosen, .reaction-chosen, .active"))
                    )
                    logger.info("‚úÖ –õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!")
                    return True
                except TimeoutException:
                    logger.info("‚ÑπÔ∏è –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
                    return True
                    
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Ä–µ–∞–∫—Ü–∏–∏")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∞–π–∫–∞: {e}")
            return False

    def execute_action(self, action):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            action_type = action.get('type')
            logger.info(f"üé¨ –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: {action_type}")
            
            if action_type == 'navigate':
                url = action.get('url')
                logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
                self.driver.get(url)
                self.human_like_action('navigate', 2)
                
            elif action_type == 'wait':
                duration = action.get('duration', 2000) / 1000
                logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {duration} —Å–µ–∫")
                time.sleep(duration)
                
            elif action_type == 'telegram_like':
                emoji = action.get('emoji', 'üëç')
                post_url = action.get('url') or self.driver.current_url
                return self.execute_telegram_like(post_url, emoji)
                
            elif action_type == 'click':
                selector = action.get('selector')
                element = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                )
                ActionChains(self.driver).move_to_element(element).click().perform()
                self.human_like_action('click')
                
            elif action_type == 'type':
                selector = action.get('selector')
                text = action.get('text', '')
                element = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                )
                if action.get('clearFirst', True):
                    element.clear()
                self.human_like_type(element, text)
                
            elif action_type == 'scroll':
                x = action.get('x', 0)
                y = action.get('y', 500)
                self.driver.execute_script(f"window.scrollBy({x}, {y});")
                self.human_like_action('scroll')
                
            elif action_type == 'check_element':
                selector = action.get('selector')
                try:
                    WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                    logger.info(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {selector}")
                    return True
                except TimeoutException:
                    logger.warning(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {selector}")
                    return False
                    
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action_type}: {e}")
            return False

    def execute_rpa_task(self, task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏"""
        task_id = task.get('taskId')
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ RPA –∑–∞–¥–∞—á–∏: {task_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.update_task_status(task_id, 'processing', '–ó–∞–ø—É—Å–∫ RPA –∑–∞–¥–∞—á–∏')
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
            account_data = {
                'username': task.get('accountId', 'test-account'),
                'platform': task.get('metadata', {}).get('platform', 'web')
            }
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            self.driver = self.setup_chrome_driver(account_data)
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            initial_url = task.get('url')
            if initial_url:
                logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {initial_url}")
                self.driver.get(initial_url)
                time.sleep(3)
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
            actions = task.get('actions', [])
            success_count = 0
            
            for i, action in enumerate(actions):
                logger.info(f"üìù –î–µ–π—Å—Ç–≤–∏–µ {i+1}/{len(actions)}: {action.get('type')}")
                
                if self.execute_action(action):
                    success_count += 1
                    self.update_task_status(
                        task_id, 
                        'processing', 
                        f'–í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count}/{len(actions)} –¥–µ–π—Å—Ç–≤–∏–π'
                    )
                else:
                    logger.warning(f"‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            if success_count == len(actions):
                logger.info("‚úÖ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                self.update_task_status(
                    task_id, 
                    'completed', 
                    '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
                    {'success': True, 'actions_completed': success_count}
                )
                return True
            else:
                logger.info(f"‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count}/{len(actions)} –¥–µ–π—Å—Ç–≤–∏–π")
                self.update_task_status(
                    task_id, 
                    'completed', 
                    f'–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ ({success_count}/{len(actions)})',
                    {'success': True, 'actions_completed': success_count, 'total_actions': len(actions)}
                )
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            self.update_task_status(
                task_id, 
                'failed', 
                f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}',
                {'success': False, 'error': str(e)}
            )
            return False
            
        finally:
            self.cleanup()

    def update_task_status(self, task_id, status, message, result_data=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ Supabase"""
        try:
            supabase_url = os.getenv('SUPABASE_URL')
            supabase_key = os.getenv('SUPABASE_SERVICE_KEY')
            
            if not supabase_url or not supabase_key:
                logger.warning("Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
                return
                
            headers = {
                'apikey': supabase_key,
                'Authorization': f'Bearer {supabase_key}',
                'Content-Type': 'application/json'
            }
            
            update_data = {
                'status': status,
                'updated_at': 'now()'
            }
            
            if result_data:
                update_data['result_data'] = result_data
            
            response = requests.patch(
                f"{supabase_url}/rest/v1/rpa_tasks?task_id=eq.{task_id}",
                headers=headers,
                json=update_data,
                timeout=10
            )
            
            if response.status_code == 204:
                logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {status} - {message}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ Supabase: {e}")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.driver:
                self.driver.quit()
                self.driver = None
                
            if self.multilogin and self.current_profile_id:
                self.multilogin.stop_profile(self.current_profile_id)
                self.current_profile_id = None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RPA –±–æ—Ç–∞
rpa_bot = EnhancedRPABot()

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        status = {
            'status': 'ok',
            'timestamp': time.time(),
            'version': BOT_VERSION,
            'environment': ENVIRONMENT,
            'multilogin': rpa_bot.multilogin is not None,
            'chrome_available': True
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Chrome
        try:
            options = Options()
            options.add_argument('--headless=new')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            test_driver = webdriver.Chrome(options=options)
            test_driver.quit()
        except:
            status['chrome_available'] = False
            
        return jsonify(status)
    except Exception as e:
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500

@app.route('/execute', methods=['POST'])
def execute_rpa():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RPA –∑–∞–¥–∞—á–∏"""
    try:
        task = request.json
        task_id = task.get('taskId')
        
        logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–∞ RPA –∑–∞–¥–∞—á–∞: {task_id}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
        if not task_id:
            return jsonify({
                'success': False,
                'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç taskId'
            }), 400
            
        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
        success = rpa_bot.execute_rpa_task(task)
        
        return jsonify({
            'success': success,
            'taskId': task_id,
            'message': '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' if success else '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏'
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API /execute: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/multilogin/status', methods=['GET'])
def multilogin_status():
    """–°—Ç–∞—Ç—É—Å Multilogin"""
    try:
        if not rpa_bot.multilogin:
            return jsonify({
                'connected': False,
                'error': 'Multilogin –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            })
            
        token_info = rpa_bot.multilogin.decode_token_info()
        profiles = rpa_bot.multilogin.get_profiles()
        
        return jsonify({
            'connected': True,
            'workspace_id': token_info.get('workspaceID'),
            'email': token_info.get('email'),
            'plan': token_info.get('planName'),
            'profiles_count': len(profiles),
            'active_profiles': len(rpa_bot.multilogin.active_profiles)
        })
        
    except Exception as e:
        return jsonify({
            'connected': False,
            'error': str(e)
        }), 500

if __name__ == '__main__':
    import random
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced RPA Bot —Å Multilogin")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Multilogin –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if rpa_bot.multilogin:
        logger.info("‚úÖ Multilogin –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
    else:
        logger.info("‚ÑπÔ∏è –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ–±—ã—á–Ω–æ–≥–æ Chrome")
    
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=False)
