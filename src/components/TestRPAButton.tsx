import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useRPAService } from '@/hooks/useRPAService';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { PlayCircle, Loader2, Heart, TestTube, Settings } from 'lucide-react';
import type { RPATask } from '@/types/rpa';

export const TestRPAButton: React.FC = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [testLog, setTestLog] = useState<string[]>([]);
  const { submitRPATask, waitForRPACompletion } = useRPAService();
  const { toast } = useToast();

  const addLog = (message: string) => {
    console.log(`[RPA TEST] ${message}`);
    setTestLog(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const runTelegramLikeTest = async () => {
    setIsRunning(true);
    setTestLog([]);
    
    try {
      addLog('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ª–∞–π–∫–∞ –≤ Telegram');
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞ –≤ Telegram
      const testTask: RPATask = {
        taskId: `telegram_like_${Date.now()}`,
        url: 'https://t.me/attheheight/530',
        actions: [
          {
            type: 'navigate',
            url: 'https://t.me/attheheight/530'
          },
          {
            type: 'wait',
            duration: 4000
          },
          {
            type: 'telegram_like',
            emoji: 'üëç',
            selector: '//button[.//*[contains(text(), "üëç")]]'
          },
          {
            type: 'wait',
            duration: 2000
          },
          {
            type: 'check_element',
            selector: '.ReactionButton--chosen',
            description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∞–π–∫–∞'
          }
        ],
        accountId: 'telegram-test-account',
        scenarioId: 'telegram-like-scenario',
        blockId: 'telegram-like-block',
        timeout: 45000,
        metadata: {
          platform: 'telegram',
          action: 'like',
          emoji: 'üëç',
          postUrl: 'https://t.me/attheheight/530'
        }
      };

      addLog(`üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –ª–∞–π–∫–∞ Telegram: ${testTask.taskId}`);
      addLog(`üéØ –¶–µ–ª–µ–≤–æ–π –ø–æ—Å—Ç: https://t.me/attheheight/530`);
      addLog(`‚ù§Ô∏è –†–µ–∞–∫—Ü–∏—è: üëç`);

      toast({
        title: "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ª–∞–π–∫–∞ Telegram",
        description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É RPA-–±–æ—Ç—É –¥–ª—è –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞..."
      });

      addLog('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É RPA-–±–æ—Ç—É...');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
      const submitResult = await submitRPATask(testTask);
      
      addLog(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: ${JSON.stringify(submitResult)}`);
      
      if (!submitResult.success) {
        throw new Error(submitResult.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ –ª–∞–π–∫–∞');
      }

      addLog('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∂–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª–∞–π–∫–∞...');

      toast({
        title: "üì§ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
        description: "RPA-–±–æ—Ç —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫ –≤ Telegram..."
      });

      // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      addLog('‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ª–∞–π–∫–∞ (—Ç–∞–π–º–∞—É—Ç 45 —Å–µ–∫—É–Ω–¥)...');
      const result = await waitForRPACompletion(testTask.taskId, 45000);

      addLog(`üìã –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(result)}`);

      if (result?.success) {
        addLog('üéâ –¢–µ—Å—Ç –ª–∞–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        toast({
          title: "üéâ –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
          description: "RPA-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ –≤ Telegram",
        });
      } else {
        addLog(`‚ùå –¢–µ—Å—Ç –ª–∞–π–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        toast({
          title: "‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∞–π–∫–∞",
          description: result?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –≤ Telegram',
          variant: "destructive"
        });
      }

    } catch (error: any) {
      addLog(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–∞–π–∫–∞: ${error.message}`);
      console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ª–∞–π–∫–∞ Telegram:', error);
      
      toast({
        title: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ª–∞–π–∫–∞",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setIsRunning(false);
    }
  };

  const runBasicTest = async () => {
    setIsRunning(true);
    setTestLog([]);
    
    try {
      addLog('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç RPA —Å–∏—Å—Ç–µ–º—ã');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Railway –±–æ—Ç–∞
      addLog('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Railway –±–æ—Ç–∞...');
      try {
        const { data: statusData, error: statusError } = await supabase.functions.invoke('rpa-bot-status');
        addLog(`üìä –°—Ç–∞—Ç—É—Å Railway: ${JSON.stringify(statusData)}`);
        if (statusError) {
          addLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Railway: ${JSON.stringify(statusError)}`);
        }
      } catch (error: any) {
        addLog(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Railway: ${error.message}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã
      addLog('üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã...');
      try {
        const { data: tokenData, error: tokenError } = await supabase.functions.invoke('multilogin-token-manager');
        addLog(`üé´ –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–æ–≤: ${JSON.stringify(tokenData)}`);
        if (tokenError) {
          addLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: ${JSON.stringify(tokenError)}`);
        }
      } catch (error: any) {
        addLog(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: ${error.message}`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
      const testTask: RPATask = {
        taskId: `test_${Date.now()}`,
        url: 'https://httpbin.org/get',
        actions: [
          {
            type: 'navigate',
            url: 'https://httpbin.org/get'
          },
          {
            type: 'wait',
            duration: 2000
          },
          {
            type: 'scroll',
            x: 0,
            y: 100
          },
          {
            type: 'wait',
            duration: 1000
          }
        ],
        accountId: 'test-account',
        scenarioId: 'test-scenario',
        blockId: 'test-block',
        timeout: 30000
      };

      addLog(`–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: ${testTask.taskId}`);

      toast({
        title: "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π RPA –∑–∞–¥–∞—á–∏",
        description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É RPA-–±–æ—Ç—É..."
      });

      addLog('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É RPA-–±–æ—Ç—É...');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
      const submitResult = await submitRPATask(testTask);
      
      addLog(`üì• –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: ${JSON.stringify(submitResult)}`);
      
      if (!submitResult.success) {
        throw new Error(submitResult.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏');
      }

      addLog('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∂–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...');

      toast({
        title: "üì§ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
        description: "–û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è RPA-–±–æ—Ç–æ–º..."
      });

      // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      addLog('‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥)...');
      const result = await waitForRPACompletion(testTask.taskId, 30000);

      addLog(`üìã –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(result)}`);

      if (result?.success) {
        addLog('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        toast({
          title: "üéâ RPA —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!",
          description: result.message || '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.'
        });
      } else {
        addLog(`‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        toast({
          title: "‚ùå RPA —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π",
          description: result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          variant: "destructive"
        });
      }

    } catch (error: any) {
      addLog(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      console.error('üí• –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ RPA:', error);
      
      toast({
        title: "üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞",
        description: `${error.message}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.`,
        variant: "destructive"
      });
    } finally {
      setIsRunning(false);
    }
  };

  return (
    <Card className="bg-gradient-to-r from-purple-800/50 to-blue-800/50 border-purple-500/30">
      <CardHeader>
        <CardTitle className="text-white flex items-center gap-2">
          <PlayCircle className="h-5 w-5" />
          –¢–µ—Å—Ç RPA —Å–∏—Å—Ç–µ–º—ã
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <p className="text-gray-300 text-sm">
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RPA-–±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        </p>
        
        <div className="space-y-3">
          <Button
            onClick={runTelegramLikeTest}
            disabled={isRunning}
            className="w-full bg-blue-600 hover:bg-blue-700"
          >
            {isRunning ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                –°—Ç–∞–≤–∏–º –ª–∞–π–∫...
              </>
            ) : (
              <>
                <Heart className="h-4 w-4 mr-2" />
                –¢–µ—Å—Ç –ª–∞–π–∫–∞ –≤ Telegram
              </>
            )}
          </Button>

          <Button
            onClick={async () => {
              setIsRunning(true);
              setTestLog([]);
              addLog('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º—É—é –ø—Ä–æ–≤–µ—Ä–∫—É RPA –±–æ—Ç–∞...');
              
              try {
                const { data, error } = await supabase.functions.invoke('test-rpa-direct');
                
                if (error) {
                  addLog(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏: ${error.message}`);
                  toast({
                    title: "–û—à–∏–±–∫–∞",
                    description: `–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é: ${error.message}`,
                    variant: "destructive",
                  });
                  return;
                }
                
                addLog('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä—è–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:');
                addLog(`üåê RPA Endpoint: ${data.rpa_endpoint}`);
                addLog(`üíö Health Check: ${data.health_check?.status || 'ERROR'}`);
                addLog(`üß™ RPA Test Success: ${data.rpa_test?.success || false}`);
                addLog(`üîó Multilogin Connected: ${data.multilogin_status?.connected || false}`);
                
                if (data.rpa_test?.screenshot) {
                  addLog('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!');
                } else {
                  addLog('‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω');
                }
                
                if (data.rpa_test?.error) {
                  addLog(`‚ùå RPA Error: ${data.rpa_test.error}`);
                }
                
                toast({
                  title: data.success ? "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" : "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏",
                  description: data.success ? "–ü—Ä–æ–≤–µ—Ä–∫–∞ RPA –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ",
                  variant: data.success ? "default" : "destructive",
                });
                
              } catch (error: any) {
                addLog(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
                toast({
                  title: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                  description: `${error.message}`,
                  variant: "destructive",
                });
              } finally {
                setIsRunning(false);
              }
            }}
            disabled={isRunning}
            className="w-full bg-orange-600 hover:bg-orange-700"
          >
            {isRunning ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                –ü—Ä–æ–≤–µ—Ä—è–µ–º...
              </>
            ) : (
              <>
                <Settings className="h-4 w-4 mr-2" />
                –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ RPA –±–æ—Ç–∞
              </>
            )}
          </Button>

          <Button
            onClick={runBasicTest}
            disabled={isRunning}
            variant="outline"
            className="w-full border-purple-500 text-purple-300 hover:bg-purple-800"
          >
            {isRunning ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...
              </>
            ) : (
              <>
                <TestTube className="h-4 w-4 mr-2" />
                –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç RPA
              </>
            )}
          </Button>
        </div>
        
        <div className="text-xs text-gray-400">
          <p className="font-semibold mb-2">üéØ –¢–µ—Å—Ç –ª–∞–π–∫–∞ Telegram:</p>
          <ul className="list-disc list-inside ml-2 space-y-1">
            <li>–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–æ—Å—Ç t.me/attheheight/530</li>
            <li>–ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏ üëç</li>
            <li>–ö–ª–∏–∫ –ø–æ –ª–∞–π–∫—É</li>
            <li>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∞–π–∫–∞</li>
          </ul>
          
          <p className="font-semibold mb-2 mt-3">‚ö° –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç:</p>
          <ul className="list-disc list-inside ml-2 space-y-1">
            <li>–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ httpbin.org/get</li>
            <li>–ë–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –±—Ä–∞—É–∑–µ—Ä–∞</li>
            <li>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏</li>
          </ul>
        </div>

        {/* –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ */}
        {testLog.length > 0 && (
          <div className="mt-4 p-3 bg-gray-900 rounded-lg">
            <p className="text-xs text-gray-400 mb-2">üìã –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</p>
            <div className="text-xs text-gray-300 space-y-1 max-h-40 overflow-y-auto">
              {testLog.map((log, index) => (
                <div key={index} className="font-mono">{log}</div>
              ))}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};
