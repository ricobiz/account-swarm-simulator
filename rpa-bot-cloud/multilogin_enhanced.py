#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Multilogin API –¥–ª—è RPA —Å–∏—Å—Ç–µ–º—ã
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import requests
import json
import time
import logging
from typing import Dict, Any, Optional, List
import jwt
from datetime import datetime, timedelta
import os
import subprocess
import psutil

logger = logging.getLogger(__name__)

class MultiloginEnhanced:
    def __init__(self, token: str):
        self.token = token
        self.base_url = "https://api.multilogin.com"
        self.local_url = "http://127.0.0.1:35000"
        self.headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        self.workspace_id = None
        self.active_profiles = {}
        self.profile_cache = {}
        self.app_running = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.decode_token_info()
        self.ensure_app_running()
        
    def decode_token_info(self) -> Dict[str, Any]:
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ workspace"""
        try:
            decoded = jwt.decode(self.token, options={"verify_signature": False})
            self.workspace_id = decoded.get('workspaceID')
            
            logger.info(f"üîë Multilogin Token Info:")
            logger.info(f"   Workspace ID: {self.workspace_id}")
            logger.info(f"   Plan: {decoded.get('planName', 'Unknown')}")
            logger.info(f"   Email: {decoded.get('email', 'Unknown')}")
            logger.info(f"   User ID: {decoded.get('userID', 'Unknown')}")
            logger.info(f"   Expires: {datetime.fromtimestamp(decoded.get('exp', 0))}")
            
            return decoded
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return {}

    def ensure_app_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Multilogin –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if self.check_local_api():
                logger.info("‚úÖ Multilogin –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
                self.app_running = True
                return True
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Multilogin –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            
            # –í –æ–±–ª–∞—á–Ω–æ–π —Å—Ä–µ–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            for attempt in range(30):  # 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
                if self.check_local_api():
                    logger.info("‚úÖ Multilogin –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
                    self.app_running = True
                    return True
                time.sleep(1)
            
            logger.warning("‚ö†Ô∏è Multilogin –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å API")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Multilogin: {e}")
            return False

    def check_local_api(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API"""
        try:
            response = requests.get(f"{self.local_url}/api/v1/profile/list", timeout=5)
            return response.status_code == 200
        except:
            return False

    def check_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Multilogin API"""
        try:
            response = requests.get(
                f"{self.base_url}/user/workspaces",
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                workspaces = response.json()
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Multilogin API —É—Å–ø–µ—à–Ω–æ. Workspaces: {len(workspaces)}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Multilogin API: {response.status_code}")
                logger.error(f"Response: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def get_profiles(self, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        try:
            params = {
                'limit': limit,
                'skip': 0
            }
            
            response = requests.get(
                f"{self.base_url}/profile",
                headers=self.headers,
                params=params,
                timeout=15
            )
            
            if response.status_code == 200:
                profiles = response.json()
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}")
                
                # –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
                for profile in profiles:
                    self.profile_cache[profile.get('uuid')] = profile
                    
                return profiles
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: {response.status_code}")
                logger.error(f"Response: {response.text}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
            return []

    def create_profile(self, account_data: Dict[str, Any]) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            platform = account_data.get('platform', 'web')
            username = account_data.get('username', 'user')
            proxy_config = account_data.get('proxy', {})
            
            profile_name = f"RPA_{platform}_{username}_{int(time.time())}"
            
            profile_data = {
                "name": profile_name,
                "browser": "mimic",
                "os": "win",
                "navigator": {
                    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                    "resolution": "1920x1080",
                    "language": "en-US,en;q=0.9",
                    "platform": "Win32",
                    "doNotTrack": False,
                    "hardwareConcurrency": 8,
                    "deviceMemory": 8
                },
                "storage": {
                    "local": True,
                    "extensions": True,
                    "bookmarks": True,
                    "history": True,
                    "passwords": True
                },
                "proxy": self._prepare_proxy_config(proxy_config),
                "dns": [],
                "plugins": {
                    "flash": False,
                    "pdf": True
                },
                "timezone": {
                    "mode": "auto"
                },
                "geolocation": {
                    "mode": "auto"
                },
                "audioContext": {
                    "mode": "noise"
                },
                "canvas": {
                    "mode": "noise"
                },
                "webgl": {
                    "mode": "noise"
                },
                "webglInfo": {
                    "mode": "mask"
                },
                "clientRects": {
                    "mode": "noise"
                },
                "notes": f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –¥–ª—è RPA –∞–∫–∫–∞—É–Ω—Ç–∞ {username} –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ {platform}",
                "tags": ["RPA", platform, "auto-created"]
            }
            
            response = requests.post(
                f"{self.base_url}/profile",
                headers=self.headers,
                json=profile_data,
                timeout=30
            )
            
            if response.status_code == 201:
                profile = response.json()
                profile_id = profile.get('uuid')
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile_id} ({profile_name})")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                self.profile_cache[profile_id] = profile
                return profile_id
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {response.status_code}")
                logger.error(f"Response: {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return None

    def _prepare_proxy_config(self, proxy_config: Dict) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏"""
        if not proxy_config or not proxy_config.get('enabled', False):
            return {"type": "none"}
        
        proxy_type = proxy_config.get('type', 'http').lower()
        
        config = {
            "type": proxy_type,
            "host": proxy_config.get('host', ''),
            "port": proxy_config.get('port', 8080)
        }
        
        if proxy_config.get('username'):
            config["username"] = proxy_config.get('username')
            config["password"] = proxy_config.get('password', '')
            
        return config

    def start_profile(self, profile_id: str, automation: bool = True) -> Optional[Dict[str, Any]]:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            if not self.app_running:
                logger.error("‚ùå Multilogin –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
                return None
                
            params = {
                'automation': 'true' if automation else 'false',
                'profileId': profile_id
            }
            
            response = requests.get(
                f"{self.local_url}/api/v1/profile/start",
                params=params,
                timeout=60
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('status') == 'OK':
                    selenium_port = data.get('value')
                    
                    self.active_profiles[profile_id] = {
                        'port': selenium_port,
                        'started_at': datetime.now(),
                        'automation': automation
                    }
                    
                    logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {profile_id} –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {selenium_port}")
                    
                    return {
                        'profile_id': profile_id,
                        'selenium_port': selenium_port,
                        'selenium_url': f"http://127.0.0.1:{selenium_port}",
                        'status': 'running'
                    }
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {data.get('value')}")
                    return None
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {response.status_code}")
                logger.error(f"Response: {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return None

    def stop_profile(self, profile_id: str) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            if not self.app_running:
                logger.warning("‚ö†Ô∏è Multilogin –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
                return False
                
            params = {'profileId': profile_id}
            
            response = requests.get(
                f"{self.local_url}/api/v1/profile/stop",
                params=params,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('status') == 'OK':
                    if profile_id in self.active_profiles:
                        del self.active_profiles[profile_id]
                    logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {profile_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return True
                    
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {response.status_code}")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return False

    def get_selenium_driver(self, profile_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Selenium –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            from selenium import webdriver
            from selenium.webdriver.chrome.options import Options
            
            if profile_id not in self.active_profiles:
                logger.error(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å {profile_id} –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return None
                
            profile_info = self.active_profiles[profile_id]
            selenium_port = profile_info['port']
            
            options = Options()
            options.add_experimental_option("debuggerAddress", f"127.0.0.1:{selenium_port}")
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            
            driver = webdriver.Chrome(options=options)
            logger.info(f"‚úÖ Selenium –¥—Ä–∞–π–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø—Ä–æ—Ñ–∏–ª—é {profile_id}")
            return driver
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Selenium –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return None

    def get_profile_for_account(self, account_data: Dict[str, Any]) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            platform = account_data.get('platform', 'web')
            username = account_data.get('username', '')
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            profiles = self.get_profiles()
            
            for profile in profiles:
                profile_name = profile.get('name', '')
                if f"RPA_{platform}_{username}" in profile_name:
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: {profile.get('uuid')}")
                    return profile.get('uuid')
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            logger.info(f"üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {username} –Ω–∞ {platform}")
            return self.create_profile(account_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return None

    def cleanup_all_profiles(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π...")
        
        for profile_id in list(self.active_profiles.keys()):
            self.stop_profile(profile_id)
            
        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –æ—á–∏—â–µ–Ω—ã")

    def get_profile_status(self, profile_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            if profile_id in self.active_profiles:
                profile_info = self.active_profiles[profile_id]
                return {
                    'status': 'running',
                    'port': profile_info['port'],
                    'started_at': profile_info['started_at'].isoformat(),
                    'automation': profile_info.get('automation', True)
                }
            else:
                return {'status': 'stopped'}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return {'status': 'error', 'error': str(e)}

    def list_active_profiles(self) -> Dict[str, Dict]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        return {
            profile_id: {
                'port': info['port'],
                'started_at': info['started_at'].isoformat(),
                'automation': info.get('automation', True)
            }
            for profile_id, info in self.active_profiles.items()
        }

    def delete_profile(self, profile_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            if profile_id in self.active_profiles:
                self.stop_profile(profile_id)
            
            response = requests.delete(
                f"{self.base_url}/profile/{profile_id}",
                headers=self.headers,
                timeout=15
            )
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {profile_id} —É–¥–∞–ª–µ–Ω")
                if profile_id in self.profile_cache:
                    del self.profile_cache[profile_id]
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return False

