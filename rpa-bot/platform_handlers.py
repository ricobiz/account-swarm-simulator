
#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: Instagram, YouTube, TikTok, Twitter/X, Facebook, LinkedIn, Reddit, Discord –∏ –¥—Ä—É–≥–∏–µ
"""

import time
import logging
import random
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

logger = logging.getLogger(__name__)

class UniversalPlatformHandler:
    def __init__(self, driver, wait, behavior_simulator):
        self.driver = driver
        self.wait = wait
        self.behavior = behavior_simulator
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        self.platform_selectors = {
            'instagram': {
                'like_button': [
                    'button[aria-label*="Like"]', 'button[aria-label*="like"]',
                    'svg[aria-label*="Like"]', '[data-testid="like"]',
                    '.fr66n button', '._8-yf5'
                ],
                'follow_button': [
                    'button:contains("Follow")', 'button:contains("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")',
                    '[data-testid="follow"]', '._acan._acap._acas._aj1-'
                ],
                'comment_field': [
                    'textarea[placeholder*="comment"]', 'textarea[aria-label*="comment"]',
                    '.Ypffh', '[data-testid="comment-field"]'
                ]
            },
            'youtube': {
                'like_button': [
                    '#segmented-like-button button', 'button[aria-label*="like"]',
                    'ytd-toggle-button-renderer:first-child button'
                ],
                'subscribe_button': [
                    '#subscribe-button button', 'button[aria-label*="Subscribe"]',
                    'ytd-subscribe-button-renderer button'
                ],
                'comment_field': [
                    '#placeholder-area', '#contenteditable-root',
                    'div[contenteditable="true"]'
                ]
            },
            'tiktok': {
                'like_button': [
                    '[data-e2e="like-icon"]', '[data-e2e="video-like-icon"]',
                    'button[data-e2e="like"]'
                ],
                'follow_button': [
                    '[data-e2e="follow-button"]', 'button[data-e2e="follow"]'
                ],
                'comment_field': [
                    '[data-e2e="comment-input"]', 'div[contenteditable="true"]'
                ]
            },
            'twitter': {
                'like_button': [
                    '[data-testid="like"]', '[aria-label*="Like"]',
                    '[data-testid="heart"]'
                ],
                'retweet_button': [
                    '[data-testid="retweet"]', '[aria-label*="Retweet"]'
                ],
                'follow_button': [
                    '[data-testid*="follow"]', 'button:contains("Follow")'
                ]
            },
            'facebook': {
                'like_button': [
                    '[aria-label*="Like"]', '[data-testid="fb-ufi_likelink"]',
                    'button[name="reaction"]'
                ],
                'comment_field': [
                    '[data-testid="fb-composer-input"]', 'div[contenteditable="true"]'
                ]
            },
            'linkedin': {
                'like_button': [
                    'button[aria-label*="React"]', '.react-button',
                    '[data-control-name="like"]'
                ],
                'connect_button': [
                    'button[aria-label*="Connect"]', '[data-control-name="connect"]'
                ]
            },
            'reddit': {
                'upvote_button': [
                    '[aria-label*="upvote"]', 'button[name="upvote"]',
                    '.arrow.up'
                ],
                'comment_field': [
                    'textarea[name="text"]', '.usertext-edit textarea'
                ]
            },
            'discord': {
                'message_field': [
                    '[data-slate-editor="true"]', 'div[role="textbox"]',
                    '.slateTextArea-1Mkdgw'
                ]
            }
        }
    
    def detect_platform(self, url):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ URL"""
        url = url.lower()
        if 'instagram.com' in url:
            return 'instagram'
        elif 'youtube.com' in url or 'youtu.be' in url:
            return 'youtube'
        elif 'tiktok.com' in url:
            return 'tiktok'
        elif 'twitter.com' in url or 'x.com' in url:
            return 'twitter'
        elif 'facebook.com' in url:
            return 'facebook'
        elif 'linkedin.com' in url:
            return 'linkedin'
        elif 'reddit.com' in url:
            return 'reddit'
        elif 'discord.com' in url:
            return 'discord'
        elif 't.me' in url or 'telegram.org' in url:
            return 'telegram'
        else:
            return 'universal'
    
    def universal_like(self, action):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–∞–π–∫ –¥–ª—è –ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        current_url = self.driver.current_url
        platform = self.detect_platform(current_url)
        
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∞–π–∫–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {platform}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        selectors = self.platform_selectors.get(platform, {}).get('like_button', [])
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        if not selectors:
            selectors = [
                'button[aria-label*="like" i]', 'button[aria-label*="Like"]',
                '[data-testid*="like"]', '.like-button', '.btn-like',
                'button:contains("üëç")', 'button:contains("‚ô•")', 'button:contains("‚ù§")',
                '[title*="like" i]', '[alt*="like" i]'
            ]
        
        return self._perform_action(selectors, 'like')
    
    def universal_follow(self, action):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        current_url = self.driver.current_url
        platform = self.detect_platform(current_url)
        
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {platform}")
        
        selectors = self.platform_selectors.get(platform, {}).get('follow_button', [])
        
        if not selectors:
            selectors = [
                'button:contains("Follow")', 'button:contains("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")',
                'button:contains("Subscribe")', 'button:contains("Connect")',
                '[data-testid*="follow"]', '.follow-button', '.btn-follow',
                '[aria-label*="Follow"]', '[aria-label*="Subscribe"]'
            ]
        
        return self._perform_action(selectors, 'follow')
    
    def universal_comment(self, action):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        text = action.get('text', self._get_random_comment())
        current_url = self.driver.current_url
        platform = self.detect_platform(current_url)
        
        logger.info(f"–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {platform}")
        
        selectors = self.platform_selectors.get(platform, {}).get('comment_field', [])
        
        if not selectors:
            selectors = [
                'textarea[placeholder*="comment" i]', 'div[contenteditable="true"]',
                'input[placeholder*="comment" i]', '.comment-input',
                '[data-testid*="comment"]', '[aria-label*="comment" i]'
            ]
        
        return self._write_comment(selectors, text)
    
    def universal_share(self, action):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ—Å—Ç/share –¥–ª—è –ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        current_url = self.driver.current_url
        platform = self.detect_platform(current_url)
        
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–ø–æ—Å—Ç–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {platform}")
        
        selectors = [
            'button[aria-label*="Share"]', 'button[aria-label*="Retweet"]',
            '[data-testid*="share"]', '[data-testid*="retweet"]',
            '.share-button', '.btn-share', 'button:contains("Share")',
            'button:contains("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è")', 'button:contains("Repost")'
        ]
        
        return self._perform_action(selectors, 'share')
    
    def _perform_action(self, selectors, action_type):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏"""
        for selector in selectors:
            try:
                elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                
                for element in elements:
                    if element.is_displayed() and element.is_enabled():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ –¥–µ–π—Å—Ç–≤–∏–µ
                        if not self._is_action_already_done(element, action_type):
                            return self._click_element(element, action_type)
                
            except Exception as e:
                logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                continue
        
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
        return False
    
    def _write_comment(self, selectors, text):
        """–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        for selector in selectors:
            try:
                element = self.wait.until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                )
                
                # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–æ–ª–µ
                element.click()
                self.behavior.random_delay(500, 1500)
                
                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
                element.clear()
                self.behavior.random_delay(200, 500)
                
                # –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Å–∏–º–≤–æ–ª–∞–º
                for char in text:
                    element.send_keys(char)
                    self.behavior.typing_delay()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (Enter –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)
                element.send_keys(Keys.RETURN)
                self.behavior.random_delay(1000, 3000)
                
                logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {text}")
                return True
                
            except Exception as e:
                logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                continue
        
        return False
    
    def _is_action_already_done(self, element, action_type):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        try:
            classes = element.get_attribute('class') or ''
            aria_pressed = element.get_attribute('aria-pressed')
            style = element.get_attribute('style') or ''
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            active_indicators = ['active', 'selected', 'pressed', 'liked', 'followed']
            
            if any(indicator in classes.lower() for indicator in active_indicators):
                return True
            
            if aria_pressed == 'true':
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç (–∫—Ä–∞—Å–Ω—ã–π/—Å–∏–Ω–∏–π —á–∞—Å—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
            if 'color: rgb(255' in style or 'color: rgb(29, 161, 242)' in style:
                return True
            
            return False
            
        except:
            return False
    
    def _click_element(self, element, action_type):
        """–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            self.driver.execute_script(
                "arguments[0].scrollIntoView({block: 'center'});", element
            )
            self.behavior.random_delay(300, 800)
            
            # –ù–∞–≤–æ–¥–∏–º –º—ã—à—å
            ActionChains(self.driver).move_to_element(element).perform()
            self.behavior.random_delay(200, 600)
            
            # –ö–ª–∏–∫–∞–µ–º
            element.click()
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
            self.behavior.random_delay(1000, 3000)
            
            logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ '{action_type}' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{action_type}': {e}")
            return False
    
    def _get_random_comment(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        comments = [
            "–û—Ç–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç! üëç",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
            "–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
            "–ö–ª–∞—Å—Å–Ω–æ! üòä",
            "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!",
            "–ü–æ–ª–µ–∑–Ω–æ, —Å–ø–∞—Å–∏–±–æ!",
            "–ö—Ä—É—Ç–æ! üî•",
            "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è!",
            "–°—É–ø–µ—Ä! üëè",
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        ]
        return random.choice(comments)
    
    def scroll_and_interact(self, action):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        scroll_count = action.get('count', 3)
        interaction_chance = action.get('interaction_chance', 0.3)
        
        for i in range(scroll_count):
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º
            scroll_params = self.behavior.scroll_behavior('down', 
                                                        random.randint(300, 800))
            
            for j, delay in enumerate(scroll_params['delays']):
                self.driver.execute_script(
                    f"window.scrollBy(0, {scroll_params['step_size']});"
                )
                time.sleep(delay)
            
            # –°–ª—É—á–∞–π–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            if random.random() < interaction_chance:
                self.universal_like({'type': 'like'})
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∞–º–∏
            self.behavior.random_delay(2000, 5000)
        
        return True
