import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    if (req.method !== 'POST') {
      return new Response(JSON.stringify({
        error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
        message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      }), {
        status: 405,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    const email = Deno.env.get('MULTILOGIN_EMAIL') || 'thailandislive@gmail.com'
    const password = Deno.env.get('MULTILOGIN_PASSWORD') || 'multilogin4815A!'
    
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º Multilogin API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º...')
    
    // –ö–õ–Æ–ß–ï–í–ê–Ø –î–ï–¢–ê–õ–¨: Multilogin —Ç—Ä–µ–±—É–µ—Ç MD5 —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è!
    async function md5Hash(str: string): Promise<string> {
      const encoder = new TextEncoder()
      const data = encoder.encode(str)
      const hashBuffer = await crypto.subtle.digest('MD5', data)
      const hashArray = Array.from(new Uint8Array(hashBuffer))
      return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')
    }
    
    const hashedPassword = await md5Hash(password)
    console.log('üîê –ü–∞—Ä–æ–ª—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ MD5:', hashedPassword.substring(0, 8) + '...')
    
    const testResults = []
    
    // –¢–µ—Å—Ç 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å MD5 —Ö–µ—à–µ–º (–∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    try {
      console.log('üì° –¢–µ—Å—Ç 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å MD5 —Ö–µ—à–µ–º')
      const response1 = await fetch('https://api.multilogin.com/user/signin', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
        body: JSON.stringify({
          email: email,
          password: hashedPassword
        })
      })
      
      const responseText = await response1.text()
      testResults.push({
        endpoint: 'api.multilogin.com/user/signin (MD5)',
        status: response1.status,
        ok: response1.ok,
        response: responseText
      })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
      try {
        const jsonResponse = JSON.parse(responseText)
        if (jsonResponse.data?.token) {
          console.log('‚úÖ –¢–û–ö–ï–ù –ù–ê–ô–î–ï–ù –í data.token!')
        } else if (jsonResponse.access_token) {
          console.log('‚úÖ –¢–û–ö–ï–ù –ù–ê–ô–î–ï–ù –í access_token!')
        } else if (jsonResponse.token) {
          console.log('‚úÖ –¢–û–ö–ï–ù –ù–ê–ô–î–ï–ù –í token!')
        }
      } catch (e) {
        console.log('üìÑ –û—Ç–≤–µ—Ç –Ω–µ JSON –∏–ª–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞')
      }
      
    } catch (error) {
      testResults.push({
        endpoint: 'api.multilogin.com/user/signin (MD5)',
        error: error.message
      })
    }
    
    // –¢–µ—Å—Ç 2: –ë–µ–∑ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    try {
      console.log('üì° –¢–µ—Å—Ç 2: –ë–µ–∑ MD5 —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)')
      const response2 = await fetch('https://api.multilogin.com/user/signin', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          email: email,
          password: password
        })
      })
      
      testResults.push({
        endpoint: 'api.multilogin.com/user/signin (–±–µ–∑ MD5)',
        status: response2.status,
        ok: response2.ok,
        response: await response2.text()
      })
      
    } catch (error) {
      testResults.push({
        endpoint: 'api.multilogin.com/user/signin (–±–µ–∑ MD5)',
        error: error.message
      })
    }
    
    return new Response(JSON.stringify({
      success: true,
      message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Multilogin API –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
      credentials: {
        email: email,
        password_length: password.length
      },
      results: testResults,
      timestamp: new Date().toISOString()
    }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API',
      message: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})