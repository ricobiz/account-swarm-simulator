import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ Multilogin Token Manager')
    
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
    const multiloginEmail = Deno.env.get('MULTILOGIN_EMAIL')
    const multiloginPassword = Deno.env.get('MULTILOGIN_PASSWORD')

    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤:')
    console.log('üìß MULTILOGIN_EMAIL:', multiloginEmail ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    console.log('üîí MULTILOGIN_PASSWORD:', multiloginPassword ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

    if (!multiloginEmail || !multiloginPassword) {
      console.log('‚ùå –°–µ–∫—Ä–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
      return new Response(JSON.stringify({
        success: false,
        error: '–°–µ–∫—Ä–µ—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
        email_exists: !!multiloginEmail,
        password_exists: !!multiloginPassword
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    console.log('‚úÖ –°–µ–∫—Ä–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã')
    console.log('‚ÑπÔ∏è –í–ê–ñ–ù–û: Multilogin —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Local API –Ω–∞ localhost:35000')
    console.log('‚ÑπÔ∏è Edge Functions –Ω–µ –º–æ–≥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ localhost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    console.log('‚ÑπÔ∏è –ù—É–∂–µ–Ω automation token –∏–ª–∏ –∑–∞–ø—É—Å–∫ automation-service –ª–æ–∫–∞–ª—å–Ω–æ')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ automation token
    const automationToken = Deno.env.get('MULTILOGIN_TOKEN')
    if (automationToken) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω MULTILOGIN_TOKEN, –ø—Ä–æ–±—É–µ–º –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å')
      
      return new Response(JSON.stringify({
        success: true,
        message: 'Multilogin Token –Ω–∞–π–¥–µ–Ω',
        token: automationToken.substring(0, 10) + '...',
        note: '–ò—Å–ø–æ–ª—å–∑—É–µ–º automation token –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API',
        architecture: 'automation-token-based'
      }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    return new Response(JSON.stringify({
      success: false,
      error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
      explanation: {
        problem: 'Multilogin —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Local API (localhost:35000)',
        current_approach: 'Edge Function –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É API',
        solutions: [
          '1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MULTILOGIN_TOKEN (automation token)',
          '2. –ó–∞–ø—É—Å—Ç–∏—Ç—å automation-service –ª–æ–∫–∞–ª—å–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          '3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å proxy/tunnel –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É Multilogin'
        ]
      },
      multilogin_architecture: {
        local_api: 'http://localhost:35000',
        authentication: '–ß–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ CLI',
        access: '–¢–æ–ª—å–∫–æ —Å —Ç–æ–π –∂–µ –º–∞—à–∏–Ω—ã –≥–¥–µ –∑–∞–ø—É—â–µ–Ω Multilogin'
      },
      our_current_setup: {
        edge_function: '–†–∞–±–æ—Ç–∞–µ—Ç –≤ Supabase –æ–±–ª–∞–∫–µ',
        cannot_access: 'localhost –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        needs: 'automation token –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å'
      }
    }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message,
      stack: error.stack
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})