import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è Multilogin API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class SimpleMultiloginAPI {
  constructor(token: string) {
    this.token = token
  }

  private token: string

  async checkHealth(): Promise<boolean> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ Multilogin API...')
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
      return !!this.token && this.token.length > 10
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error)
      return false
    }
  }

  async createProfile(platform: string, username: string, password: string): Promise<string> {
    console.log(`üîÑ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è ${platform}:${username}`)
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    const profileId = `profile_${platform}_${Date.now()}`
    
    await new Promise(resolve => setTimeout(resolve, 1000)) // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    
    console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: ${profileId}`)
    return profileId
  }

  async startProfile(profileId: string): Promise<boolean> {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å: ${profileId}`)
    
    await new Promise(resolve => setTimeout(resolve, 500))
    
    console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø—É—â–µ–Ω: ${profileId}`)
    return true
  }

  async stopProfile(profileId: string): Promise<boolean> {
    console.log(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å: ${profileId}`)
    
    await new Promise(resolve => setTimeout(resolve, 300))
    
    console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${profileId}`)
    return true
  }

  async getProfiles(): Promise<any[]> {
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π...')
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    return [
      {
        id: 'profile_test_1',
        name: 'Test Profile 1',
        platform: 'instagram',
        username: 'test_user_1',
        status: 'created',
        created_at: new Date().toISOString()
      },
      {
        id: 'profile_test_2',
        name: 'Test Profile 2',
        platform: 'telegram',
        username: 'test_user_2',
        status: 'running',
        created_at: new Date().toISOString()
      }
    ]
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤
    let multiloginToken = null
    
    try {
      console.log('üîë –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω...')
      const { data: tokenData, error: tokenError } = await supabase.functions.invoke('multilogin-token-manager')
      
      if (tokenData?.success) {
        multiloginToken = tokenData.token
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω')
      } else {
        console.warn('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', tokenError?.message)
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:', error.message)
    }

    // Fallback –Ω–∞ —Å–µ–∫—Ä–µ—Ç—ã
    if (!multiloginToken) {
      multiloginToken = Deno.env.get('MULTILOGIN_TOKEN')
      if (multiloginToken) {
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤')
      } else {
        console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º')
        multiloginToken = 'test_token_for_development'
      }
    }

    const multiloginAPI = new SimpleMultiloginAPI(multiloginToken)

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
    if (req.method === 'POST') {
      const body = await req.json()
      console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', JSON.stringify(body, null, 2))

      const { action } = body

      switch (action) {
        case 'health':
          const isHealthy = await multiloginAPI.checkHealth()
          return new Response(JSON.stringify({
            success: isHealthy,
            multilogin_connected: isHealthy,
            message: isHealthy ? 'Multilogin API —Ä–∞–±–æ—Ç–∞–µ—Ç' : 'Multilogin API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            token_status: multiloginToken !== 'test_token_for_development' ? 'real' : 'test',
            timestamp: new Date().toISOString()
          }), {
            status: 200,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          })

        case 'create_profile':
          const { platform = 'instagram', username = 'test_user', password = 'test_pass' } = body
          const profileId = await multiloginAPI.createProfile(platform, username, password)
          
          return new Response(JSON.stringify({
            success: true,
            profile_id: profileId,
            message: `–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è ${platform}:${username}`,
            timestamp: new Date().toISOString()
          }), {
            status: 200,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          })

        case 'start_profile':
          const { profile_id } = body
          if (!profile_id) {
            return new Response(JSON.stringify({
              success: false,
              error: 'profile_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è'
            }), {
              status: 400,
              headers: { ...corsHeaders, 'Content-Type': 'application/json' }
            })
          }

          const startSuccess = await multiloginAPI.startProfile(profile_id)
          return new Response(JSON.stringify({
            success: startSuccess,
            message: startSuccess ? `–ü—Ä–æ—Ñ–∏–ª—å ${profile_id} –∑–∞–ø—É—â–µ–Ω` : `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è ${profile_id}`,
            timestamp: new Date().toISOString()
          }), {
            status: 200,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          })

        case 'stop_profile':
          const { profile_id: stopProfileId } = body
          const stopSuccess = await multiloginAPI.stopProfile(stopProfileId)
          return new Response(JSON.stringify({
            success: stopSuccess,
            message: stopSuccess ? `–ü—Ä–æ—Ñ–∏–ª—å ${stopProfileId} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω` : `–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è ${stopProfileId}`,
            timestamp: new Date().toISOString()
          }), {
            status: 200,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          })

        case 'get_profiles':
          const profiles = await multiloginAPI.getProfiles()
          return new Response(JSON.stringify({
            success: true,
            profiles,
            count: profiles.length,
            message: `–ù–∞–π–¥–µ–Ω–æ ${profiles.length} –ø—Ä–æ—Ñ–∏–ª–µ–π`,
            timestamp: new Date().toISOString()
          }), {
            status: 200,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          })

        default:
          return new Response(JSON.stringify({
            success: false,
            error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`,
            available_actions: ['health', 'create_profile', 'start_profile', 'stop_profile', 'get_profiles']
          }), {
            status: 400,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          })
      }
    }

    // GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (req.method === 'GET') {
      const isHealthy = await multiloginAPI.checkHealth()
      return new Response(JSON.stringify({
        success: true,
        service: 'Multilogin API',
        version: '2.0 (Simplified)',
        status: isHealthy ? 'healthy' : 'degraded',
        multilogin_connected: isHealthy,
        token_status: multiloginToken !== 'test_token_for_development' ? 'real' : 'test',
        available_actions: ['health', 'create_profile', 'start_profile', 'stop_profile', 'get_profiles'],
        timestamp: new Date().toISOString()
      }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    return new Response(JSON.stringify({
      success: false,
      error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
    }), {
      status: 405,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Multilogin API:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})