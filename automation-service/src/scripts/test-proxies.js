
import { ProxyManager } from '../proxy-manager.js';
import { DatabaseService } from '../supabase.js';

async function testAllProxies() {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏...');
  
  const db = new DatabaseService();
  const proxyManager = new ProxyManager();
  
  const { data: proxies, error } = await db.supabase
    .from('proxies')
    .select('*');

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error);
    return;
  }

  if (!proxies || proxies.length === 0) {
    console.log('–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  console.log(`–ù–∞–π–¥–µ–Ω–æ ${proxies.length} –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);

  for (const proxy of proxies) {
    console.log(`\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ ${proxy.ip}:${proxy.port}...`);
    
    const result = await proxyManager.testProxy(proxy);
    await proxyManager.updateProxyStats(proxy.id, result);
    
    if (result.success) {
      console.log(`‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç (${result.responseTime}ms, IP: ${result.ip})`);
    } else {
      console.log(`‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (${result.error})`);
    }
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  process.exit(0);
}

testAllProxies().catch(console.error);
