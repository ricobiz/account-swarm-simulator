
import { JobManager } from './job-manager.js';
import { DatabaseService } from './supabase.js';
import { CONFIG } from './config.js';

class AutomationService {
  constructor() {
    this.jobManager = new JobManager();
    this.db = new DatabaseService();
    this.isRunning = false;
  }

  async start() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞...');
    console.log(`üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${CONFIG.automation.maxConcurrentJobs}`);
    console.log(`‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${CONFIG.automation.checkInterval}ms`);
    
    this.isRunning = true;
    this.scheduleCheck();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
    process.on('SIGINT', () => this.shutdown());
    process.on('SIGTERM', () => this.shutdown());
  }

  async checkForNewJobs() {
    if (!this.isRunning) return;

    try {
      const availableSlots = CONFIG.automation.maxConcurrentJobs - this.jobManager.getActiveJobsCount();
      
      if (availableSlots <= 0) {
        console.log('‚è≥ –í—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã, –æ–∂–∏–¥–∞–µ–º...');
        return;
      }

      console.log(`üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π (–¥–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: ${availableSlots})...`);
      const scenarios = await this.db.getPendingScenarios();
      
      if (scenarios.length === 0) {
        console.log('üì≠ –ù–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${scenarios.length}`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤
      const jobsToRun = scenarios.slice(0, availableSlots);
      
      for (const scenario of jobsToRun) {
        if (this.jobManager.getActiveJobsCount() < CONFIG.automation.maxConcurrentJobs) {
          // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
          this.jobManager.executeJob(scenario).catch(error => {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
          });
        }
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const stats = this.jobManager.getJobStatistics();
      console.log(`üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${stats.active}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏–π:', error);
    }
  }

  scheduleCheck() {
    if (!this.isRunning) return;

    setTimeout(() => {
      this.checkForNewJobs().finally(() => {
        this.scheduleCheck();
      });
    }, CONFIG.automation.checkInterval);
  }

  async shutdown() {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    this.isRunning = false;

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    const activeJobs = this.jobManager.getActiveJobsCount();
    if (activeJobs > 0) {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ${activeJobs} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...`);
      
      // –î–∞–µ–º 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      let waitTime = 0;
      const maxWait = 30000;
      
      while (this.jobManager.getActiveJobsCount() > 0 && waitTime < maxWait) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        waitTime += 1000;
      }
    }

    console.log('‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
const service = new AutomationService();
service.start().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
  process.exit(1);
});
