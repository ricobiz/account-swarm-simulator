import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Multilogin API endpoints
const MULTILOGIN_API_BASE = 'https://api.multilogin.com'
const MULTILOGIN_LAUNCHER_BASE = 'https://launcher.mlx.yt:45001'

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { action, profileData } = await req.json()
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const token = Deno.env.get('MULTILOGIN_TOKEN')
    
    if (!token) {
      throw new Error('Multilogin —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`)
    console.log(`üìÑ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:`, profileData)

    let result
    
    switch (action) {
      case 'create_profile':
        result = await createProfile(token, profileData)
        break
      case 'start_profile':
        result = await startProfile(token, profileData.profileId, profileData.folderId)
        break
      case 'stop_profile':
        result = await stopProfile(token, profileData.profileId)
        break
      case 'list_profiles':
        result = await listProfiles(token)
        break
      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`)
    }

    return new Response(JSON.stringify({
      success: true,
      action,
      data: result,
      timestamp: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Multilogin API:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ Cloud API
async function createProfile(token: string, profileData: any) {
  console.log('üÜï –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ Cloud API:', profileData)
  
  const url = `${MULTILOGIN_API_BASE}/profile`
  
  const requestBody = {
    name: profileData.name || 'New Profile',
    browser_type: profileData.browser || 'mimic',
    os_type: profileData.os || 'windows',
    parameters: {
      flags: {
        audio_masking: 'mask',
        fonts_masking: 'mask',
        geolocation_masking: 'mask',
        geolocation_popup: 'allow',
        graphics_masking: 'mask',
        graphics_noise: 'mask',
        localization_masking: 'mask',
        media_devices_masking: 'mask',
        navigator_masking: 'mask',
        ports_masking: 'mask',
        proxy_masking: 'mask',
        screen_masking: 'mask',
        timezone_masking: 'mask',
        webrtc_masking: 'mask'
      }
    }
  }

  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', url, requestBody)

  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(requestBody)
  })

  if (!response.ok) {
    const errorText = await response.text()
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', response.status, errorText)
    throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${response.status} ${errorText}`)
  }

  const result = await response.json()
  console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:', result)
  return result
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ Launcher API
async function startProfile(token: string, profileId: string, folderId?: string) {
  console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ Launcher API:', profileId)
  
  try {
    const defaultFolderId = folderId || await getDefaultFolderId(token)
    const url = `${MULTILOGIN_LAUNCHER_BASE}/api/v2/profile/f/${defaultFolderId}/p/${profileId}/start?automation_type=selenium&headless_mode=false`
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞:', url)

    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/json'
      }
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:', response.status, errorText)
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: ${response.status} ${errorText}`)
    }

    const result = await response.json()
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø—É—â–µ–Ω:', result)
    return result
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error)
    throw error
  }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ Launcher API
async function stopProfile(token: string, profileId: string) {
  console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ Launcher API:', profileId)
  
  const url = `${MULTILOGIN_LAUNCHER_BASE}/api/v1/profile/stop/p/${profileId}`
  
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', url)

  const response = await fetch(url, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  })

  if (!response.ok) {
    const errorText = await response.text()
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', response.status, errorText)
    throw new Error(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${response.status} ${errorText}`)
  }

  const result = await response.json()
  console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', result)
  return result
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —á–µ—Ä–µ–∑ Cloud API
async function listProfiles(token: string) {
  console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π —á–µ—Ä–µ–∑ Cloud API')
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫–∏
    const foldersUrl = `${MULTILOGIN_API_BASE}/workspace/folders`
    
    console.log('üì§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞–ø–∫–∏:', foldersUrl)

    const foldersResponse = await fetch(foldersUrl, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/json'
      }
    })

    if (!foldersResponse.ok) {
      const errorText = await foldersResponse.text()
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫:', foldersResponse.status, errorText)
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫: ${foldersResponse.status} ${errorText}`)
    }

    const foldersResult = await foldersResponse.json()
    console.log('‚úÖ –ü–∞–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', foldersResult)
    
    if (!foldersResult.data?.folders?.length) {
      console.log('üì≠ –ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return []
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –ø–µ—Ä–≤–æ–π –ø–∞–ø–∫–∏ (–æ–±—ã—á–Ω–æ –ø–∞–ø–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const folderId = foldersResult.data.folders[0].folder_id
    const profilesUrl = `${MULTILOGIN_API_BASE}/profile/f/${folderId}`
    
    console.log('üì§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –ø–∞–ø–∫–∏:', profilesUrl)

    const profilesResponse = await fetch(profilesUrl, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/json'
      }
    })

    if (!profilesResponse.ok) {
      const errorText = await profilesResponse.text()
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π:', profilesResponse.status, errorText)
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: ${profilesResponse.status} ${errorText}`)
    }

    const profilesResult = await profilesResponse.json()
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:', profilesResult)
    return profilesResult.data?.profiles || []
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π:', error)
    throw error
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–∞–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
async function getDefaultFolderId(token: string): Promise<string> {
  const foldersUrl = `${MULTILOGIN_API_BASE}/workspace/folders`
  
  const response = await fetch(foldersUrl, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–∞–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
  }

  const result = await response.json()
  return result.data?.folders?.[0]?.folder_id || ''
}