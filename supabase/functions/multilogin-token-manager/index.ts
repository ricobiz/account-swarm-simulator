import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    console.log('üîÑ multilogin-token-manager: –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏...')
    
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // –ü–æ–ª—É—á–∞–µ–º –ì–û–¢–û–í–´–ô automation token –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Supabase
    // –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∑—è—Ç—å –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Multilogin
    const automationToken = Deno.env.get('MULTILOGIN_TOKEN')

    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ automation token:')
    console.log('üéØ MULTILOGIN_TOKEN:', automationToken ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

    if (!automationToken) {
      console.warn('‚ö†Ô∏è Automation token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!')
      return new Response(JSON.stringify({
        success: false,
        error: 'Automation token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        message: '–î–æ–±–∞–≤—å—Ç–µ MULTILOGIN_TOKEN –≤ —Å–µ–∫—Ä–µ—Ç—ã Supabase. –¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Multilogin.'
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    if (req.method === 'POST') {
      console.log('üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º automation token –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
      
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º automation token –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ–ª–≥–∏–º —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è
        // Automation tokens –æ–±—ã—á–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—Ç –¥–æ–ª–≥–æ (–º–µ—Å—è—Ü—ã/–≥–æ–¥—ã)
        const expiresAt = new Date(Date.now() + (365 * 24 * 60 * 60 * 1000)) // 1 –≥–æ–¥
        
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã
        const { error: updateError } = await supabase
          .from('multilogin_tokens')
          .update({ is_active: false })
          .eq('email', 'automation_token') // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π email –¥–ª—è automation tokens

        if (updateError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', updateError)
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        const { error: insertError } = await supabase
          .from('multilogin_tokens')
          .insert({
            email: 'automation_token', // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π email –¥–ª—è automation tokens
            token: automationToken,
            expires_at: expiresAt.toISOString(),
            is_active: true
          })

        if (insertError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', insertError)
          return new Response(JSON.stringify({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
            message: insertError.message,
            timestamp: new Date().toISOString()
          }), {
            status: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          })
        }

        console.log('‚úÖ Automation token —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
        console.log('‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:', expiresAt.toLocaleString())
        
        return new Response(JSON.stringify({
          success: true,
          message: 'Automation token —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
          token_type: 'automation_token',
          expires_at: expiresAt.toISOString(),
          note: 'Automation tokens –æ–±—ã—á–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—Ç –æ—á–µ–Ω—å –¥–æ–ª–≥–æ. –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.',
          timestamp: new Date().toISOString()
        }), {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
        
      } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
        
        return new Response(JSON.stringify({
          success: false,
          error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è automation token',
          message: error.message,
          timestamp: new Date().toISOString()
        }), {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      }
    }

    return new Response(JSON.stringify({
      success: false,
      error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
      supported_methods: ['POST'],
      post_description: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å automation token –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
      instructions: '–ü–æ–ª—É—á–∏—Ç–µ automation token –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Multilogin –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Å–µ–∫—Ä–µ—Ç—ã Supabase –∫–∞–∫ MULTILOGIN_TOKEN'
    }), {
      status: 405,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Token Manager:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})