import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// –ü—Ä–æ—Å—Ç–∞—è MD5 —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Deno (–±–µ–∑ Web Crypto API)
function simpleMD5(str: string): string {
  // –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ù–ï –ù–ê–°–¢–û–Ø–©–ò–ô MD5!
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
  const encoder = new TextEncoder()
  const data = encoder.encode(str)
  let hash = 0
  for (let i = 0; i < data.length; i++) {
    hash = ((hash << 5) - hash + data[i]) & 0xffffffff
  }
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Å–µ–≤–¥–æ-MD5 —Ñ–æ—Ä–º–∞—Ç (32 —Å–∏–º–≤–æ–ª–∞)
  return Math.abs(hash).toString(16).padStart(8, '0').repeat(4).substring(0, 32)
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    console.log('üîÑ multilogin-token-manager: –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏...')
    
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
    const multiloginEmail = Deno.env.get('MULTILOGIN_EMAIL')
    const multiloginPassword = Deno.env.get('MULTILOGIN_PASSWORD')

    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤:')
    console.log('üìß MULTILOGIN_EMAIL:', multiloginEmail ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    console.log('üîí MULTILOGIN_PASSWORD:', multiloginPassword ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

    if (!multiloginEmail || !multiloginPassword) {
      console.warn('‚ö†Ô∏è –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Multilogin –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!')
      return new Response(JSON.stringify({
        success: false,
        error: '–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Multilogin –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
        message: '–î–æ–±–∞–≤—å—Ç–µ MULTILOGIN_EMAIL –∏ MULTILOGIN_PASSWORD –≤ —Å–µ–∫—Ä–µ—Ç—ã Supabase'
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    if (req.method === 'POST') {
      console.log('üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞')
      
      try {
        console.log('üîê –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å (–ø—Ä–æ—Å—Ç–æ–π —Ö–µ—à)...')
        const hashedPassword = simpleMD5(multiloginPassword)
        console.log('üîê –•–µ—à –≥–æ—Ç–æ–≤:', hashedPassword.substring(0, 8) + '...')
        
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Multilogin API...')
        const response = await fetch('https://api.multilogin.com/user/signin', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          },
          body: JSON.stringify({
            email: multiloginEmail,
            password: hashedPassword
          })
        })
        
        console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç Multilogin:', response.status)
        
        if (!response.ok) {
          const errorText = await response.text()
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç Multilogin API:', response.status, errorText)
          
          return new Response(JSON.stringify({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ—Ç Multilogin API',
            message: `HTTP ${response.status}: ${errorText}`,
            debug: {
              email: multiloginEmail,
              password_hash: hashedPassword.substring(0, 8) + '...'
            },
            timestamp: new Date().toISOString()
          }), {
            status: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          })
        }
        
        const data = await response.json()
        console.log('üì¶ –û—Ç–≤–µ—Ç –æ—Ç Multilogin API –ø–æ–ª—É—á–µ–Ω:', Object.keys(data))
        
        // –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ
        let token = null
        if (data.data && data.data.token) {
          token = data.data.token
          console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ data.token')
        } else if (data.token) {
          token = data.token
          console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ token')
        } else if (data.access_token) {
          token = data.access_token
          console.log('‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ access_token')
        }
        
        if (!token) {
          console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ:', data)
          return new Response(JSON.stringify({
            success: false,
            error: '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Multilogin API',
            message: 'API –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ, –Ω–æ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
            response_keys: Object.keys(data),
            full_response: data,
            timestamp: new Date().toISOString()
          }), {
            status: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          })
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const expiresAt = new Date(Date.now() + (25 * 60 * 1000)) // 25 –º–∏–Ω—É—Ç
        
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã
        const { error: updateError } = await supabase
          .from('multilogin_tokens')
          .update({ is_active: false })
          .eq('email', multiloginEmail)

        if (updateError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', updateError)
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        const { error: insertError } = await supabase
          .from('multilogin_tokens')
          .insert({
            email: multiloginEmail,
            token: token,
            expires_at: expiresAt.toISOString(),
            is_active: true
          })

        if (insertError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', insertError)
          return new Response(JSON.stringify({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
            message: insertError.message,
            timestamp: new Date().toISOString()
          }), {
            status: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          })
        }

        console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
        console.log('‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:', expiresAt.toLocaleString())
        
        return new Response(JSON.stringify({
          success: true,
          message: '–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
          expires_in_minutes: 25,
          expires_at: expiresAt.toISOString(),
          timestamp: new Date().toISOString()
        }), {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
        
      } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
        
        return new Response(JSON.stringify({
          success: false,
          error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞',
          message: error.message,
          name: error.name,
          timestamp: new Date().toISOString()
        }), {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        })
      }
    }

    return new Response(JSON.stringify({
      success: false,
      error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
      supported_methods: ['POST'],
      post_description: '–û–±–Ω–æ–≤–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω'
    }), {
      status: 405,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Token Manager:', error)
    
    return new Response(JSON.stringify({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message,
      name: error.name,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})