
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useRPAService } from '@/hooks/useRPAService';
import { useToast } from '@/hooks/use-toast';
import { PlayCircle, Loader2 } from 'lucide-react';
import type { RPATask } from '@/types/rpa';

export const TestRPAButton: React.FC = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [testLog, setTestLog] = useState<string[]>([]);
  const { submitRPATask, waitForRPACompletion } = useRPAService();
  const { toast } = useToast();

  const addLog = (message: string) => {
    console.log(`[RPA TEST] ${message}`);
    setTestLog(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const runTestRPA = async () => {
    setIsRunning(true);
    setTestLog([]);
    
    try {
      addLog('–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç RPA —Å–∏—Å—Ç–µ–º—ã');
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
      const testTask: RPATask = {
        taskId: `test_${Date.now()}`,
        url: 'https://httpbin.org/get',
        actions: [
          {
            type: 'navigate',
            url: 'https://httpbin.org/get'
          },
          {
            type: 'wait',
            duration: 2000
          },
          {
            type: 'scroll',
            x: 0,
            y: 100
          },
          {
            type: 'wait',
            duration: 1000
          }
        ],
        accountId: 'test-account',
        scenarioId: 'test-scenario',
        blockId: 'test-block',
        timeout: 30000
      };

      addLog(`–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: ${testTask.taskId}`);

      toast({
        title: "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π RPA –∑–∞–¥–∞—á–∏",
        description: "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É RPA-–±–æ—Ç—É..."
      });

      addLog('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É RPA-–±–æ—Ç—É...');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
      const submitResult = await submitRPATask(testTask);
      
      addLog(`–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: ${JSON.stringify(submitResult)}`);
      
      if (!submitResult.success) {
        throw new Error(submitResult.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏');
      }

      addLog('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∂–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...');

      toast({
        title: "–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
        description: "–û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è RPA-–±–æ—Ç–æ–º..."
      });

      // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      addLog('–ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥)...');
      const result = await waitForRPACompletion(testTask.taskId, 30000);

      addLog(`–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(result)}`);

      if (result?.success) {
        addLog('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        toast({
          title: "‚úÖ RPA —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!",
          description: result.message || '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'
        });
      } else {
        addLog(`‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        toast({
          title: "‚ùå RPA —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π",
          description: result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          variant: "destructive"
        });
      }

    } catch (error: any) {
      addLog(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ RPA:', error);
      
      toast({
        title: "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setIsRunning(false);
    }
  };

  return (
    <Card className="bg-gradient-to-r from-purple-800/50 to-blue-800/50 border-purple-500/30">
      <CardHeader>
        <CardTitle className="text-white flex items-center gap-2">
          <PlayCircle className="h-5 w-5" />
          –¢–µ—Å—Ç RPA —Å–∏—Å—Ç–µ–º—ã
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <p className="text-gray-300 text-sm">
          –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é RPA –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        </p>
        
        <Button
          onClick={runTestRPA}
          disabled={isRunning}
          className="w-full bg-purple-600 hover:bg-purple-700"
        >
          {isRunning ? (
            <>
              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...
            </>
          ) : (
            <>
              <PlayCircle className="h-4 w-4 mr-2" />
              –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç RPA
            </>
          )}
        </Button>
        
        <div className="text-xs text-gray-400">
          <p>–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞:</p>
          <ul className="list-disc list-inside ml-2 space-y-1">
            <li>–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ httpbin.org/get</li>
            <li>–û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã</li>
            <li>–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</li>
            <li>–û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥–∞</li>
          </ul>
        </div>

        {/* –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ */}
        {testLog.length > 0 && (
          <div className="mt-4 p-3 bg-gray-900 rounded-lg">
            <p className="text-xs text-gray-400 mb-2">–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</p>
            <div className="text-xs text-gray-300 space-y-1 max-h-32 overflow-y-auto">
              {testLog.map((log, index) => (
                <div key={index} className="font-mono">{log}</div>
              ))}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};
